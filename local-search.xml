<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>微信小程序开发day03</title>
    <link href="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/"/>
    <url>/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了微信小程序的视图与逻辑</p><span id="more"></span><h3 id="一-导航"><a href="#一-导航" class="headerlink" title="一. 导航"></a>一. 导航</h3><h4 id="1-声明式导航"><a href="#1-声明式导航" class="headerlink" title="1. 声明式导航"></a>1. 声明式导航</h4><h5 id="1-1-跳转到tabBar"><a href="#1-1-跳转到tabBar" class="headerlink" title="1.1 跳转到tabBar"></a>1.1 跳转到tabBar</h5><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image1.png" class=""><h5 id="1-2-跳转到非tabBar"><a href="#1-2-跳转到非tabBar" class="headerlink" title="1.2 跳转到非tabBar"></a>1.2 跳转到非tabBar</h5><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image2.png" class=""><p><strong>open-type属性可以省略</strong></p><h5 id="1-3-后退导航"><a href="#1-3-后退导航" class="headerlink" title="1.3 后退导航"></a>1.3 后退导航</h5><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image3.png" class=""><p>delta 默认为1 </p><h4 id="2-编程式导航"><a href="#2-编程式导航" class="headerlink" title="2. 编程式导航"></a>2. 编程式导航</h4><h5 id="2-1-跳转到tabBar页面"><a href="#2-1-跳转到tabBar页面" class="headerlink" title="2.1 跳转到tabBar页面"></a>2.1 跳转到tabBar页面</h5><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image4.png" class=""><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数名()&#123;<br>wx.<span class="hljs-title function_">switchTab</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/...&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-2-跳转到非tabBar页面"><a href="#2-2-跳转到非tabBar页面" class="headerlink" title="2.2 跳转到非tabBar页面"></a>2.2 跳转到非tabBar页面</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数名()&#123;<br>wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/...&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-后退导航"><a href="#2-3-后退导航" class="headerlink" title="2.3 后退导航"></a>2.3 后退导航</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数名()&#123;<br>wx.<span class="hljs-title function_">navigateBack</span>(&#123;<br>        <span class="hljs-comment">//delta 默认为1</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-导航式传参"><a href="#3-导航式传参" class="headerlink" title="3. 导航式传参"></a>3. 导航式传参</h4><h5 id="3-1-声明式导航传参"><a href="#3-1-声明式导航传参" class="headerlink" title="3.1 声明式导航传参"></a>3.1 声明式导航传参</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">navugator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/...?name=kai&amp;age=21&quot;</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">navugator</span>&gt;</span><br></code></pre></td></tr></table></figure><p>与web端类似</p><h5 id="3-2-编程式导航传参"><a href="#3-2-编程式导航传参" class="headerlink" title="3.2 编程式导航传参"></a>3.2 编程式导航传参</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">函数名()&#123;<br>wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/...?name=kai&amp;age=21&#x27;</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注</strong>：声明式和编程式导航传的参数可以直接在 onLoad中获取</p><h3 id="二-页面事件"><a href="#二-页面事件" class="headerlink" title="二. 页面事件"></a>二. 页面事件</h3><h4 id="1-下拉刷新"><a href="#1-下拉刷新" class="headerlink" title="1. 下拉刷新"></a>1. 下拉刷新</h4><p>启用和配置day02已介绍</p><p>监听：<br>js中的onPullDownRefresh(){ …. }</p><p>刷新完后loading效果会一直显示 不会主动消失，调用wx.stopPullDownRefresh()</p><h4 id="2-上拉触底"><a href="#2-上拉触底" class="headerlink" title="2. 上拉触底"></a>2. 上拉触底</h4><p>监听：<br>js中的onReachBottom(){ … }</p><p>添加loading提示效果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">getcolors</span>(<span class="hljs-params"></span>)&#123;<br>wx.<span class="hljs-title function_">showLoading</span>(&#123;<span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;...&#x27;</span>&#125;)<br>    wx.<span class="hljs-title function_">request</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//...</span><br>        <span class="hljs-attr">complete</span>:<span class="hljs-function">()=&gt;</span>&#123;<br>wx.<span class="hljs-title function_">hideLoading</span>()<span class="hljs-comment">//隐藏效果</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>节流处理：</p><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image5.png" class=""><h3 id="三-生命周期"><a href="#三-生命周期" class="headerlink" title="三. 生命周期"></a>三. 生命周期</h3><p>应用的周期函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">App</span>(&#123;<br>    <span class="hljs-comment">//初始化完成时执行，全局只触发一次</span><br>    <span class="hljs-title function_">onLaunch</span>(<span class="hljs-params"></span>)&#123;...&#125;<br>    <span class="hljs-comment">//小程序启动，或从后台进入前台显示时触发</span><br>    <span class="hljs-title function_">onShow</span>(<span class="hljs-params"></span>)&#123;...&#125;<br>    <span class="hljs-comment">//小程序从前台进入后台时触发</span><br>    <span class="hljs-title function_">onHide</span>(<span class="hljs-params"></span>)&#123;...&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>页面的周期函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Page</span>(&#123;<br><span class="hljs-title function_">onLoad</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//监听页面加载</span><br>    <span class="hljs-title function_">onShow</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//监听页面显示</span><br>    <span class="hljs-title function_">onReady</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//监听页面初次渲染完成</span><br>    <span class="hljs-title function_">onHide</span>(<span class="hljs-params"></span>)&#123;&#125;,<span class="hljs-comment">//监听页面隐藏</span><br>    <span class="hljs-title function_">onUnload</span>(<span class="hljs-params"></span>)&#123;&#125;<span class="hljs-comment">//监听页面卸载</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="四-WXS脚本"><a href="#四-WXS脚本" class="headerlink" title="四. WXS脚本"></a>四. WXS脚本</h3><h4 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a>1. 应用场景</h4><p>wxml无法调用js函数，但是wxml中可以调用wxs中定义的函数</p><h4 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h4><p>内嵌：</p><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image6.png" class=""><p>外联：</p><img src="/2024/01/03/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day03/image7.png" class=""><p>使用外联：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;m2.toLower(country)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 引用外联的脚本 src必须为相对路径 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">wxs</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../utils/...wxs&quot;</span> <span class="hljs-attr">module</span>=<span class="hljs-string">&quot;m2&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">wxs</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发day02</title>
    <link href="/2023/12/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day02/"/>
    <url>/2023/12/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day02/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了微信小程序开发的基本语法操作</p><span id="more"></span><h3 id="一-wxml模板语法"><a href="#一-wxml模板语法" class="headerlink" title="一.wxml模板语法"></a>一.wxml模板语法</h3><h4 id="1-数据绑定"><a href="#1-数据绑定" class="headerlink" title="1.数据绑定"></a>1.数据绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- mustache语法 双花括号中间放要渲染的变量 --&gt;</span><br></code></pre></td></tr></table></figure><p>info定义在对于js文件的data:{ info &#x3D; ‘hello world’}</p><p>mustache语法应用：</p><ul><li><p>绑定内容</p><p>—同上—</p></li><li><p>绑定属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">image</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;&#123;&#123;imgSrc&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>运算（三元运算，算数运算）</p><p>在data中加入 randomNumber  :Math.random() * 10</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>&#123;&#123;randomNumber &gt;= 5 ? &#x27;大于五&#x27;:&#x27;小于五&#x27;&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="2-事件绑定"><a href="#2-事件绑定" class="headerlink" title="2.事件绑定"></a>2.事件绑定</h4><h5 id="2-1常用事件"><a href="#2-1常用事件" class="headerlink" title="2.1常用事件"></a>2.1常用事件</h5><ul><li><p>tap</p><p>绑定方式：bindtap  bind:tap</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;primary&quot;</span> <span class="hljs-attr">bindTap</span>=<span class="hljs-string">&quot;btnTapHandler&quot;</span>&gt;</span><br>    按钮<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">btnTapHandler</span>(<span class="hljs-params">e</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e)<br>&#125;<br></code></pre></td></tr></table></figure><p>手指触摸后马上离开，类似于HTML中的click事件</p></li><li><p>input</p><p>bindinput  bind:input</p><p>文本的输入事件</p></li><li><p>change</p><p>bindchange bind:change</p><p>状态改变时触发</p></li></ul><h5 id="2-2事件对象属性列表"><a href="#2-2事件对象属性列表" class="headerlink" title="2.2事件对象属性列表"></a>2.2事件对象属性列表</h5><p>当事件回调触发的时候，会收到一个事件对象event</p><ul><li><p>target</p><p>触发事件的组件的一些属性集合</p><p>它获得的是源头组件(与currentTarget区别)</p></li><li><p>detail</p><p>额外的信息</p></li><li><p>touches</p><p>触摸事件中，当前停留在屏幕上的触摸点的信息的数组</p></li></ul><h5 id="2-3事件处理函数中为data中数据赋值"><a href="#2-3事件处理函数中为data中数据赋值" class="headerlink" title="2.3事件处理函数中为data中数据赋值"></a>2.3事件处理函数中为data中数据赋值</h5><p>调用this.setData({Object对象})</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">changeCount</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + <span class="hljs-number">1</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4事件传参"><a href="#2-4事件传参" class="headerlink" title="2.4事件传参"></a>2.4事件传参</h5><p>不能在绑定事件的同时为事件处理函数传递参数</p><p>可以为组件提供 **<em>data-</em> *** 自定义属性传参，其中 * 代表参数的名字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindTap</span>=<span class="hljs-string">&quot;btnHandler1&quot;</span> <span class="hljs-attr">data-info</span>=<span class="hljs-string">&quot;&#123;&#123;2&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-comment">&lt;!-- info会被解析为参数名字 数值2为参数的值 --&gt;</span><br></code></pre></td></tr></table></figure><p>处理函数中获取参数的值：event.target.dataset.参数名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">btnHandler1</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>        <span class="hljs-attr">count</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">count</span> + e.<span class="hljs-property">target</span>.<span class="hljs-property">dataset</span>.<span class="hljs-property">info</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-5bindinput语法格式"><a href="#2-5bindinput语法格式" class="headerlink" title="2.5bindinput语法格式"></a>2.5bindinput语法格式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputHandler&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">input</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">inputHandler</span>(<span class="hljs-params">e</span>)&#123;<br>    <span class="hljs-comment">//e.detail.value 是变化过后 文本框的最新的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">detail</span>.<span class="hljs-property">value</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-条件渲染"><a href="#3-条件渲染" class="headerlink" title="3.条件渲染"></a>3.条件渲染</h4><h5 id="3-1wx-if"><a href="#3-1wx-if" class="headerlink" title="3.1wx:if"></a>3.1wx:if</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;condition&#125;&#125;&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- wx:elif  wx:else --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;type === 1&#125;&#125;&quot;</span>&gt;</span> 男 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:elif</span>=<span class="hljs-string">&quot;&#123;&#123;type === 2&#125;&#125;&quot;</span>&gt;</span>  女 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:else</span>&gt;</span> 保密 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以根据条件来判断渲染哪个view</p><h5 id="3-2结合-lt-block-gt-使用wx-if"><a href="#3-2结合-lt-block-gt-使用wx-if" class="headerlink" title="3.2结合 &lt; block &gt; 使用wx:if"></a>3.2结合 &lt; block &gt; 使用wx:if</h5><p>如果一次性控制多个组件的展示与隐藏，可以使用一个 &lt; block &gt; &lt; &#x2F;block &gt; 标签将多个组件包装起来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">block</span> <span class="hljs-attr">wx:if</span>=<span class="hljs-string">&quot;&#123;&#123;true&#125;&#125;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> 1 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span> 2 <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">block</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>block 不会被渲染，避免不必要的渲染</strong> </p><h5 id="3-3hidden"><a href="#3-3hidden" class="headerlink" title="3.3hidden"></a>3.3hidden</h5><p>控制隐藏</p><p>hidden&#x3D;”“</p><h5 id="3-4对比wx-if-hidden"><a href="#3-4对比wx-if-hidden" class="headerlink" title="3.4对比wx:if hidden"></a>3.4对比wx:if hidden</h5><ul><li>wx:if 以动态创建和移除元素的方式，控制元素的展示与隐藏</li><li>hidden以切换样式的方式(display:none&#x2F;block;) 控制元素的显示与隐藏</li></ul><p>使用建议：</p><ul><li>频繁切换 用 hidden 性能更好</li><li>控制条件复杂时，使用wx:if 等</li></ul><h4 id="4-列表渲染"><a href="#4-列表渲染" class="headerlink" title="4.列表渲染"></a>4.列表渲染</h4><h5 id="4-1-wx-for"><a href="#4-1-wx-for" class="headerlink" title="4.1 wx:for"></a>4.1 wx:for</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span>&gt;</span><br>索引是: &#123;&#123;index&#125;&#125; 索引项是: &#123;&#123;item&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-2-手动指定索引和当前项的变量名"><a href="#4-2-手动指定索引和当前项的变量名" class="headerlink" title="4.2 手动指定索引和当前项的变量名"></a>4.2 手动指定索引和当前项的变量名</h5><ul><li>使用wx:for-index 可以指定当前循环项的索引</li><li>使用wx:for-item 可以指定当前项的变量名</li><li><strong>很少用 了解即可</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;array&#125;&#125;&quot;</span> <span class="hljs-attr">wx:for-index</span>=<span class="hljs-string">&quot;idx&quot;</span> <span class="hljs-attr">wx:for-item</span>=<span class="hljs-string">&quot;itemName&quot;</span>&gt;</span><br>索引是: &#123;&#123;idx&#125;&#125; 索引项是: &#123;&#123;itemName&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="4-3-wx-key"><a href="#4-3-wx-key" class="headerlink" title="4.3 wx:key"></a>4.3 wx:key</h5><p>渲染出唯一的key值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>:&#123;<br>    <span class="hljs-attr">userList</span>:[<br>        &#123;id :<span class="hljs-number">1</span> ,name :<span class="hljs-string">&#x27;楷1&#x27;</span>&#125;<br>        &#123;id :<span class="hljs-number">2</span> ,name :<span class="hljs-string">&#x27;楷2&#x27;</span>&#125;<br>&#123;id :<span class="hljs-number">3</span> ,name :<span class="hljs-string">&#x27;楷3&#x27;</span>&#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">wx:for</span>=<span class="hljs-string">&quot;&#123;&#123;userList&#125;&#125;&quot;</span> <span class="hljs-attr">wx:key</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-comment">&lt;!-- key 那里不用mustache语法 --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二-wxss模板样式"><a href="#二-wxss模板样式" class="headerlink" title="二.wxss模板样式"></a>二.wxss模板样式</h3><h5 id="1-在css上独有的特性"><a href="#1-在css上独有的特性" class="headerlink" title="1. 在css上独有的特性"></a>1. 在css上独有的特性</h5><ul><li><p>rpx 尺寸单位</p><p>rpx 是把所有设备的屏幕宽度上分为750份  (750 rpx)</p></li><li><p>@import样式导入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;相对路径【common.wxss】&quot;</span>;<br></code></pre></td></tr></table></figure></li></ul><h3 id="三-全局配置"><a href="#三-全局配置" class="headerlink" title="三.全局配置"></a>三.全局配置</h3><h4 id="1-常用配置项"><a href="#1-常用配置项" class="headerlink" title="1. 常用配置项"></a>1. 常用配置项</h4><ul><li>pages ：所有页面存放路径</li><li><strong>window</strong> ：全局设置小程序窗口外观</li><li><strong>tabBar</strong> ：底部效果</li><li>style ： 是否启用新版的组件样式</li></ul><h4 id="2-window相关配置"><a href="#2-window相关配置" class="headerlink" title="2.window相关配置"></a>2.window相关配置</h4><h5 id="2-1-小程序窗口组成部分"><a href="#2-1-小程序窗口组成部分" class="headerlink" title="2.1 小程序窗口组成部分"></a>2.1 小程序窗口组成部分</h5><img src="/2023/12/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day02/image1.png" class=""><h5 id="2-2-导航栏标题"><a href="#2-2-导航栏标题" class="headerlink" title="2.2 导航栏标题"></a>2.2 导航栏标题</h5><p>app.json   —&gt;   window  —&gt; navigatorBarTitleText</p><p>注：”navigationStyle” : “custom”,  &#x2F;&#x2F; 不显示导航栏</p><h5 id="2-3-下拉刷新功能"><a href="#2-3-下拉刷新功能" class="headerlink" title="2.3 下拉刷新功能"></a>2.3 下拉刷新功能</h5><p>app.json   —&gt;   window  —&gt; enablePullDownRefresh</p><p>作用于所有页面</p><p>设置下拉刷新的背景色：</p><p>app.json   —&gt;   window  —&gt; backgroundColor</p><p>设置下拉刷新loading样式</p><p>app.json   —&gt;   window  —&gt; backgroundTextStyle</p><p>只有灰色和白色</p><p>设置上拉触底的距离</p><p>上拉触底：当距离底部多少时加载更多的数据</p><p>app.json   —&gt;   window  —&gt; onReachBottomDistance</p><h4 id="3-tabBar"><a href="#3-tabBar" class="headerlink" title="3.tabBar"></a>3.tabBar</h4><h5 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h5><img src="/2023/12/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day02/image2.png" class=""><h5 id="3-2-组成部分"><a href="#3-2-组成部分" class="headerlink" title="3.2 组成部分"></a>3.2 组成部分</h5><img src="/2023/12/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day02/image3.png" class=""><h5 id="3-3-配置项"><a href="#3-3-配置项" class="headerlink" title="3.3 配置项"></a>3.3 配置项</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;tabBar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/list/list&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;测试&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/cate.png&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/cate-active.png&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;pagePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pages/list/index&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;首页&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;iconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/home.png&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;selectedIconPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;/images/home-active.png&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注：tabBar的页面要放在page的前几个</strong></p><p>每个页面都有自己的json文件</p><p>与全局配置冲突时 就近原则</p><h3 id="四-网络数据请求"><a href="#四-网络数据请求" class="headerlink" title="四. 网络数据请求"></a>四. 网络数据请求</h3><h4 id="1-限制"><a href="#1-限制" class="headerlink" title="1. 限制"></a>1. 限制</h4><ul><li>只能请求HTTPS类型的接口</li><li>必须将接口的域名添加到信任列表</li></ul><h4 id="2-配置request域名"><a href="#2-配置request域名" class="headerlink" title="2. 配置request域名"></a>2. 配置request域名</h4><p>步骤：</p><ul><li>登陆微信小程序管理后台</li><li>开发</li><li>开发设置</li><li>服务器域名</li><li>修改request合法域名</li></ul><h4 id="3-发起get请求"><a href="#3-发起get请求" class="headerlink" title="3. 发起get请求"></a>3. 发起get请求</h4><p>wx.request()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在page下面与data平级</span><br>*****()&#123;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>            <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>        &#125;,<br>        <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123; <span class="hljs-comment">//请求成功的回调函数</span><br>****<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-发起post请求"><a href="#4-发起post请求" class="headerlink" title="4. 发起post请求"></a>4. 发起post请求</h4><p>wx.request()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//在page下面与data平级</span><br>*****()&#123;<br>    wx.<span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;&#x27;</span>,<br>        <span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>        <span class="hljs-attr">data</span>:&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;zs&#x27;</span>,<br>            <span class="hljs-attr">age</span>:<span class="hljs-number">20</span><br>        &#125;,<br>        <span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123; <span class="hljs-comment">//请求成功的回调函数</span><br>****<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-在页面刚加载时请求数据"><a href="#5-在页面刚加载时请求数据" class="headerlink" title="5. 在页面刚加载时请求数据"></a>5. 在页面刚加载时请求数据</h4><p>在onLoad事件中调用</p><h4 id="6-跳过request合法检验"><a href="#6-跳过request合法检验" class="headerlink" title="6. 跳过request合法检验"></a>6. 跳过request合法检验</h4><p>开发工具 —-&gt; 详情 —-&gt; 本地设置 —-&gt; 不检验合法域名</p>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>微信小程序开发day01</title>
    <link href="/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/"/>
    <url>/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了微信小程序开发的基本流程</p><span id="more"></span><h3 id="一-小程序入门"><a href="#一-小程序入门" class="headerlink" title="一. 小程序入门"></a>一. 小程序入门</h3><h4 id="1-注册"><a href="#1-注册" class="headerlink" title="1.注册"></a>1.注册</h4><p>AppID : wx5f6a4e2b33dd5cef</p><p><a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a></p><h4 id="2-开发者工具"><a href="#2-开发者工具" class="headerlink" title="2.开发者工具"></a>2.开发者工具</h4><p><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html</a></p><h4 id="3-代码文件构成"><a href="#3-代码文件构成" class="headerlink" title="3.代码文件构成"></a>3.代码文件构成</h4><ul><li><p><strong>app.json</strong> </p><img src="/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/image1.png" class=""></li><li><p><strong>sitemap.json</strong></p><img src="/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/image2.png" class=""></li></ul><h4 id="4-新建一个页面"><a href="#4-新建一个页面" class="headerlink" title="4. 新建一个页面"></a>4. 新建一个页面</h4><p>在app.json中新增页面存放路径</p><img src="/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/image3.png" class=""><p>修改首页页面，直接调整路径的顺序即可</p><h4 id="5-wxml文件"><a href="#5-wxml文件" class="headerlink" title="5. wxml文件"></a>5. wxml文件</h4><p>类似web端html</p><ul><li><p>标签不同</p><p>div—&gt;view</p><p>span—&gt;text</p><p>img—&gt;image</p><p>a—&gt;navigator</p></li><li><p>属性节点</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">navigator</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">navigator</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>类似于Vue的模板语法</p><p>数据绑定 列表渲染 条件渲染</p></li></ul><h4 id="6-通信模型"><a href="#6-通信模型" class="headerlink" title="6.通信模型"></a>6.通信模型</h4><p>通信主体</p><p>渲染层 —————— 逻辑层</p><p>wxml，wxss   js脚本</p><h4 id="7-组件"><a href="#7-组件" class="headerlink" title="7.组件"></a>7.组件</h4><ul><li><p>视图类</p><ul><li><p>view 类似于div 块级元素</p><p>实现flex横向布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container1</span> view&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightgreen;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightblue;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightcoral;<br>&#125;<br><span class="hljs-selector-class">.container1</span>&#123;<br><span class="hljs-attribute">display</span>:flex;<br>    <span class="hljs-attribute">justify-content</span>:space-around;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>scroll-view 可滚动的视图区域</p><img src="/2023/12/27/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91day01/image4.png" class=""><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">scroll-view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container1&quot;</span> <span class="hljs-attr">scroll-y</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--scroll-y 允许纵向滚动  scroll-x 横向滚动--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scroll-view</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container1</span> view&#123;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">text-align</span>:center;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">100px</span>;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightgreen;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightblue;<br>&#125;<br><span class="hljs-selector-class">.container1</span> view<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>)&#123;<br><span class="hljs-attribute">background-color</span>:lightcoral;<br>&#125;<br><span class="hljs-selector-class">.container1</span>&#123;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid red;<br>    <span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">120px</span>;<span class="hljs-comment">/*必须要给容器固定一个高度*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>swiper和swiper-item 轮播图组件和轮播图item组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">swiper</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;swiper-container&quot;</span> <span class="hljs-attr">indicator-dots</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- indicator-dots显示面板指示点 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- autoplay 是否自动切换 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- interval 自动切换时间间隔 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- circular 是否自动衔接 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>第一项<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>第二项<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">swiper-item</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span>第三项<span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">swiper-item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">swiper</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.swiper-containter</span>&#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">150px</span>;<br>&#125;<br><span class="hljs-selector-class">.item</span>&#123;<br><span class="hljs-attribute">height</span>:<span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">line-height</span>:<span class="hljs-number">150px</span>;<br>    <span class="hljs-attribute">text-align</span>:center;<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">1</span>) <span class="hljs-selector-class">.item</span>&#123;<br><span class="hljs-attribute">background-color</span>:lightgreen;<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">2</span>) <span class="hljs-selector-class">.item</span>&#123;<br><span class="hljs-attribute">background-color</span>:lightblue;<br>&#125;<br>swiper-item<span class="hljs-selector-pseudo">:nth-child</span>(<span class="hljs-number">3</span>) <span class="hljs-selector-class">.item</span>&#123;<br><span class="hljs-attribute">background-color</span>:lightcoral;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>基础内容组件</p><ul><li><p>text</p><p>属性：selectable 支持长按选中 </p></li><li><p>rich-text</p><p>把HTML字符串渲染为对应的UI结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">rich-text</span> <span class="hljs-attr">nodes</span>=<span class="hljs-string">&quot;&lt;h1 style=&#x27;color:red;&#x27;&gt;标题&lt;/h1&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">rich-text</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>其他常用组件</p><ul><li><p>button</p><p>可以通过open-type属性调用微信提供的各种功能(客服，转发，获取用户授权，获取用户信息)</p></li><li><p>image</p><p>默认宽300px 高度约为240px</p></li><li><p>navigator</p><p>类似于html中的a标签</p></li></ul></li></ul><h4 id="8-API"><a href="#8-API" class="headerlink" title="8.API"></a>8.API</h4><ul><li><p>事件监听</p><p>wx.onWindowResize(function callback) 监听窗口尺寸变化事件</p></li><li><p>同步api</p><p>以Sync结尾的api</p><p>wx.setStorageSync(‘key’,’value’) 向本地存储中写入内容</p></li><li><p>异步</p><p>wx.request() 发起网络数据请求，通过success回调函数接收数据</p></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
    
    
    <categories>
      
      <category>微信小程序</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>进程同步互斥问题</title>
    <link href="/2023/02/05/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/02/05/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文主要是对经典的进程同步互斥问题的分析，学习之前先了解临界资源，信号量的概念。</p><span id="more"></span><h3 id="一-纯互斥问题"><a href="#一-纯互斥问题" class="headerlink" title="一. 纯互斥问题"></a>一. 纯互斥问题</h3><h4 id="1-读者写者问题"><a href="#1-读者写者问题" class="headerlink" title="1. 读者写者问题"></a>1. 读者写者问题</h4><h5 id="1-1-读者优先"><a href="#1-1-读者优先" class="headerlink" title="1.1 读者优先"></a>1.1 读者优先</h5><p>所谓读者优先是指读者可以同时读，除非目前有写者在写</p><p>分析：</p><ul><li>读者可以<strong>搭便车</strong>，意味着首个占用资源的读者和最后一个使用完资源的读者很重要</li><li>对读者数量的计数是<strong>互斥</strong>，设readCount计数，mutex实现对其的互斥访问</li><li>再设一个信号量write，实现对文件资源的互斥</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">读者：<br>    begin<br>    <span class="hljs-title function_">P</span><span class="hljs-params">(mutex)</span>;<br>readCount := readCount + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> readCount == <span class="hljs-number">1</span><br>then P(write);<span class="hljs-comment">//第一个读者处理后，其余读者可以搭便车</span><br>V(mutex);<br>读文件;<br>P(mutex);<br>readCount := readCount - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> readCount == <span class="hljs-number">0</span><br>            then V(write);<br>V(mutex);<br>end<br>写者：<br>    begin<br>    <span class="hljs-title function_">P</span><span class="hljs-params">(write)</span>;<br>写文件;<br>V(write);<br>end<br></code></pre></td></tr></table></figure><h5 id="1-2-写者优先"><a href="#1-2-写者优先" class="headerlink" title="1.2 写者优先"></a>1.2 写者优先</h5><p>写者优先是指一旦有个写者到来，他应该尽快对文件进行写操作，也就是一个写者在等待则新来的读者不允许进行读操作了</p><p>分析：</p><ul><li>写者到达，读者后续不可搭便车。设置w信号量，实现读写平权</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c">读者：<br>    begin<br>    <span class="hljs-title function_">P</span><span class="hljs-params">(w)</span>;<span class="hljs-comment">//与读者优先的区别，读者来时判断有无写者在等待</span><br>    P(mutex);<br>readCount := readCount + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> readCount == <span class="hljs-number">1</span><br>then P(write);<br>V(mutex);<br>V(w);<br>读文件;<br>P(mutex);<br>readCount := readCount - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> readCount == <span class="hljs-number">0</span><br>            then V(write);<br>V(mutex);<br>end<br>写者：<br>    begin<br>        <span class="hljs-title function_">P</span><span class="hljs-params">(w)</span>;<br>    P(write);<br>写文件;<br>V(write);<br>V(w);<br>end<br></code></pre></td></tr></table></figure><h4 id="2-船闸问题"><a href="#2-船闸问题" class="headerlink" title="2. 船闸问题"></a>2. 船闸问题</h4><p>巴拿马运河，建在太平洋和大西洋之间，由于太平洋和大西洋水面高度不同，有巨大落差，所以运河中修建有t级船闸，并且只允许单向通行，船闸依次编号为，1,2,3,,,T。由大西洋来的船，需经由船闸T,T-1,2,,,1，通过运河到太平洋，由太平洋来的船，需经由船闸1,2,3,,,T通过运河到大西洋。试用pv操作，正确解决大西洋和太平洋的船只通航问题</p><p>分析：</p><ul><li>制约关系是在经过相同的某一号船闸时，PtoA应该互斥AtoP，纯互斥问题</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> S[T+<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>;<span class="hljs-comment">//为每一个船闸设置一个信号量</span><br><span class="hljs-type">int</span> countAtoP[T+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> countPtoA[T+<span class="hljs-number">1</span>]=<span class="hljs-number">0</span>;<br>AtoP:<br>    begin<br>        <span class="hljs-title function_">for</span><span class="hljs-params">(j=<span class="hljs-number">1</span>;j&lt;=T;j++)</span>&#123;<br>            P(mutex);<br>            <span class="hljs-keyword">if</span>(countAtoP[j]==<span class="hljs-number">0</span>)<span class="hljs-comment">//A到P没船</span><br>                P(S[j]);升闸门;<br>            countAtoP[j]++;<br>            V(mutex);<br>            过船;<br>            P(mutex);<br>            countAtoP[j]--;<br>            <span class="hljs-keyword">if</span>(countAtoP[j]==<span class="hljs-number">0</span>)<span class="hljs-comment">//A到P没船</span><br>                降闸门;V(S[j]);<br>            V(mutex);<br>        &#125;<br>end<br>PtoA:<br>begin<br>        <span class="hljs-title function_">for</span><span class="hljs-params">(j=<span class="hljs-number">1</span>;j&lt;=T;j++)</span>&#123;<br>            P(mutex);<br>            <span class="hljs-keyword">if</span>(countPtoA[j]==<span class="hljs-number">0</span>)<br>                P(S[j]);升闸门;<br>            countPtoA[j]++;<br>            V(mutex);<br>            过船;<br>            P(mutex);<br>            countPtoA[j]--;<br>            <span class="hljs-keyword">if</span>(countPtoA[j]==<span class="hljs-number">0</span>)<br>                降闸门;V(S[j]);<br>            V(mutex);<br>        &#125;<br>end<br></code></pre></td></tr></table></figure><h4 id="3-甲乙地自行车问题"><a href="#3-甲乙地自行车问题" class="headerlink" title="3. 甲乙地自行车问题"></a>3. 甲乙地自行车问题</h4><img src="/2023/02/05/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/1.png" class=""><h3 id="二-进程同步"><a href="#二-进程同步" class="headerlink" title="二. 进程同步"></a>二. 进程同步</h3><h4 id="1-次序同步问题"><a href="#1-次序同步问题" class="headerlink" title="1. 次序同步问题"></a>1. 次序同步问题</h4><p>有几个入就P几次，有几个出就V几次</p><p>变体1：<br>学生两人一组上机问题，到达两人后进，做完后出</p><p>转化为时序图</p><img src="/2023/02/05/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/2.png" class=""><img src="/2023/02/05/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/3.png" class=""><h4 id="2-共享缓冲区同步问题-单缓冲区"><a href="#2-共享缓冲区同步问题-单缓冲区" class="headerlink" title="2. 共享缓冲区同步问题(单缓冲区)"></a>2. 共享缓冲区同步问题(单缓冲区)</h4><h5 id="2-1-简单的生产者消费者问题"><a href="#2-1-简单的生产者消费者问题" class="headerlink" title="2.1 简单的生产者消费者问题"></a>2.1 简单的生产者消费者问题</h5><p>生产者——&gt; 缓冲区 &lt;—– 消费者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">S1=<span class="hljs-number">0</span> S2=<span class="hljs-number">1</span><br>生产者:<br>P(S2);<br>生产一个产品;<br>放入;<br>V(S1);<br>消费者:<br>P(S1);<br>拿产品;<br>V(S2);<br></code></pre></td></tr></table></figure><h5 id="2-2-酒吧音乐粉丝问题"><a href="#2-2-酒吧音乐粉丝问题" class="headerlink" title="2.2 酒吧音乐粉丝问题"></a>2.2 酒吧音乐粉丝问题</h5><p>纯同步问题，boss产生一个资源（三类资源中的一个） vs 三类fans物品的排列组合</p><p>分析：</p><ul><li>听音乐的爱好者不听完，老板不会新一轮借出</li><li>老板不借出2&#x2F;3的物品，对应的拥有1&#x2F;3物品的爱好者不能开始听音乐，关键问题在于，要根据借出的2&#x2F;3物品，将各种物品组合分开</li><li>制约关系，设音乐爱好者私有信号量wait，代表是否听完音乐，初值为0</li><li>制约关系，各个fans受boss制约：设老板的私有信号量S{s1,s2,s3}对应三种物品组合S1:CD+电池vs缺随身听的fans；S2：电池+随身听vs缺cd的fans；S3：CD+随身听vs缺电池的fans，s1,s2,s3初值都为0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">Boss()<br>&#123;<br><span class="hljs-type">int</span> s=genservice();<span class="hljs-comment">//伪函数，生成三种物品组合</span><br><span class="hljs-keyword">if</span>(s==<span class="hljs-number">1</span>) v(S1);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(S==<span class="hljs-number">2</span>) v(S2);<br>    <span class="hljs-keyword">else</span> v(S3);<br>P(wait);<br>&#125;<br>Fans(i)  <span class="hljs-comment">//i=1~3</span><br>&#123;<br>P(Si);<br>听音乐；<br>V(wait);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-3-医生-化验员问题"><a href="#2-3-医生-化验员问题" class="headerlink" title="2.3 医生-化验员问题"></a>2.3 医生-化验员问题</h5><p>分析：</p><ul><li>化验员受医生制约在没有化验单的时候，为医生设置私有信号量Sd&#x3D;0,代表有无化验单</li><li>医生受化验员制约，在没有化验结果的。为化验员设私有信号量Sh&#x3D;0,代表有无化验结果</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">P医生()&#123;             <br>接待病人；      <br>问诊；          <br>开化验单；       <br>V(Sd);          <br>P(Sy);            <br>开处方；<br>&#125;<br>P化验员()&#123;<br>    P(Sd);<br>    化验;<br>    得到化验结果;<br>    V(Sy);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4-司机-售票员问题"><a href="#2-4-司机-售票员问题" class="headerlink" title="2.4 司机-售票员问题"></a>2.4 司机-售票员问题</h5><p>分析：</p><ul><li>只有司机到站停车后，售票员才能开车门；为司机设私有信号量Sd&#x3D;1，代表是否到站停车；</li><li>只有售票员关门后，司机才能启动车辆、行车；为售票员设私有信号量Sc&#x3D;0，代表是否关车门；</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">driver()&#123;<br>P(Sc);<br>    启动;<br>    到站停车;<br>    V(Sd);<br>&#125;<br>conductor&#123;<br>    P(Sd);<br>    开车门;<br>    上下乘客;<br>    关门;<br>    V(Sc);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-5-复杂仓库问题"><a href="#2-5-复杂仓库问题" class="headerlink" title="2.5 复杂仓库问题"></a>2.5 复杂仓库问题</h5><p>三个进程,Pa生产零件A,Pb生产零件B,Pc获取零件A和B,三类进程之间需要同步，同类进程访问货架需要互斥</p><p>分析：</p><ul><li>货架F1全满，Pa要受到Pc制约：为进程Pc设私有信号量Sc1,代表F1是否有空位，初值为10</li><li>货架F2全满，Pb受到Pc制约：为进程Pc设私有信号量Sc2,代表F2是否有空位，初值为10</li><li>货架F1全空，Pc受到Pa制约：为Pa设私有信号量Sa,代表零件A的数目；初值为0</li><li>货架F2全空，Pc受到Pb制约：设私有信号量Sb,代表零件B个数。初值为0</li><li>互斥因素：任1进程访问货架F1或F2,需互斥:设互斥信号量mutex1&#x3D;1,货架F2,mutex2&#x3D;1</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">Pa()                Pb()                     Pc()<br>&#123;  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;          &#123; <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;              &#123; <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>P(Sc1);            P(Sc2);                   P(Sa);<br>P(mutex1);         P(mutex2);                P(mutex1); <br>A--&gt;F1;            B--&gt;F2;                   F1--&gt;A;<br>V(mutex1);         V(mutex2);                V(mutex1);<br>V(Sa);             V(Sb);                    V(Sc1);<br>&#125;&#125;                    &#125;&#125;                         P(sb);<br>                                                 P(mutex2);<br>                                                 F2--&gt;B;<br>                                                 V(mutex2);<br>                                                 V(Sc2);<br>                                                 开始装配A+B;<br>                                                &#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="2-6-两同步共享一互斥"><a href="#2-6-两同步共享一互斥" class="headerlink" title="2.6 两同步共享一互斥"></a>2.6 两同步共享一互斥</h5><p>桌子上有一个盘子，每次只放&#x2F;取一个水果，爸爸专门放苹果，妈妈专门放桔子，女儿专吃苹果，儿子专吃桔子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">father()&#123;<br>  P(empty);<br>  放苹果<br>V(apple);<br>&#125;<br>daughter()&#123;<br>  P(apple);<br>  拿苹果<br>V(empty);<br>&#125;<br>mother()&#123;<br>  P(empty);<br>  放桔子<br>V(orange);<br>&#125;<br>son()&#123;<br>  P(orange);<br>  拿桔子<br>V(empty);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-双缓冲区问题"><a href="#3-双缓冲区问题" class="headerlink" title="3. 双缓冲区问题"></a>3. 双缓冲区问题</h4><p>誊抄问题，打印机问题</p><p>A–&gt;B–&gt;C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">Get()               copy()                 Put()<br>&#123;                   &#123;                      &#123;<br>产生一条data;        P(S1);                 P(S3); <br>P(S2);                 buf1-&gt;data;             buf2-&gt;data;<br>Data-buf1;             V(S2);                  V(S4);<br>V(S1);                 P(S4);               &#125;<br>&#125;                      data-&gt;buf2;<br>                       V(s3);&#125;<br></code></pre></td></tr></table></figure><h4 id="4-多缓冲vs多进程的同步"><a href="#4-多缓冲vs多进程的同步" class="headerlink" title="4. 多缓冲vs多进程的同步"></a>4. 多缓冲vs多进程的同步</h4><p>多缓冲 生产者-消费者</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">Pi(i)                 Qj(j)  <span class="hljs-comment">//j=1~n</span><br>&#123;<span class="hljs-comment">//当buf全满时,k=0        &#123;//buf全空，引发死锁</span><br>产生一条data;               P(full);<br>P(empty);                  p(mutex);<br>P(mutex);                  buf-&gt;data;<br>Data-&gt;buf;                 v(empty);<br>V(full);                   v(mutex);<br>V(mutex);                &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：信号量的p操作的顺序，一定是先私后公。如果先公后私，在buf全满或全空的情况下，会引发死锁。</p><h4 id="5-拓展"><a href="#5-拓展" class="headerlink" title="5. 拓展"></a>5. 拓展</h4><h5 id="5-1-理发师问题"><a href="#5-1-理发师问题" class="headerlink" title="5.1 理发师问题"></a>5.1 理发师问题</h5><p>N把椅子+1个barber</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">baber()customer()<br>&#123;&#123; p(mutex);<span class="hljs-comment">//进来首先看有无空位，访问count</span><br>p(customer);看看有无顾客，否则睡觉。  <span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">0</span>)<br>P(mutex);若有，准备理发         &#123;count--; <span class="hljs-comment">//临界区</span><br>count++;座位加一   v(mutex);<br>V(mutex);  v(customer);<span class="hljs-comment">//告诉理发师有顾客来到</span><br>开始理发；   p(barber);<span class="hljs-comment">//看理发师有无空闲</span><br>理发完成；                              理发；&#125;<br>V(barber);                       <span class="hljs-keyword">else</span>&#123;v(mutex);<span class="hljs-built_in">exit</span>;&#125;<br>&#125;&#125;<br></code></pre></td></tr></table></figure><h5 id="5-2-银行柜员问题"><a href="#5-2-银行柜员问题" class="headerlink" title="5.2 银行柜员问题"></a>5.2 银行柜员问题</h5><p>n个柜员，有空闲就叫一个号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c">Teller()<br>&#123;P(Sc);<br>P(mutex);<br>叫号;<br>V(mutex);<br>为顾客服务;<br>服务完成；<br>V(St);&#125;<br>customer()<br>&#123;<br>P(mutex);<br>取号;<br>V(mutex);<br>V(Sc);<br>P(St);<br>接受服务;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>设计模式</title>
    <link href="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <url>/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>本文是对软考中设计模式的整理</p><span id="more"></span><h3 id="一-设计模式介绍"><a href="#一-设计模式介绍" class="headerlink" title="一. 设计模式介绍"></a>一. 设计模式介绍</h3><h4 id="1-目的"><a href="#1-目的" class="headerlink" title="1. 目的"></a>1. 目的</h4><p>复用成功的设计和体系结构</p><h4 id="2-基本要素"><a href="#2-基本要素" class="headerlink" title="2. 基本要素"></a>2. 基本要素</h4><p>模式名称 问题 解决方案 效果</p><h4 id="3-分类"><a href="#3-分类" class="headerlink" title="3. 分类"></a>3. 分类</h4><ul><li>创建型：与对象创建有关</li><li>结构性：处理类与对象的组合</li><li>行为型：对类或对象怎样交互和分配职责进行描述</li></ul><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image1.png" class=""><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image2.png" class=""><h3 id="二-创建型模式"><a href="#二-创建型模式" class="headerlink" title="二. 创建型模式"></a>二. 创建型模式</h3><h4 id="1-简单工厂模式"><a href="#1-简单工厂模式" class="headerlink" title="1. 简单工厂模式"></a>1. 简单工厂模式</h4><p>用于创建实例的方法为静态方法</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image3.png" class=""><p>三类角色：</p><ul><li>工厂：负责实现创建所有产品的内部逻辑，可直接外部调用(采用static方法)</li><li>抽象产品：产品的父类</li><li>具体产品：实现抽象产品中声明的抽象方法</li></ul><p>但是存在一个缺陷，如果后期想多加一种产品，需要改动工厂的方法，破坏了开闭原则(拓展开放，修改封闭)</p><h4 id="2-工厂方法模式"><a href="#2-工厂方法模式" class="headerlink" title="2. 工厂方法模式"></a>2. 工厂方法模式</h4><p>意图：定义一个用于创建对象的接口，让子类决定实例化哪一个类，使一个类的实例化延迟到子类</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image4.png" class=""><p>适用于：</p><ul><li>当一个子类不知道它所必须创建的对象的类</li><li>当一个类希望由它子类指定它所创建的对象</li></ul><h4 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="3. 抽象工厂模式"></a>3. 抽象工厂模式</h4><p>意图：创建<strong>一系列</strong>相关或相互依赖对象的接口而无需指出他们的类</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image5.png" class=""><ul><li>AbstractFactory声明一个创建抽象产品对象的操作接口</li><li>ConcreteFactory实现创建具体产品对象的操作</li><li>AbstractProduct为一类产品对象声明一个接口</li><li>ConcreteProduct定义一个将被相应的具体工厂创建的产品对象，实现抽象产品接口</li><li>Client仅使用抽象工厂和抽象产品类声明的接口</li></ul><p>适用于：</p><ul><li>一个系统要独立于它的产品创建，<strong>组合</strong>和表示时</li><li>一个系统要有多个产品<strong>系列</strong>中的一个来配置时</li><li>当要强调<strong>一系列</strong>相关的产品对象的设计以便进行联合使用时</li><li>当提供一个产品类库，只要显示它们的接口而不是实现时</li></ul><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image6.png" class=""><p>抽象工厂声明一个创建组件的操作接口，具体工厂实现创建产品对象的操作</p><p>可以想成是qq中的各种主题，每个主题就是多个产品系列中的一种</p><h4 id="4-生成器模式"><a href="#4-生成器模式" class="headerlink" title="4. 生成器模式"></a>4. 生成器模式</h4><p>意图：将<strong>一个复杂的对象的构建与它的表示分离</strong>，使的同样的构建过程可以创建不同的表示</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image7.png" class=""><ul><li>Builder为创建一个Product对象的各个部件指定抽象接口</li><li>ConcreteBuilder实现Builder的接口以构造和装配该产品的各个部件，定义并明确它创建的表示，提供一个检索产品的接口</li><li>Director构造一个使用Builder接口的对象</li><li>Product表示被构造的复杂对象(可使用List实现)，ConcreteBuilder创建该产品的内部表示并定义它的装配过程</li></ul><p><strong>理解为买东西时可选的套餐</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">builder</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Concretebuild1</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Concretebuild1</span>();<br>        c1.builderpart();<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> c1.getResult();<br>        p1.show();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">build</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderpart</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Product <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Concretebuild1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">build</span>&#123;<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">builderpart</span><span class="hljs-params">()</span> &#123;<br>        product.Add(<span class="hljs-string">&quot;A&quot;</span>);<br>        product.Add(<span class="hljs-string">&quot;B&quot;</span>);<br>        product.Add(<span class="hljs-string">&quot;C&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getResult</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span>&#123;<br>    List&lt;String&gt; parts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(String part)</span>&#123;<br>        parts.add(part);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(parts);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>当创建复杂对象的算法应该独立于该对象的组成部分以及他们的装配方式时</li><li>当构造过程必须允许被构造的对象有不同的表示时</li></ul><h4 id="5-原型模式"><a href="#5-原型模式" class="headerlink" title="5. 原型模式"></a>5. 原型模式</h4><p>意图：用原型实例指定创建对象的种类，并且通过复制这些原型创建新的对象</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image8.png" class=""><ul><li>Prototype声明一个复制自身的接口</li><li>ConcretePrototype实现一个复制自身的操作</li><li>Client让一个原型复制自身从而创建一个新的对象</li></ul><p><strong>类似在产品类中写一个深拷贝函数</strong></p><p>代码实现中可以直接将产品类实现Cloneable接口(java提供的一个复制实例的接口)</p><p>适用于：</p><ul><li>当一个系统应该独立于它的产品创建，<strong>构成</strong>和表示时</li><li>当要实例化的类是在运行时指定时，例如通过动态装载</li><li>为了避免创建一个与产品类层次平行的工厂类层次时</li><li>当一个类的实例只能有几个不同状态组合的一种时，建立相应数目的原型并克隆它们，可能比每次用合适的状态手工实例化该类更方便一些</li></ul><h4 id="6-单例模式"><a href="#6-单例模式" class="headerlink" title="6. 单例模式"></a>6. 单例模式</h4><p>意图：保证一个类只有一个实例，并提供一个访问它的全局访问点</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image9.png" class=""><p>适用于：</p><ul><li>当类<strong>只有一个实例</strong>而且客户可以从一个众所周知的访问点访问它时</li><li>当这个<strong>唯一实例</strong>应该是通过子类化可拓展的，并且客户无须更改代码就能使用一个拓展的实例时</li></ul><p>这个模式需要附加代码看看，加深理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">single</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//这里的s1和s2指向的都是那个唯一的实例</span><br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Singleton.getInstance();<br>        <span class="hljs-type">Singleton</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> Singleton.getInstance();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>    <span class="hljs-comment">//构造函数私有 外界则无法使用构造函数来new一个新的实例借此来实现唯一实例</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-comment">//提供一个全局访问点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三-结构型模式"><a href="#三-结构型模式" class="headerlink" title="三. 结构型模式"></a>三. 结构型模式</h3><h4 id="1-适配器模式-对象"><a href="#1-适配器模式-对象" class="headerlink" title="1. 适配器模式(对象)"></a>1. 适配器模式(对象)</h4><p>适配器模式(类)不讨论</p><p>意图：将一个类的接口转化成客户希望的另外一个接口，Adapter模式使得原来由于接口不兼容而不能一起工作的那些类可以一起工作</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image10.png" class=""><p>代码部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">adapterpattern</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">USB</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">adapter</span>();<br>        usb.Request();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Request</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;USB&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">USB</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TypeC</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeC</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Request</span><span class="hljs-params">()</span>&#123;<br>        t.SpecificRequest();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeC</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SpecificRequest</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;typeC&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>想使用一个已存在的类，而它的接口不符合要求</li><li>想创建一个可以与其他不相关的类或不可预见的类(即那些接口可能不一定兼容的类)协同工作</li><li>(仅使用对象Adapter)想使用一个已存在的子类，但是不可能对每一个都进行子类化以匹配他们的接口，对象适配器可以适配它们的父类接口</li></ul><h4 id="2-桥接模式"><a href="#2-桥接模式" class="headerlink" title="2. 桥接模式"></a>2. 桥接模式</h4><p>意图：将抽象部分与其实现部分相分离，是他们可以<strong>独立的变化</strong></p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image11.png" class=""><p>这里可以理解为一个产品类接口，它的子类有一些抽象属性，将这些属性单拿出来形成一个接口</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image12.png" class=""><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">bridge</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">productA</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">productA</span>();<br>        <span class="hljs-type">Color</span> <span class="hljs-variable">red</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Red</span>();<br>        p1.setColor(red);<br>        p1.Operation();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">product</span>&#123;<br>    <span class="hljs-keyword">protected</span> Color color;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(Color color)</span>&#123;<br>        <span class="hljs-built_in">this</span>.color = color;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">productA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">product</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span> &#123;<br>        color.OperationImp();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Color</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OperationImp</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Red</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Color</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OperationImp</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//具体上色操作</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>不希望在抽象和它的实现部分之间有一个固定的绑定关系，就像上面代码中产品的颜色属性单出来了</li><li>类的抽象以及它的实现都应该可以通过生成子类的方法加以扩充，这是桥接模式使得开发者可以对不同的抽象接口和实现部分进行组合，并对它们进行扩充</li><li>对一个抽象的实现部分的修改应对客户不产生影响，即客户不需要重新编译</li><li>想在多个对象间共享实现，有许多类要生成的类层次结构</li></ul><h4 id="3-组合模式"><a href="#3-组合模式" class="headerlink" title="3. 组合模式"></a>3. 组合模式</h4><p>意图：将对象组合成<strong>树形结构</strong>以表示“<strong>部分-整体</strong>”的层次结构，Composite使得用户对单个对象和组合对象的使用具有一致性</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image13.png" class=""><ul><li>Component为组合中的对象声明接口，在适当情况下实现所有类共有的接口的默认行为，声明一个接口用于访问和管理Component的子组件，在递归结构中定义一个接口，用于访问一个父组件，并在合适的情况下实现它</li><li>Leaf在组合中表示叶节点对象，在组合中定义图元对象的行为</li><li>Composite定义有<strong>子组件的那些组件的行为</strong>，存储子组件，在Component接口中实现与子组件相关的操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">composite</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//遍历操作</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(AbstractFile file)</span>&#123;<br>        file.printName();<br>        List&lt;AbstractFile&gt; childList = file.getChild();<br>        <span class="hljs-keyword">if</span> (childList==<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;<span class="hljs-comment">//避免是文件时list为空报错</span><br>        <span class="hljs-keyword">for</span> (AbstractFile child : childList)&#123;<br>            print(child);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractFile</span>&#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printName</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(AbstractFile f)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Remove</span><span class="hljs-params">(AbstractFile f)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> List&lt;AbstractFile&gt; <span class="hljs-title function_">getChild</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">file</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFile</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(AbstractFile f)</span> &#123;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Remove</span><span class="hljs-params">(AbstractFile f)</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">file</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;AbstractFile&gt; <span class="hljs-title function_">getChild</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">folder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFile</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;AbstractFile&gt; childList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;AbstractFile&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(AbstractFile f)</span> &#123;<br>        childList.add(f);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Remove</span><span class="hljs-params">(AbstractFile f)</span> &#123;<br>        childList.remove(f);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">folder</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;AbstractFile&gt; <span class="hljs-title function_">getChild</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>想表示对象的<strong>部分-整体</strong>层次结构</li><li>希望用户忽略组合对象(文件夹)与单个对象(文件)的不同，用户将统一地使用<strong>组合结构</strong>中地所有对象</li></ul><h4 id="4-装饰器模式"><a href="#4-装饰器模式" class="headerlink" title="4. 装饰器模式"></a>4. 装饰器模式</h4><p>意图：动态地给一个对象添加一些额外的职责，就增加功能而言，Decorator模式比生成子类更加灵活</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image14.png" class=""><ul><li>Component定义一个对象接口，可以给这些对象动态地添加职责</li><li>ConcreteComponent定义一个对象，可以给这个对象添加一些职责</li><li>Decorator维持一个指向Component对象的指针，并定义一个与Component接口一致的接口</li><li>ConcreteDecorator向组件添加职责</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">decorate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        zhangsan.Operation();<span class="hljs-comment">//学习</span><br>        zhangsan = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecoratorA</span>(zhangsan);<br>        zhangsan.Operation();<span class="hljs-comment">//学习 考试</span><br>        <span class="hljs-comment">//对象链</span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">lisi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DecoratorB</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">DecoratorA</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>)));<br>        lisi.Operation();<span class="hljs-comment">//学习 考试 睡觉</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">//Component</span><br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span>;<span class="hljs-comment">//职责</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//自己的职责</span><br>        System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Decorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">protected</span> Person person;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DecoratorA</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-built_in">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span> &#123;<br>        person.Operation();<br>        <span class="hljs-comment">//添加附加职责</span><br>        System.out.println(<span class="hljs-string">&quot;考试&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DecoratorB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Decorator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DecoratorB</span><span class="hljs-params">(Person person)</span>&#123;<br>        <span class="hljs-built_in">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operation</span><span class="hljs-params">()</span> &#123;<br>        person.Operation();<br>        <span class="hljs-comment">//添加附加职责</span><br>        System.out.println(<span class="hljs-string">&quot;睡觉&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>在不影响其他对象的情况下，以动态透明的方式给单个对象添加职责</li><li>处理那些可以撤销的职责</li><li>当不能采用生成子类的方式进行扩充时</li></ul><h4 id="5-外观模式"><a href="#5-外观模式" class="headerlink" title="5. 外观模式"></a>5. 外观模式</h4><p>意图：为子系统中的一组接口提供一个一致的界面，facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image15.png" class=""><ul><li>Facade知道哪些子系统类负责处理请求；将客户的请求代理给适当的子系统对象</li><li>Subsystem classes实现子系统的功能；处理由facade对象指派的任务；没有Facade的任何相关信息，即没有指向Facade的指针</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">facade</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Facade</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Facade</span>();<br>        f.method1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Facade</span>&#123;<br>    Subsystem1 s1;<br>    Subsystem2 s2;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Facade</span><span class="hljs-params">()</span>&#123;<br>        s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subsystem1</span>();<br>        s2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subsystem2</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span>&#123;<br>        s1.method();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span>&#123;<br>        s2.method();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subsystem1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;1&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subsystem2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>要为一个复杂子系统提供一个简单接口时</li><li>客户程序与抽象类的实现部分之间存在很大的依赖性</li><li>当需要构建一个层次结构的子系统时，使用Facade模式定义子系统中每层的入口点</li></ul><h4 id="6-代理模式"><a href="#6-代理模式" class="headerlink" title="6. 代理模式"></a>6. 代理模式</h4><p>意图：为其他对象提供一种代理以<strong>控制对这个对象的访问</strong></p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image16.png" class=""><ul><li>Proxy保存一个引用使得代理可以访问实体</li><li>Subject定义RealSubject和Proxy的共用接口，这样就在任何使用RealSubject的地方都可以使用Proxy</li><li>RealSubject定义Proxy所代表的实体</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">proxy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RealSubject</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RealSubject</span>();<br>        <span class="hljs-type">proxylei</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">proxylei</span>(r1);<br>        p1.buy();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">proxylei</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-keyword">protected</span> RealSubject realSubject;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">proxylei</span><span class="hljs-params">(RealSubject realSubject)</span>&#123;<br>        <span class="hljs-built_in">this</span>.realSubject = realSubject;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;办理手续&quot;</span>);<br>        realSubject.buy();<br>        System.out.println(<span class="hljs-string">&quot;完成手续&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RealSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buy</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;付钱&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><p>适用于在需要比较通用和复杂的对象指针代替简单的指针的时候</p><ul><li>远程代理为一个对象在不同地址空间提供局部代表</li><li>虚代理根据需要创建开销很大的对象</li><li>保护代理控制对原始对象的访问，用于对象应该有不同的访问权限的时候</li><li>智能引用取代了简单指针，它在访问对象时执行一些附加操作</li></ul><h4 id="7-享元模式-Flyweight"><a href="#7-享元模式-Flyweight" class="headerlink" title="7. 享元模式(Flyweight)"></a>7. 享元模式(Flyweight)</h4><p>意图：运用共享技术有效地支持大量细粒度的对象</p><p><a href="https://baike.baidu.com/item/%E7%BB%86%E7%B2%92%E5%BA%A6/2061662">细粒度</a>：将业务模型中的对象加以细分</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image17.png" class=""><ul><li>Flyweight描述一个接口，通过这个接口Flyweight可以接受并作用于外部状态</li><li>ConcreteFlyweight实现Flyweight接口并为内部状态增加存储空间，ConcreteFlyweight对象必须是可共享的，它所存储的状态必须是内部的，即他必须独立于ConcreteFlyweight对象的场景</li><li>并非所有的Flyweight子类都需要共享，Flyweight接口使共享成为可能，但它并不强制共享，UnsharedConcreteFlyweight对象通常将ConcreteFlyweight对象作为子节点</li><li>FlyweightFactory创建并管理Flyweight对象，确保合理地共享Flyweight，当用户请求一个Flyweight时，会提供一个以创建的实例或者不存在时创建一个实例</li><li>Client维持一个对flyweight的引用，计算或存储一个或多个Flyweight的外部状态</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">flyweight</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PlaceFactory</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PlaceFactory</span>();<br>        <span class="hljs-type">Place</span> <span class="hljs-variable">w1</span> <span class="hljs-operator">=</span> p.getPlace(<span class="hljs-number">0</span>);<br>        w1.draw(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-type">Place</span> <span class="hljs-variable">w2</span> <span class="hljs-operator">=</span> p.getPlace(<span class="hljs-number">0</span>);<br>        w2.draw(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-comment">//这里w1和w2是一个白棋实例</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PlaceFactory</span>&#123;<br>    <span class="hljs-keyword">private</span> Place[] places = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">white</span>(),<span class="hljs-keyword">new</span> <span class="hljs-title class_">black</span>()&#125;;<br>    <span class="hljs-keyword">public</span> Place <span class="hljs-title function_">getPlace</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span>&#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> places[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> places[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Place</span>&#123;<br>    <span class="hljs-keyword">protected</span> String color;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">white</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Place</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">white</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&quot;white&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        System.out.println(color + <span class="hljs-string">&quot;x:&quot;</span>+x+<span class="hljs-string">&quot;y&quot;</span>+y);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">black</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Place</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">black</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.color = <span class="hljs-string">&quot;black&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        System.out.println(color + <span class="hljs-string">&quot;x:&quot;</span>+x+<span class="hljs-string">&quot;y&quot;</span>+y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>一个应用程序使用了大量的对象</li><li>完全由于使用大量的对象造成很大的存储开销</li><li>对象的大多数状态都可变为外部状态</li><li>如果删除对象的外部状态，那么可以用相对较少的共享对象取代很多组对象</li></ul><h3 id="四-行为型模式"><a href="#四-行为型模式" class="headerlink" title="四. 行为型模式"></a>四. 行为型模式</h3><h4 id="1-责任链模式"><a href="#1-责任链模式" class="headerlink" title="1. 责任链模式"></a>1. 责任链模式</h4><p>意图：使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image18.png" class=""><ul><li>Handler定义一个处理请求的接口</li><li>ConcreteHandler处理它所负责的请求，可访问它的后继者，如果可以处理该请求，就处理它，否则发送给它的后继者</li><li>Client向链上的具体处理者对象提交请求</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chain</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">fudaoyuan</span>();<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">yuanzhang</span>();<br>        <span class="hljs-type">Handler</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">xiaozhang</span>();<br>        f.setNext(y);<br>        y.setNext(x);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Handler</span>&#123;<br>    <span class="hljs-keyword">protected</span> Handler next;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNext</span><span class="hljs-params">(Handler next)</span>&#123;<br>        <span class="hljs-built_in">this</span>.next = next;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HandlerRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">fudaoyuan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span>&#123; <span class="hljs-comment">// &lt;= 7</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HandlerRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request&lt;=<span class="hljs-number">7</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;通过&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (next!=<span class="hljs-literal">null</span>)<br>                next.HandlerRequest(request);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;办理失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">yuanzhang</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span>&#123; <span class="hljs-comment">// &lt;= 15</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HandlerRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request&lt;=<span class="hljs-number">15</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;通过&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (next!=<span class="hljs-literal">null</span>)<br>                next.HandlerRequest(request);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;办理失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">xiaozhang</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Handler</span>&#123; <span class="hljs-comment">// &lt;= 30</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HandlerRequest</span><span class="hljs-params">(<span class="hljs-type">int</span> request)</span> &#123;<br>        <span class="hljs-keyword">if</span> (request&lt;=<span class="hljs-number">30</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;通过&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (next!=<span class="hljs-literal">null</span>)<br>                next.HandlerRequest(request);<br>            <span class="hljs-keyword">else</span><br>                System.out.println(<span class="hljs-string">&quot;办理失败&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>有多个对象处理一个请求，哪个对象处理该请求运行时自动确定</li><li>想在不明确指定接收者的情况下向多个对象中的一个提交一个请求</li><li>可处理一个请求的对象集合应该被动态指定</li></ul><h4 id="2-命令模式"><a href="#2-命令模式" class="headerlink" title="2. 命令模式"></a>2. 命令模式</h4><p>意图：将一个请求封装为一个对象，从而使得可以用不同的请求对客户进行<strong>参数化</strong>，对请求排队或记录日志，以及支持可撤销的操作</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image19.png" class=""><ul><li>Command声明执行操作的接口</li><li>ConcreteCommand将一个接收者对象绑定于一个动作，调用接收者相应的操作，以实现Execute</li><li>Client创建一个具体命令对象并设定它的接收者</li><li>Invoker要求该命令执行这个请求</li><li>Receiver知道如何实施与执行一个请求相关的操作，任何类都可能作为一个接收者</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Command</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Invoker</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>();<br>        <span class="hljs-type">TV</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TV</span>();<br>        <span class="hljs-type">com</span> <span class="hljs-variable">kai</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OnCommand</span>(tv);<br>        i.setComm(kai);<br>        i.call();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Invoker</span>&#123;<span class="hljs-comment">//遥控器</span><br>    <span class="hljs-keyword">private</span> com comm;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setComm</span><span class="hljs-params">(com comm)</span>&#123;<br>        <span class="hljs-built_in">this</span>.comm = comm;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        comm.Execute();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">com</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">Execute</span><span class="hljs-params">()</span>;<span class="hljs-comment">//执行命令</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OnCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">com</span>&#123;<br>    <span class="hljs-keyword">private</span> TV tv;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OnCommand</span><span class="hljs-params">(TV tv)</span> &#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Execute</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//命令调用接收者行为</span><br>        tv.kaiji();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">OffCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">com</span>&#123;<br>    <span class="hljs-keyword">private</span> TV tv;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OffCommand</span><span class="hljs-params">(TV tv)</span>&#123;<br>        <span class="hljs-built_in">this</span>.tv = tv;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Execute</span><span class="hljs-params">()</span> &#123;<br>        tv.guanji();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TV</span>&#123;<span class="hljs-comment">//接收者 电视机</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">kaiji</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开机&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">guanji</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;关机&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>抽象出待执行的动作以参数化某对象</li><li><strong>在不同的时刻指定，排列和执行请求</strong></li><li>支持取消操作</li><li>支持修改日志</li></ul><h4 id="3-解释器模式-Interpreter"><a href="#3-解释器模式-Interpreter" class="headerlink" title="3. 解释器模式(Interpreter)"></a>3. 解释器模式(Interpreter)</h4><p>意图：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image20.png" class=""><ul><li>AbstractExpression声明一个程序的解释操作，这个接口为抽象语法树中所有的结点所共享</li><li>TerminalExpression实现与文法中的终结符相关联的解释操作，一个句子的每个终结符需要该类的一个实例</li><li>NonterminalExpression对文法中的每一条规则都需要一个NonterminalExpression类，为每个符号都维护一个AbstractExpression类型的实例变量，为文法中的非终结符实现解释操作</li><li>Context包含解释器之外的一些全局信息</li><li>Client构建表示该文法定义的语言中一个特定的句子的抽象语法树，该抽象语法树由NonterminalExpression和TerminalExpression的实例装配而成，调用解释操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Interpreter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">context</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">context</span>();<br>        <span class="hljs-keyword">if</span> (c.check(<span class="hljs-string">&quot;A区的开发&quot;</span>))&#123;<br>            System.out.println(<span class="hljs-string">&quot;success&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">context</span>&#123;<br>    <span class="hljs-keyword">private</span> String[] regions = &#123;<span class="hljs-string">&quot;A区&quot;</span>,<span class="hljs-string">&quot;B区&quot;</span>,<span class="hljs-string">&quot;C区&quot;</span>&#125;;<br>    <span class="hljs-keyword">private</span> String[] personss = &#123;<span class="hljs-string">&quot;开发&quot;</span>,<span class="hljs-string">&quot;测试&quot;</span>,<span class="hljs-string">&quot;调试&quot;</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TerminalExpression</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(regions);<br>    <span class="hljs-keyword">private</span>  <span class="hljs-type">TerminalExpression</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TerminalExpression</span>(personss);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">NonterminalExpression</span> <span class="hljs-variable">nt</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonterminalExpression</span>(t1,t2);<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String info)</span>&#123;<br>        <span class="hljs-keyword">return</span> nt.Interpret(info);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Expression</span>&#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">Interpret</span><span class="hljs-params">(String info)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TerminalExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span>&#123;<br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TerminalExpression</span><span class="hljs-params">(String[] data)</span>&#123;<br>        <span class="hljs-keyword">for</span>(String str : data)&#123;<br>            set.add(str);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">Interpret</span><span class="hljs-params">(String info)</span> &#123;<br>        <span class="hljs-keyword">return</span> set.contains(info);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NonterminalExpression</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Expression</span>&#123;<br>    <span class="hljs-keyword">private</span> TerminalExpression region;<br>    <span class="hljs-keyword">private</span> TerminalExpression person;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NonterminalExpression</span><span class="hljs-params">(TerminalExpression region,TerminalExpression person)</span>&#123;<br>        <span class="hljs-built_in">this</span>.region = region;<br>        <span class="hljs-built_in">this</span>.person = person;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">Interpret</span><span class="hljs-params">(String info)</span> &#123;<br>        String[] str = info.split(<span class="hljs-string">&quot;的&quot;</span>);<br>        <span class="hljs-keyword">return</span> region.Interpret(str[<span class="hljs-number">0</span>]) &amp;&amp;person.Interpret(str[<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><p>该模式适用于当有一个语言需要解释执行，并且可以将该语言中的句子表示为一个抽象的语法树时</p><ul><li>该文法简单</li><li>效率不是一个关键问题</li></ul><h4 id="4-迭代器模式-Iterator"><a href="#4-迭代器模式-Iterator" class="headerlink" title="4. 迭代器模式(Iterator)"></a>4. 迭代器模式(Iterator)</h4><p>意图：提供一种方法顺序访问一个聚合对象中的各个元素，且不需要暴露该对象的内部表示</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image21.png" class=""><ul><li>Iterator(迭代器)定义访问和遍历元素的接口</li><li>ConcreteIterator(具体迭代器)实现迭代器接口，对该聚合遍历时跟踪当前位置</li><li>Aggregate(聚合)定义创建和实现迭代器对象的接口</li><li>ConcreteAggregate(具体聚合)实现创建相应迭代器的接口，该操作返回ConcreteIterator的一个适当的实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">diedaiqi</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteAggregate</span> <span class="hljs-variable">bookAggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        String[] name = &#123;<span class="hljs-string">&quot;西游记&quot;</span>,<span class="hljs-string">&quot;三国&quot;</span>,<span class="hljs-string">&quot;水浒&quot;</span>,<span class="hljs-string">&quot;红楼梦&quot;</span>&#125;;<br>        <span class="hljs-type">double</span>[] prices = &#123;<span class="hljs-number">10.24</span>,<span class="hljs-number">123.4</span>,<span class="hljs-number">213.4</span>,<span class="hljs-number">126</span>&#125;;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>            bookAggregate.Add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(name[i],prices[i]));<br>        &#125;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">bi</span> <span class="hljs-operator">=</span> bookAggregate.CreateIterator();<br>        <span class="hljs-keyword">while</span> (bi.hasNext())&#123;<br>            <span class="hljs-type">Book</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (Book) bi.next();<br>            System.out.println(b.getName()+<span class="hljs-string">&quot; &quot;</span>+b.getPrice());<br>        &#125;<br>        String[] name1 = &#123;<span class="hljs-string">&quot;五菱&quot;</span>,<span class="hljs-string">&quot;宝马&quot;</span>,<span class="hljs-string">&quot;奔驰&quot;</span>,<span class="hljs-string">&quot;奥迪&quot;</span>&#125;;<br>        <span class="hljs-type">double</span>[] prices1 = &#123;<span class="hljs-number">10.24</span>,<span class="hljs-number">123.4</span>,<span class="hljs-number">213.4</span>,<span class="hljs-number">126</span>&#125;;<br>        <span class="hljs-type">ConcreteAggregate</span> <span class="hljs-variable">carAggregate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteAggregate</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)&#123;<br>            carAggregate.Add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">car</span>(name1[i],prices1[i]));<br>        &#125;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">bi1</span> <span class="hljs-operator">=</span> carAggregate.CreateIterator();<br>        <span class="hljs-keyword">while</span> (bi1.hasNext())&#123;<br>            <span class="hljs-type">car</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (car) bi1.next();<br>            System.out.println(b.getName()+<span class="hljs-string">&quot; &quot;</span>+b.getPrice());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Iterator</span>&#123;<br>    <span class="hljs-keyword">private</span> Aggregate aggregate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteIterator</span><span class="hljs-params">(Aggregate aggregate)</span>&#123;<br>        index = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">this</span>.aggregate = aggregate;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> index&lt;aggregate.getSize();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> aggregate.get(index++);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Aggregate</span>&#123;<br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">CreateIterator</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(Object obj)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteAggregate</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Aggregate</span>&#123;<span class="hljs-comment">//聚合对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Object&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(Object obj)</span>&#123;<br>        list.add(obj);<br>    &#125;<br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> list.get(index);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSize</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> list.size();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Iterator <span class="hljs-title function_">CreateIterator</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteIterator</span>(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> price)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">car</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    car(String name, <span class="hljs-type">double</span> price)&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示</li><li>支持对聚合对象的多种遍历</li><li>为遍历不同的聚合结构提供一个统一的接口</li></ul><h4 id="5-中介者模式-Mediator"><a href="#5-中介者模式-Mediator" class="headerlink" title="5. 中介者模式(Mediator)"></a>5. 中介者模式(Mediator)</h4><p>意图：用一个中介对象来封装一系列对象交互，中介者使各对象不需要显式地相互引用，从而使其<strong>耦合松散</strong>，而且可以<strong>独立地改变它们之间的交互</strong></p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image22.png" class=""><ul><li>Mediator（中介者)定义一个接口用于各同事(Colleague）对象通信。</li><li>ConcreteMediator(具体中介者)通过协调各同事对象实现协作行为;了解并维护它的各个同事。</li><li>Colleague class(同事类）知道它的中介者对象;每一个同事类对象在需要与其他同事通信的时候与它的中介者通信。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mediator</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">co1</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">co1</span>();<br>        <span class="hljs-type">co2</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">co2</span>();<br>        <span class="hljs-type">co3</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">co3</span>();<br>        <span class="hljs-type">ConcreteZhongjie</span> <span class="hljs-variable">zj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteZhongjie</span>(c1,c3);<br>        c1.sendMessage(<span class="hljs-string">&quot;你好&quot;</span>,c2);<span class="hljs-comment">//通信失败 </span><br>        c1.sendMessage(<span class="hljs-string">&quot;你好&quot;</span>,c3);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Colleage</span>&#123;<br>    <span class="hljs-keyword">protected</span> String name;<br>    <span class="hljs-keyword">protected</span> Zhongjie zhongjie;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message,Colleage getc)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">co1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleage</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">co1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;A&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message,Colleage getc)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送方:&quot;</span>+name+ <span class="hljs-string">&quot; &quot;</span> + message);<br>        zhongjie.send(message,<span class="hljs-built_in">this</span>,getc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收方:&quot;</span>+name + <span class="hljs-string">&quot; &quot;</span> + message);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">co2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleage</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">co2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;B&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message,Colleage getc)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送方:&quot;</span>+name+ <span class="hljs-string">&quot; &quot;</span> + message);<br>        zhongjie.send(message,<span class="hljs-built_in">this</span>,getc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收方:&quot;</span>+name + <span class="hljs-string">&quot; &quot;</span> + message);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">co3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Colleage</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">co3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = <span class="hljs-string">&quot;C&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(String message,Colleage getc)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发送方:&quot;</span>+name+ <span class="hljs-string">&quot; &quot;</span> + message);<br>        zhongjie.send(message,<span class="hljs-built_in">this</span>,getc);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getMessage</span><span class="hljs-params">(String message)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;接收方:&quot;</span>+name + <span class="hljs-string">&quot; &quot;</span> + message);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Zhongjie</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message,Colleage sendc,Colleage getc)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteZhongjie</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Zhongjie</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Colleage&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConcreteZhongjie</span><span class="hljs-params">(Colleage ...c)</span>&#123;<br>        <span class="hljs-keyword">for</span>(Colleage cc : c)&#123;<br>            cc.zhongjie = <span class="hljs-built_in">this</span>;<br>            list.add(cc);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(String message,Colleage sendc,Colleage getc)</span> &#123;<br>        <span class="hljs-keyword">if</span> (list.contains(getc))<br>            getc.getMessage(message);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;通信失败&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>一组对象以定义良好但是复杂的方式进行通信，产生的相互依赖关系结构混乱且难以理解</li><li>一个对象引用其他很多对象并且直接与这些对象通信，导致难以复用该对象</li><li>想定制一个分布在多个类中的行为，而又不想生成太多的子类</li></ul><h4 id="6-备忘录模式-Memento"><a href="#6-备忘录模式-Memento" class="headerlink" title="6. 备忘录模式(Memento)"></a>6. 备忘录模式(Memento)</h4><p>意图：在不破坏封装性的前提下捕获一个对象的内部状态，并在对象之外保存这个状态，这样以后就可以将对象恢复到原先保存的状态</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image23.png" class=""><ul><li>Memento(备忘录）存储原发器对象的内部状态，原发器根据需要决定备忘录存储原发器的哪些内部状态;防止原发器以外的其他对象访问备忘录。</li><li>Originator(原发器）创建一个备忘录，用于记录当前时刻它的内部状态;使用备忘录恢复内部状态。</li><li>Caretaker(管理者）负责保存好备忘录;不能对备忘录的内容进行操作或检查。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Memento</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Caretaker</span> <span class="hljs-variable">care</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Caretaker</span>();<br>        <span class="hljs-type">Originator</span> <span class="hljs-variable">orign</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Originator</span>();<br>        orign.setState(<span class="hljs-string">&quot;1024&quot;</span>);<br>        <span class="hljs-type">beiwang</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> orign.CreateBeiwang();<br>        orign.setState(<span class="hljs-string">&quot;2048&quot;</span>);<br>        <span class="hljs-type">beiwang</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> orign.CreateBeiwang();<br>        orign.setState(<span class="hljs-string">&quot;4096&quot;</span>);<br>        <span class="hljs-type">beiwang</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> orign.CreateBeiwang();<br>        care.Add(b1);<br>        care.Add(b2);<br>        care.Add(b3);<br>        care.show();<br>        orign.setState(care.get(<span class="hljs-number">2</span>).getState());<span class="hljs-comment">//恢复到第二次备份      </span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Originator</span>&#123;<span class="hljs-comment">//原发器</span><br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(String state)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> beiwang <span class="hljs-title function_">CreateBeiwang</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">beiwang</span>(state);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBeiwang</span><span class="hljs-params">(beiwang bei)</span>&#123;<br>        state = bei.getState();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">beiwang</span>&#123;<span class="hljs-comment">//备忘录</span><br>    <span class="hljs-keyword">private</span> String state;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">beiwang</span><span class="hljs-params">(String state)</span>&#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getState</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Caretaker</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;beiwang&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Add</span><span class="hljs-params">(beiwang b)</span>&#123;<br>        list.add(b);<br>    &#125;<br>    <span class="hljs-keyword">public</span> beiwang <span class="hljs-title function_">Get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">return</span> list.get(index-<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(beiwang bb : list)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第&quot;</span>+cnt+<span class="hljs-string">&quot;次备份:&quot;</span>+bb.getState());<br>            cnt++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>必须保存一个对象在某一个时刻的状态，这样以后方便恢复</li><li>如果一个用接口来让其他对象得到这些状态，将会暴露对象得实现细节并破坏对象的封装性</li></ul><h4 id="7-观察者模式"><a href="#7-观察者模式" class="headerlink" title="7. 观察者模式"></a>7. 观察者模式</h4><p>意图：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image24.png" class=""><ul><li><p>Subject(目标)知道它的观察者，可以有任意多个观察者观察同一个目标;提供注册和删除观察者对象的接口。</p></li><li><p>Observer(观察者)为那些在目标发生改变时需获得通知的对象定义一个接口.ConcreteSubject(具体目标)将有关状态存入各ConcreteObserver对象;当它的状态发生改变时，向它的各个观察者发出通知。</p></li><li><p>ConcreteObserver(具体观察者)维护一个指向ConcreteSubject对象的引用;存储有关状态，这些状态应与目标的状态保持一致;实现Observer的更新接口，以使自身状态与目标的状态保持一致。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Subject</span> <span class="hljs-variable">subject1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-type">guancha</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>(<span class="hljs-string">&quot;kai&quot;</span>,subject1);<br>        <span class="hljs-type">guancha</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>(<span class="hljs-string">&quot;rui&quot;</span>,subject1);<br>        <span class="hljs-type">guancha</span> <span class="hljs-variable">g3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>(<span class="hljs-string">&quot;xing&quot;</span>,subject1);<br>        <span class="hljs-type">guancha</span> <span class="hljs-variable">g4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">user</span>(<span class="hljs-string">&quot;wang&quot;</span>,subject1);<br>        subject1.Notify();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Attach</span><span class="hljs-params">(guancha guan)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Detach</span><span class="hljs-params">(guancha guan)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Notify</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;guancha&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Attach</span><span class="hljs-params">(guancha guan)</span> &#123;<br>        list.add(guan);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Detach</span><span class="hljs-params">(guancha guan)</span> &#123;<br>        list.remove(guan);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Notify</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(guancha gg : list)&#123;<br>            gg.Update();<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">guancha</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Update</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">user</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">guancha</span>&#123;<br>    <span class="hljs-keyword">private</span> Subject subject;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">user</span><span class="hljs-params">(String name,Subject sub)</span>&#123;<br>        <span class="hljs-built_in">this</span>.subject = sub;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        subject.Attach(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Update</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name+<span class="hljs-string">&quot; 收到通知&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该代码体现了基本思路，要求的状态一致可以自行更改</p><p>适用于：</p><ul><li>当一个抽象模型有两个方面，其中一个方面依赖于另一个方面，将这两者封装在独立的对象中以使它们可以各自独立地改变和复用</li><li>当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变时</li><li>当一个对象必须通知其他对象，而又不能假定其他对象是谁，即不希望这些对象是紧耦合的</li></ul><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image25.png" class=""><p>分析：A-迭代器模式 B-中介者模式 C-备忘录模式</p><h4 id="8-状态模式"><a href="#8-状态模式" class="headerlink" title="8. 状态模式"></a>8. 状态模式</h4><p>意图：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image26.png" class=""><ul><li>Context(上下文)定义客户感兴趣的接口;维护一个ConcreteState子类的实例，这个实例定义当前状态。</li><li>State(状态)定义一个接口以封装与Context的一个特定状态相关的行为。</li><li>ConcreteState(具体状态子类)每个子类实现与Context的一个状态相关的行为。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>();<br>        con.Request();<br>        con.Request();<br>        con.Request();<br>        con.Request();<br>        con.Request();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>&#123;<span class="hljs-comment">//贩卖机</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-keyword">private</span> zhuangtai state;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">()</span>&#123;<br>        count = <span class="hljs-number">3</span>;<br>        state = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StateA</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br>    <span class="hljs-keyword">public</span> zhuangtai <span class="hljs-title function_">getState</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCount</span><span class="hljs-params">(<span class="hljs-type">int</span> count)</span> &#123;<br>        <span class="hljs-built_in">this</span>.count = count;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setState</span><span class="hljs-params">(zhuangtai state)</span> &#123;<br>        <span class="hljs-built_in">this</span>.state = state;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Request</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        state.Handle(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">zhuangtai</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Handle</span><span class="hljs-params">(Context context)</span> <span class="hljs-keyword">throws</span> InterruptedException;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StateA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">zhuangtai</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Handle</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> context.getCount();<br>        <span class="hljs-keyword">if</span> (count-<span class="hljs-number">1</span>&gt;=<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;购买成功&quot;</span>);<br>            context.setCount(count-<span class="hljs-number">1</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;购买成功&quot;</span>);<br>            context.setCount(count-<span class="hljs-number">1</span>);<br>            context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StateB</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">StateB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">zhuangtai</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Handle</span><span class="hljs-params">(Context context)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        System.out.println(<span class="hljs-string">&quot;补货中。。。。&quot;</span>);<br>        Thread.sleep(<span class="hljs-number">2000</span>);<br>        System.out.println(<span class="hljs-string">&quot;补货成功&quot;</span>);<br>        context.setCount(<span class="hljs-number">3</span>);<br>        context.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StateA</span>());<br>        System.out.println(<span class="hljs-string">&quot;请重新购买&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>一个对象的行为决定于它的状态，并且它必须在运行时根据状态改变它的行为</li><li>一个操作中含有庞大的多分支的条件语句，且这些分支依赖于该对象的状态，这个状态常用一个或多个枚举常量表示</li></ul><h4 id="9-策略模式"><a href="#9-策略模式" class="headerlink" title="9. 策略模式"></a>9. 策略模式</h4><p>意图：定义一系列算法，把它们一个个封装起来，并且使它们可以相互替换，此模式可以使算法独立于使用它们的客户而变化</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image27.png" class=""><ul><li>Strategy(策略)定义所有支持的算法的公共接口。Context 使用这个接口来调用某</li><li>ConcreteStrategy定义的算法。</li><li>ConcreteStrategy(具体策略)以Strategy接口实现某具体算法。</li><li>Context(上下文)用一个ConcreteStrategy对象来配置;维护一个对Strategy 对象的引用;可定义一个接口来让Strategy 访问它的数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">celue</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Strategy</span> <span class="hljs-variable">jia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">jia</span>();<br>        <span class="hljs-type">Context</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Context</span>(jia);<br>        c.Operate(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Context</span>&#123;<br>    <span class="hljs-keyword">private</span> Strategy strategy;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Context</span><span class="hljs-params">(Strategy strategy)</span>&#123;<br>        <span class="hljs-built_in">this</span>.strategy = strategy;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Operate</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        strategy.suan(a,b);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">suan</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">jia</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">suan</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(a+b);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">jian</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Strategy</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">suan</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(a-b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>许多相关的类仅仅是行为有异，“策略”提供了一种用多个行为中的一个行为来配置个类的方法</li><li>需要使用一个算法的不同变体</li><li>算法使用客户不应该知道的数据，可使用策略模式以避免暴露复杂的，与算法相关的数据结构</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，将相关的条件分支移入它们各自的Strategy类中，以替代这些条件语句</li></ul><h4 id="10-模板方法"><a href="#10-模板方法" class="headerlink" title="10. 模板方法"></a>10. 模板方法</h4><p>意图：定义一个操作中的算法骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image28.png" class=""><ul><li>AbstractClass(抽象类)定义抽象的原语操作，具体的子类将重定义它们以实现一个算法的各步骤;实现模板方法，定一个算法的骨架，该模板方法不仅调用原语操作，也调用定义在AbstractClass或其他对象中的操作。</li><li>ConcreteClass(具体类)实现原语操作以完成算法中与特定子类相关的步骤。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">moban</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-type">Teacher</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>        s1.Template();<br>        t1.Template();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Template</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//同一个模板 存放共同步骤</span><br>        System.out.println(<span class="hljs-string">&quot;去教室&quot;</span>);<br>        Primitive1();<br>        System.out.println(<span class="hljs-string">&quot;出教室&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Primitive1</span><span class="hljs-params">()</span>;<span class="hljs-comment">//不同的具体步骤</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Primitive1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;学习&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Primitive1</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;讲课&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li><strong>一次性实现算法的不变部分，并将可变的行为留给子类实现</strong></li><li>各子类中公共的行为应该提取出来并集中到一个公共父类中，避免代码重复</li></ul><h4 id="11-访问者模式"><a href="#11-访问者模式" class="headerlink" title="11. 访问者模式"></a>11. 访问者模式</h4><p>意图：表示一个<strong>作用于某对象结构中的各元素的操作</strong>，它允许在不改变各元素的类前提下定义作用于这些元素的新操作</p><img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image29.png" class=""><ul><li>Visitor(访问者)为该对象结构中ConcreteElement的每一个类声明一个Visit操作。该操作的名字和特征标识了发送 Visit请求给该访问者的那个类，这使得访问者可以确定正被访问元素的具体的类。这样访问者就可以通过该元素的特定接口直接访问它</li><li>ConcreteVisitor (具体访问者)实现每个有Visitor声明的操作，每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。ConcreteVisitor为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累积结果。Element(元素)定义以一个访问者为参数的Accept操作。</li><li>ConcreteElement(具体元素)实现以一个访问者为参数的Accept操作。</li><li>ObjectStructure(对象结构)能枚举它的元素;可以提供一个高层的接口以允许该访问者访问它的元素;可以是一个组合或者一个集合，如一个列表或一个无序集合。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">fangwenzhe</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PersonStructure</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonStructure</span>();<br>        <span class="hljs-type">visitor1</span> <span class="hljs-variable">v1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">visitor1</span>();<br>        ps.Accept(v1);<br>        v1.show();<br>        <span class="hljs-type">visitor2</span> <span class="hljs-variable">v2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">visitor2</span>();<br>        ps.Accept(v2);<br>        v2.show();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Visitor</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitStudent</span><span class="hljs-params">(Student student)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitTeacher</span><span class="hljs-params">(Teacher teacher)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">visitor1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span>&#123;<span class="hljs-comment">//分别统计学生和老师年龄总和</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sumage1</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">sumage2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitStudent</span><span class="hljs-params">(Student student)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1:&quot;</span> + student.getName()+<span class="hljs-string">&quot; &quot;</span>+student.getAge());<br>        sumage1 += student.getAge();<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;1:&quot;</span> + teacher.getName()+<span class="hljs-string">&quot; &quot;</span>+teacher.getAge());<br>        sumage2 += teacher.getAge();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(sumage1+<span class="hljs-string">&quot; &quot;</span>+sumage2);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">visitor2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Visitor</span>&#123;<span class="hljs-comment">//最高成绩和最高工龄</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxscore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">maxworkage</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitStudent</span><span class="hljs-params">(Student student)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;2:&quot;</span> + student.getName()+<span class="hljs-string">&quot; &quot;</span>+student.getScore());<br>        <span class="hljs-keyword">if</span> (student.getScore()&gt;maxscore)&#123;<br>            maxscore = student.getScore();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visitTeacher</span><span class="hljs-params">(Teacher teacher)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;2:&quot;</span> + teacher.getName()+<span class="hljs-string">&quot; &quot;</span>+teacher.getWorkyear());<br>        <span class="hljs-keyword">if</span> (teacher.getWorkyear()&gt;maxworkage)&#123;<br>            maxworkage = teacher.getWorkyear();<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(maxscore+<span class="hljs-string">&quot; &quot;</span>+maxworkage);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonStructure</span>&#123;<br>    <span class="hljs-keyword">private</span> List&lt;Person&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonStructure</span><span class="hljs-params">()</span>&#123;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-number">98</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-number">15</span>,<span class="hljs-number">99</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;C&quot;</span>,<span class="hljs-number">14</span>,<span class="hljs-number">97</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;周老师&quot;</span>,<span class="hljs-number">46</span>,<span class="hljs-number">20</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;老王&quot;</span>,<span class="hljs-number">35</span>,<span class="hljs-number">15</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;李云龙&quot;</span>,<span class="hljs-number">40</span>,<span class="hljs-number">18</span>));<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Accept</span><span class="hljs-params">(Visitor visitor)</span>&#123;<br>        <span class="hljs-keyword">for</span> (Person pp : list)&#123;<br>            pp.Accept(visitor);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Accept</span><span class="hljs-params">(Visitor visitor)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> score)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visitStudent(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getWorkyear</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> workyear;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> workyear;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,<span class="hljs-type">int</span> workyear)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name, age);<br>        <span class="hljs-built_in">this</span>.workyear = workyear;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Accept</span><span class="hljs-params">(Visitor visitor)</span> &#123;<br>        visitor.visitTeacher(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>适用于：</p><ul><li>一个对象结构包含很多类对象，它们有不同的接口，而用户想对这些对象实施一些依赖于其具体类的操作</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而又想避免操作污染这些对象的类，Visitor使得用户可以将相关的操作集中起来定义在一个类中，当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作</li><li>定义对象结构的类很少改变，但经常需要在此结构上定义新的操作，改变对象结构类需要重定义对所有访问者的接口，代价很大。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好</li></ul><h3 id="五-简单练习"><a href="#五-简单练习" class="headerlink" title="五. 简单练习"></a>五. 简单练习</h3><p>这一部分旨在学习完之后进行简单的复习</p><p>1. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image30.png" class=""><p>   答案：装饰器模式 享元模式 适配器模式</p><p>2. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image31.png" class=""><p>   答案：单例模式 组合模式 装饰器模式</p><p>3. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image32.png" class=""><p>   答案：DCAD</p><p>4. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image33.png" class=""><p>   答案：适配器模式 桥接模式</p><p>5. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image34.png" class=""><p>   答案：中介者模式 观察者模式</p><p>6. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image35.png" class=""><p>   答案：DAD</p><p>7. </p>   <img src="/2023/01/20/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image36.png" class=""><p>   答案：ADC</p>]]></content>
    
    
    <categories>
      
      <category>软考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>软考</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2022寻找整数</title>
    <link href="/2023/01/14/%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%AF%BB%E6%89%BE%E6%95%B4%E6%95%B0/"/>
    <url>/2023/01/14/%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%AF%BB%E6%89%BE%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>本文是针对2022年蓝桥杯省赛寻找整数的题解</p><span id="more"></span><h1 id="寻找整数"><a href="#寻找整数" class="headerlink" title="寻找整数"></a>寻找整数</h1><h3 id="一-题目"><a href="#一-题目" class="headerlink" title="一. 题目"></a>一. 题目</h3><p><a href="https://www.lanqiao.cn/problems/2131/learning/">题目链接</a></p><h3 id="二-题目分析"><a href="#二-题目分析" class="headerlink" title="二. 题目分析"></a>二. 题目分析</h3><p>在求解该题之前需先理解中国剩余定理</p><p>​在《孙子算经》中有这样一个问题：“今有物不知其数，三三数之剩二（除以3余2），五五数之剩三（除以5余3），七七数之  剩二（除以7余2），问物几何？”这个问题称为“孙子问题”，该问题的一般解法国际上称为“中国剩余定理”。</p><p>解法：</p><ul><li><p>找出三个数：从3和5的公倍数中找出被7除余1的最小数15，从3和7的公倍数中找出被5除余1 的最小数21，最后从5和7的公倍数中找出除3余1的最小数70。</p></li><li><p>用15乘以2（2为最终结果除以7的余数），用21乘以3（3为最终结果除以5的余数），同理，用70乘以2（2为最终结果除以3的余数），然后把三个乘积相加15∗2+21∗3+70∗2得到和233。</p></li><li><p>用233除以3，5，7三个数的最小公倍数105，得到余数23，即233%105&#x3D;23。这个余数23就是符合条件的最小数。</p></li></ul><p>解法理解：</p><p>有一说一我们的前辈还是很秀的，这解法乍一看还真不知道从何得来！！！</p><ul><li><p>首先，将问题拆分成三个小问题</p><p>设n1为取余3等于2的数，n2为取余5等于3的数，n3为取余7等于2的数</p><p>那么现在已知n1取余3为2，如何使n1+n2+n3取余3为2呢？</p><p>这里涉及到一个数学定理：<strong>a%b&#x3D;c —-&gt;&gt; (a+k∗b)%b&#x3D;c</strong></p><p>根据定理可以推断出初步结论</p><p>为使n1+n2+n3的和满足除以3余2，n2和n3必须是3的倍数</p><p>为使n1+n2+n3的和满足除以5余3，n1和n3必须是5的倍数</p><p>为使n1+n2+n3的和满足除以7余2，n1和n2必须是7的倍数</p></li><li><p>上述结论转化如下：</p><p>n1除以3余2，且是5和7的公倍数</p><p>n2除以5余3，且是3和7的公倍数</p><p>n3除以7余2，且是3和5的公倍数</p></li><li><p>求n1的方法：利用逆元求解，当然也可以直接根据定义算，这里方便代码</p><p>35x % 3 &#x3D;&#x3D; 1 –&gt; 35逆元x为2 –&gt; 70 –&gt; 70*2 &#x3D;140</p></li><li><p>其余类似</p><p>n2：21x %5 &#x3D;&#x3D; 1 –&gt; 21逆元x为1 –&gt;21 –&gt; 21*3&#x3D;63</p><p>n3：30</p><p>转化为代码求解逆元使用费马小定理[一般在mod p是个素数的时候用，比扩展欧几里得快一点而且好写]</p><img src="/2023/01/14/%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%AF%BB%E6%89%BE%E6%95%B4%E6%95%B0/%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86.png" class=""></li><li><p>n1+n2+n3 &#x3D; 233 —&gt; 最小为233%(3 * 5 * 7) &#x3D; 23</p></li></ul><p>一般算法情况：</p><img src="/2023/01/14/%E8%93%9D%E6%A1%A5%E6%9D%AF2022%E5%AF%BB%E6%89%BE%E6%95%B4%E6%95%B0/%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86.png" class=""><p>了解完定理之后直接上代码</p><h3 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 187是11*17</span><br>condition = &#123;<span class="hljs-number">187</span>: <span class="hljs-number">0</span>, <span class="hljs-number">2</span>: <span class="hljs-number">1</span>, <span class="hljs-number">3</span>: <span class="hljs-number">2</span>, <span class="hljs-number">5</span>: <span class="hljs-number">4</span>, <span class="hljs-number">7</span>: <span class="hljs-number">4</span>, <span class="hljs-number">13</span>: <span class="hljs-number">10</span>, <span class="hljs-number">19</span>: <span class="hljs-number">18</span>, <span class="hljs-number">23</span>: <span class="hljs-number">15</span>, <span class="hljs-number">29</span>: <span class="hljs-number">16</span>, <span class="hljs-number">31</span>: <span class="hljs-number">27</span>, <span class="hljs-number">37</span>: <span class="hljs-number">22</span>, <span class="hljs-number">41</span>: <span class="hljs-number">1</span>, <span class="hljs-number">43</span>: <span class="hljs-number">11</span>,<span class="hljs-number">47</span>: <span class="hljs-number">5</span>&#125;  <span class="hljs-comment"># 所有条件</span><br>answer = <span class="hljs-number">0</span>  <span class="hljs-comment"># 最终答案</span><br>remainder = <span class="hljs-built_in">list</span>(condition.values())  <span class="hljs-comment"># 所有除数</span><br>divisor = <span class="hljs-built_in">list</span>(condition.keys())  <span class="hljs-comment"># 所有余数</span><br><br>m = <span class="hljs-number">1</span>  <span class="hljs-comment"># 得所有除数的乘积</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> divisor:<br>    m *= i<br><br>l = <span class="hljs-built_in">len</span>(condition)<br><span class="hljs-comment"># 费马小定理求解逆元</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inv</span>(<span class="hljs-params">a, p</span>):<br>    <span class="hljs-keyword">return</span> a ** (p - <span class="hljs-number">2</span>) % p<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    Least_Common_Multiple = m // divisor[i]  <span class="hljs-comment"># 得出剩余数字的最小公倍数</span><br>    niyuan = inv(Least_Common_Multiple, divisor[i])<br>    Least_Common_Multiple *= niyuan<br>    answer += Least_Common_Multiple * remainder[i]<br><br><span class="hljs-built_in">print</span>(answer % m)<br></code></pre></td></tr></table></figure><p>结果：2022040920220409</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>剩余定理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习资料1</title>
    <link href="/2022/12/29/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%991/"/>
    <url>/2022/12/29/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%991/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9ae14bea5bb789ba643d0335fe270f904541bcb918a609044719b7b19e6834e2">71a123257dee39599aa24fc97447e3992fb8626eced1d83c8e7891cb2cc432d68eccfa7b2a41ed59cab0a4480a4b3e606166e5e578cd5540754ead8779310dca31d06dcad30564ddf8d2cd5aac15ee67ad9f4f4ce381e97c2d140dbbd282887f8326bf4d8413caaabafcb0d9c04353e0acfb6c1a3e8c27385cb6710539afc4b6e73c7e66cd7c008f9d6e257e4344cbe58b85fb5f9c910be7cdf712c29c6f47548c8ffc8c178874eb1638dc723e40fbd18dc56e3d21732cee681d2faa4e603642477ccb68229c00ff2ea32ec865237e499c26732dd9d7f4eef43e9c52c565b042fa76035cc3ecab284dc80c9eece521f1ce7dd0c9a907777bf3631d9b5262f8953a75a5e30ca7d73fbfb08fa4293601c742580dec9276f999f70f272095ececd071e85027d82b820d82099940f97ab1874a15ce730eaa431453b376b439ea73b669d0fe361e2b265bf27e5e3d1afccd604cdc99f239a3a404d2238433085fc5f5ac18a0e4aa3a64a0898ab7fbb2b787640c8ba57585908c6e9372386503bf5d73b197fcb5657d5fe39bcce8cb219b76c2bfb7d7bd744ec16c3ea38d5bc2c4997d5855fce957f4cd91ead8431c5bf5207e46c9deb4212e218d9f0c9da43be002a4afaef856569ff59d6e2d4dc5dbcb2d6f7ff5692c1cabe93396fe04f9713cca8b1d5979a4c8cf329085d585dd47d346f121d27589ed0a81c2b830af8c6a78a479a20ec1752a9175f05b555a8738695b3ade835c4c89426800d6431bae242a92b0b9bbf67a1e588c61175bf3c63a89759ec97a987220c399f6233d0a752e66becd4c3e1e5248f50e236cce7a4e7ff8e5c9b2423ba121b7665d137d9f99396a26729beb026ae9e435cf0f71946e3f3d4bf3844d0857189abefc5ecbf4f89cf3f72dcbb05e8aee661445bbef86efbdecf96f1907289b3ec89f1a08dab00220198c6f50d6591d8f8a0a3126165e6e42c534dddb1abc517bf074f09e39686b8b5d3af3778daf107af197ba6de49e2b1c63d76df790c159431be6bf2a09b30ace8cdd87d76436ea97df73cb0d576fe18fb13d2d55985ba2b13468176315e08cd96ef91ad6b660c3154dbfbaf27e3558086b402e1fe45e1a338e5b98b291385b1e181e27ea9922334339e23114ce2458f254a9aab561f021541e6104e975bee805bf42e0a669bcf0306624926755ae23909b2b3ae22e96e61ee4b6f30dedf8a1ddc8148f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遗传算法求解TSP问题</title>
    <link href="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/"/>
    <url>/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文介绍了基于遗传算法求解TSP问题以及结果的可视化分析</p><span id="more"></span><h1 id="基于遗传算法求解TSP问题"><a href="#基于遗传算法求解TSP问题" class="headerlink" title="基于遗传算法求解TSP问题"></a>基于遗传算法求解TSP问题</h1><h3 id="一-问题描述"><a href="#一-问题描述" class="headerlink" title="一. 问题描述"></a>一. 问题描述</h3><p>​TSP问题即旅行商问题，属于典型的组合优化问题，理论上来讲，组合优化问题的求解，总是可以用枚举的方式找到结果，例如对于一个简单的对称型TSP问题，可以采用枚举法排列出全部可以选择的路线，然后计算每条线路的长度，根据要求就可以算出总路程的长度，最后比较走不同的路线的长度，找出最短的一条完整路径，这种方法思路简单但是针对于城市数目较少时可以很快算出，但随着城市规模的增大到n，路线就是(n-1)!&#x2F;2n条，当n较大时就会超出计算机的算力，枚举就没有意义了。</p><p>​所以现在人们转向寻求有效的启发式算法，这是因为启发式算法使问题在可接受的时间和空间复杂度上去寻找最优解，但无法保证解的有效性和最优性。目前TSP问题的求解算法主要有以禁忌算法，模拟退火算法，遗传算法，蚁群算法等为代表的现代智能优化算法。这些算法虽然思路不同但存在一个共同的目标：求得像旅行商问题等组合优化问题中的难解类问题的全局最优解。</p><p>​TSP问题的数学模型：</p><p>​TSP问题可以定义为，给定n个顶点的无向完全图G &#x3D; (V,E,r)，要求一个推销员遍历所有城市后回到出发点形成回路C，且使回路C上的权值之和达到最小，其中V是城市点集，E是城市与城市之间的边，r代表权值。</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/TSP%E9%97%AE%E9%A2%98%E6%95%B0%E5%AD%A6%E6%A8%A1%E5%9E%8B.png" class="" title="TSP问题数学模型"><h3 id="二-求解问题的方法框架"><a href="#二-求解问题的方法框架" class="headerlink" title="二. 求解问题的方法框架"></a>二. 求解问题的方法框架</h3><h4 id="2-1-遗传算法介绍"><a href="#2-1-遗传算法介绍" class="headerlink" title="2.1 遗传算法介绍"></a>2.1 遗传算法介绍</h4><p>​遗传算法是模仿自然界生物进化机制发展起来的随机全局搜索和优化方法，它借鉴了达尔文的进化论和孟德尔的遗传学说。其本质是一种高效、并行、全局搜索的方法，它能在搜索过程中自动获取和积累有关搜索空间的知识，并自适应的控制搜索过程以求得最优解。遗传算法操作使用适者生存的原则，在潜在的解决方案种群中逐次产生一个近似最优解的方案，在遗传算法的每一代中，根据个体在问题域中的适应度值和从自然遗传学中借鉴来的再造方法进行个体选择，产生一个新的近似解。这个过程导致种群中个体的进化，得到的新个体比原来个体更能适应环境，就像自然界中的改造一样。<br>​遗传算法是计算机科学人工智能领域中用于解决最优化的一种搜索启发式算法，是进化算法的一种。这种启发式通常用来生成有用的解决方案来优化和搜索问题。进化算法最初是借鉴了进化生物学中的一些现象而发展起来的，这些现象包括遗传、突变、自然选择以及杂交等。</p><h4 id="2-2-遗传算法基本步骤"><a href="#2-2-遗传算法基本步骤" class="headerlink" title="2.2 遗传算法基本步骤"></a>2.2 遗传算法基本步骤</h4><p>流程图：</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="遗传算法流程图"><ol><li><p>选择编码策略，对所求问题进行编码</p><p>​实现遗传算法的首要目标就是设计对TSP问题的编码方式以及解码方法。因为TSP问题空间的参数不能被遗传算法识别处理，必须根据一定的构造方法将它们转化为由基因组成的遗传空间里的个体，即确定编码方式。</p><p>​本次实验解决C-TSP问题，数据集是中国34个一线城市的最优路线，给出了各个城市的经纬度</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E5%9F%8E%E5%B8%82%E7%BB%8F%E7%BA%AC%E5%BA%A6%E6%95%B0%E6%8D%AE.png" class="" title="城市经纬度数据"><p>​n个城市的的基因编码方式为：</p><p>​1.给每一个城市一个序号，如1-&gt;北京，2-&gt;天津，3-&gt;上海，……，34-&gt;澳门<br>    2.用包含n个城市的序号的数组序列表示一种路线（个体），数组元素的序号表示旅行的顺序，如{3， 1， 2，……，34}表示的旅行顺序为：上海-&gt;北京-&gt;天津-&gt;……-&gt;澳门<br>​        3.数值序列中值不重复，即每个城市只去一次</p></li><li><p>初始化种群</p><p>​在选择，交叉，变异等遗传算子选定的情形下,初始种群生成策略的优劣对算法的效率性能和全局收敛性造成很大程度上的影响，通常情况下初始种群的产生是随机性的，根据问题要求，在整个问题空间的范围内设定初始种群规模，起初随机产生一定数量的个体，在挑选优秀的个体进入初始种群中，不断地重复此过程直到取到设定数目的初始种群。利用此方法可以优化程度较低但数量足够的种群。</p></li><li><p>评估适应度</p><p>​适应度函数是群体中个体生存机会选择的评价指标，其形式直接决定着群体进化行为。在进化搜索的过程中，遗传算法仅参照适应度函数，不需要依靠外部信息搜索种群中每个个体的适应度值进行进化。它直接决定遗传算法的收敛性能以及寻优能力，因此如何设计恰当的适应度函数显得至关重要。通常在遗传算法中，适应度函数是由目标函数转变得到的。依照适应度函数以数字量化处理的方式对实际问题进行优化，达到综合值最小效果的目的。在 TSP问题中，适应度函数通常就以城市序列上的<strong>总路径长度的倒数</strong>进行定义。</p></li><li><p>产生新种群</p><p>​产生新种群分为选择，交叉和变异。</p><ol><li><p>选择</p><p>​这一过程主要是针对具体问题，选择有限的个体参与后期的进化。目的是根据适应度标准对群体进行优胜劣汰的操作，越优秀的个体被选择的概率越高，越容易遗传到下一代种群中，反之适应度较小个体以较低概率进行遗传。</p></li><li><p>交叉</p><p>​交叉操作是遗传算法的核心，也是模拟生物进化中关键的步骤，直接决定了遗传算法性能的优劣。交叉算子可以看作基因的相互交流，将两个父代个体的部分基因结构进行替换，重新组合而生成子代新个体的操作。算法的搜索能力通过交叉操作得到极大地提高。</p></li><li><p>变异</p><p>​变异算子是根据变异概率将染色体中的基因运用一定方式进行替换形成新的染色体，它模拟生物进化过程中基因发生的突变现象，其基本上决定了遗传算法局部搜索性能的高低。此运算目的是为了增强进化活力，以一定概率更新个体的基因。在遗传算法的中后期，种群中的个体大都逼近最优解，如果只是依赖交叉操作难以产生新的个体。而变异运算可以有效的避免个体同质化，增加个体的多样性，使算法能够较为全面地覆盖问题的解空间。</p></li></ol></li></ol><h3 id="三-关键技术"><a href="#三-关键技术" class="headerlink" title="三. 关键技术"></a>三. 关键技术</h3><p>产生新种群是该算法的关键部分</p><h4 id="3-1-选择"><a href="#3-1-选择" class="headerlink" title="3.1 选择"></a>3.1 选择</h4><p>以下为常见的选择算子：</p><ol><li>轮盘赌选择：个体遗传到下一代的概率等于个体适应度值与总体适应度值的比值。</li><li>最佳保留选择：首先进行轮盘赌选择操作，然后将父代中适应度最高的个体直接铂贝到子代中。</li><li>随机竞争选择：个体进行竞争，选择适应度高的个体遗传到下一代，直到选满为止。</li><li>随机联赛选择：每次选择若干个适应度最高的个体复制到下一代种群中。</li><li>均匀排序：按照个体适应度高低进行分配每个个体被选中的概率。</li><li>排挤选择：新产生的子代替换基因序列相似的父代个体。</li><li>精英策略：当前种群中适应度最高的个体不参与遗传操作，替换本代种群中经过遗传操作后适应度最低的个体。</li></ol><p>本次实验采用第一种轮盘赌选择(参照书上的数据进行举例)</p><table><thead><tr><th><strong>个体</strong></th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td><strong>适应度</strong></td><td>2.0</td><td>1.8</td><td>1.6</td><td>1.4</td><td>1.2</td><td>1.0</td><td>0.8</td><td>0.6</td><td>0.4</td><td>0.2</td></tr><tr><td><strong>选择概率</strong></td><td>0.18</td><td>0.16</td><td>0.15</td><td>0.13</td><td>0.11</td><td>0.09</td><td>0.07</td><td>0.06</td><td>0.03</td><td>0.02</td></tr><tr><td><strong>累积概率</strong></td><td>0.18</td><td>0.34</td><td>0.49</td><td>0.62</td><td>0.73</td><td>0.82</td><td>0.89</td><td>0.95</td><td>0.98</td><td>1.00</td></tr></tbody></table><p>当产生一个随机数0.32时 即选择个体2</p><p>当产生一个随机数0.42时 即选择个体3</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOne</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;选择一个个体&quot;&quot;&quot;</span><br>    r = random.uniform(<span class="hljs-number">0</span>, self.bounds)<br>    <span class="hljs-keyword">for</span> life <span class="hljs-keyword">in</span> self.lives:<br>        r -= life.score<br>        <span class="hljs-keyword">if</span> r &lt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> life<br><br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;选择错误&quot;</span>, self.bounds)<br></code></pre></td></tr></table></figure><h4 id="3-2-交叉"><a href="#3-2-交叉" class="headerlink" title="3.2 交叉"></a>3.2 交叉</h4><ol><li><p>顺序交叉</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E9%A1%BA%E5%BA%8F%E4%BA%A4%E5%8F%89.png" class="" title="顺序交叉"></li><li><p><strong>部分匹配交叉</strong></p><p>本次实验采取的方式</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E9%83%A8%E5%88%86%E5%8C%B9%E9%85%8D%E4%BA%A4%E5%8F%89.png" class="" title="部分匹配交叉"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">cross</span>(<span class="hljs-params">self, parent1, parent2</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;交叉&quot;&quot;&quot;</span><br>    index1 = random.randint(<span class="hljs-number">0</span>, self.geneLenght - <span class="hljs-number">1</span>)<br>    index2 = random.randint(index1, self.geneLenght - <span class="hljs-number">1</span>)<br>    tempGene = parent2.gene[index1:index2]   <span class="hljs-comment"># 交叉的基因片段</span><br>    newGene = []<br>    p1len = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> parent1.gene:<br>        <span class="hljs-keyword">if</span> p1len == index1:<br>            newGene.extend(tempGene)     <span class="hljs-comment"># 插入基因片段</span><br>            p1len += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> g <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> tempGene:<br>                newGene.append(g)<br>                p1len += <span class="hljs-number">1</span><br>                self.crossCount += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">return</span> newGene<br></code></pre></td></tr></table></figure></li><li><p>循环交叉</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E5%BE%AA%E7%8E%AF%E4%BA%A4%E5%8F%89.png" class="" title="循环交叉"></li></ol><h4 id="3-3-变异"><a href="#3-3-变异" class="headerlink" title="3.3 变异"></a>3.3 变异</h4><ol><li><p><strong>对换变异</strong></p><p>互换元素,本实验采取的变异策略</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E5%AF%B9%E6%8D%A2%E5%8F%98%E5%BC%82.png" class="" title="对换变异"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span>  <span class="hljs-title function_">mutation</span>(<span class="hljs-params">self, gene</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;突变&quot;&quot;&quot;</span><br>    index1 = random.randint(<span class="hljs-number">0</span>, self.geneLenght - <span class="hljs-number">1</span>)<br>    index2 = random.randint(<span class="hljs-number">0</span>, self.geneLenght - <span class="hljs-number">1</span>)<br><br>    newGene = gene[:]       <span class="hljs-comment"># 产生一个新的基因序列，以免变异的时候影响父种群</span><br>    newGene[index1], newGene[index2] = newGene[index2], newGene[index1]<br>    self.mutationCount += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> newGene<br><br></code></pre></td></tr></table></figure></li><li><p>插入变异</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E6%8F%92%E5%85%A5%E5%8F%98%E5%BC%82.png" class="" title="插入变异"></li><li><p>倒位变异</p><p>将截取点中的进行逆序</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E5%80%92%E4%BD%8D%E5%8F%98%E5%BC%82.png" class="" title="倒位变异"></li></ol><h3 id="四-实验结果分析"><a href="#四-实验结果分析" class="headerlink" title="四. 实验结果分析"></a>四. 实验结果分析</h3><p>初始情况</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/%E5%88%9D%E5%A7%8B.png" class="" title="初始"><p>值为：389.702033</p><p>迭代514次</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/514.png" class="" width="514"><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/514%E5%80%BC.png" class="" title="514值"><p>迭代2345次</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/2345.png" class="" width="2345"><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/2345%E5%80%BC.png" class="" title="2345值"><p>迭代5713次</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/5713.png" class="" width="5713"><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/5713%E5%80%BC.png" class="" title="5713值"><p>迭代9984次</p><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/9984.png" class="" width="9984"><img src="/2022/12/28/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95%E6%B1%82%E8%A7%A3TSP%E9%97%AE%E9%A2%98/9984%E5%80%BC.png" class="" title="9984值"><table><thead><tr><th align="center">迭代次数</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">389.702033</td></tr><tr><td align="center">514</td><td align="center">206.246760</td></tr><tr><td align="center">2345</td><td align="center">162.912738</td></tr><tr><td align="center">5713</td><td align="center">159.040116</td></tr><tr><td align="center">9984</td><td align="center">159.040116</td></tr></tbody></table><p>对比数据，当迭代次数达到5700次时结果已经趋近最佳</p><p>随着迭代次数的增加，对应的值在逐步减小，且从图中也可以看出在向着最优解发展</p><h3 id="五-收获"><a href="#五-收获" class="headerlink" title="五. 收获"></a>五. 收获</h3><p>​本次人工智能实验基于遗传算法求解TSP问题收获颇多。虽然之前在算法课上也学过TSP问题，但是只学会了暴力法求解，也就是枚举，经过此实验了解了用遗传算法来进行求解的思路，学习了遗传算法的基本流程，尤其是针对产生新种群的多个方法和他们对应的详细求解过程，并采取其中的一种方法进行处理，对得出的结果进行比对分析。如果还有机会我将对其他产生新种群的方法进行实现并进行对比结果，找出相对更好的方式。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>遗传算法</tag>
      
      <tag>TSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝桥杯2021回路计数</title>
    <link href="/2022/12/27/%E8%93%9D%E6%A1%A5%E6%9D%AF2021%E5%9B%9E%E8%B7%AF%E8%AE%A1%E6%95%B0/"/>
    <url>/2022/12/27/%E8%93%9D%E6%A1%A5%E6%9D%AF2021%E5%9B%9E%E8%B7%AF%E8%AE%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>本文是针对2021年蓝桥杯省赛回路计数的题解</p><span id="more"></span><h1 id="回路计数"><a href="#回路计数" class="headerlink" title="回路计数"></a>回路计数</h1><h3 id="一-题目"><a href="#一-题目" class="headerlink" title="一. 题目"></a>一. 题目</h3><p><a href="https://www.lanqiao.cn/problems/1462/learning/">题目链接</a></p><h3 id="二-题目分析"><a href="#二-题目分析" class="headerlink" title="二. 题目分析"></a>二. 题目分析</h3><p>​从一个固定的点走过其他点再回到起点的方案数，总计21个点</p><p>思路：</p><ul><li><p>根据题意得出邻接矩阵</p></li><li><p>利用回溯dfs递归求解，很明显思路很清晰但是现实很骨感，最差得是21的阶乘，得到结果都猴年马月了</p></li><li><p>放弃dfs的想法，查阅资料题解基本采用状态压缩dp</p><p>先了解一下什么叫状态压缩，就是使用某种方法，简明扼要地以最小代价来表示某种状态，通常是用一串01数字（二进制数）来表示各个点的状态。这就要求使用状态压缩的对象的点的状态必须只有两种，0 或 1。</p><p>其实很容易联想到要用状压，每栋楼是否被访问就可以用0和1表示</p><p>而状压dp就是使用状态压缩的动态规划</p><p>动态规划问题大体分为两种，一种是对递归化问题的记忆求解，另一种是把大问题看作是多阶段的决策求解，这里应该算第二种，存储之前的状态再由状态及状态对应的值推演出状态转移方程得出最终解</p></li><li><p>具体求解思路</p><p>看dp，将原问题划分成多个子问题进行求解</p><p>原问题为 访问完每栋教学楼一次，又回到一号教学楼的不同方案数，那么21个1(111..11)可以表示为访问了所有教学楼一次，题意说明每个教学楼都可以回到一号教学楼(互质，这里不做解释)，所以可以进行划分</p><p>当访问状态为全1时的方案数 &#x3D;&#x3D; 该状态且最后一次访问的楼是2号楼的方案数加上该状态最后一次为3，4，5…..的方案数和</p><p>dp[i] [j] +&#x3D; dp[i - (1&gt;&gt;j)] [1到21(两点间有边且该点符合i状态也就是在i中是被访问过的)]</p></li><li><p>题目分析完毕 开干</p></li></ul><h3 id="三-代码"><a href="#三-代码" class="headerlink" title="三. 代码"></a>三. 代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">huzhi</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> math.gcd(a, b) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>tu = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">22</span>)]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">22</span>):<br>    tu[<span class="hljs-number">1</span>][i] = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">22</span>):<br>    <span class="hljs-comment"># 这里第二层循环从i+1开始 其实也没什么必要 影响不大</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i + <span class="hljs-number">1</span>, <span class="hljs-number">22</span>):<br>        <span class="hljs-keyword">if</span> huzhi(i, j):<br>            tu[i][j] = <span class="hljs-number">1</span><br>         <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">22</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, i):<br>        tu[i][j] = tu[j][i]<br><span class="hljs-comment"># 以上为求邻接矩阵部分 </span><br><br><span class="hljs-comment"># for i in range(1, 22):</span><br><span class="hljs-comment">#     for j in range(1, 22):</span><br><span class="hljs-comment">#         print(tu[i][j], end=&quot; &quot;)</span><br><span class="hljs-comment">#     print()</span><br><br><span class="hljs-comment"># 采用dfs 21的阶乘不行</span><br><span class="hljs-comment"># ans = 0</span><br><span class="hljs-comment"># visit = [0] * 22</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># def dfs(step, np):</span><br><span class="hljs-comment">#     global ans</span><br><span class="hljs-comment">#     if step == 21:</span><br><span class="hljs-comment">#         if np == 1:</span><br><span class="hljs-comment">#             ans += 1</span><br><span class="hljs-comment">#         return</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         for i in range(1,22):</span><br><span class="hljs-comment">#             if np == i or visit[i] == 1 or tu[np][i] == 0:</span><br><span class="hljs-comment">#                 continue</span><br><span class="hljs-comment">#             visit[i] = 1</span><br><span class="hljs-comment">#             dfs(step + 1, i)</span><br><span class="hljs-comment">#             visit[i] = 0</span><br><span class="hljs-comment"># dfs(0,1)</span><br><span class="hljs-comment"># 上述dfs代码没有测试 应该思路就是这个</span><br><br><span class="hljs-comment"># 采用状态压缩dp</span><br><br>dp = [[<span class="hljs-number">0</span>] * <span class="hljs-number">21</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>)]<br>dp[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span> <span class="hljs-comment">#状态只访问过一号楼且现在在一号楼有一种方案</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>        <span class="hljs-keyword">if</span> i &gt;&gt; j &amp; <span class="hljs-number">1</span>:<span class="hljs-comment">#判断j是否在i这个状态中被访问过</span><br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">21</span>):<br>                <span class="hljs-keyword">if</span> tu[j + <span class="hljs-number">1</span>][k + <span class="hljs-number">1</span>] == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> i &gt;&gt; k &amp; <span class="hljs-number">1</span>:<br>                    dp[i][j] += dp[i - (<span class="hljs-number">1</span> &lt;&lt; j)][k]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>(dp[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) - <span class="hljs-number">1</span>]) - dp[(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">21</span>) - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>])<br><br></code></pre></td></tr></table></figure><p>得出最终结果：881012367360</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>状态压缩</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端交互</title>
    <link href="/2022/12/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/"/>
    <url>/2022/12/25/%E5%89%8D%E5%90%8E%E7%AB%AF%E4%BA%A4%E4%BA%92/</url>
    
    <content type="html"><![CDATA[<p>本文是对前后端交互的简单介绍(ajax fetch 等知识)</p><span id="more"></span><h3 id="一-ajax-async异步-js-and-xml"><a href="#一-ajax-async异步-js-and-xml" class="headerlink" title="一. ajax(async异步 js and xml)"></a>一. ajax(async异步 js and xml)</h3><blockquote><ol><li><p>流程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1. 创建XHR</span><br><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br><span class="hljs-comment">//2. 配置过程</span><br><span class="hljs-comment">// open(&quot;请求方式&quot;,&quot;请求地址&quot;,是否异步)</span><br><span class="hljs-comment">//第三个参数 true为异步 效果为接收数据函数和之后的东西异步执行即使接受没完成后面也可以继续执行</span><br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;...&quot;</span>)<br><span class="hljs-comment">//3. send</span><br>xhr.<span class="hljs-title function_">send</span>()<br><span class="hljs-comment">//4. 接收数据 注册一个事件</span><br>xhr.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123; <span class="hljs-comment">//解析完成 且 找到页面</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(xhr.<span class="hljs-property">responseText</span>) <span class="hljs-comment">//字符串</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span> &amp;&amp; xhr.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>)&#123;<br>        location.<span class="hljs-property">href</span> = <span class="hljs-string">&quot;404.html&quot;</span> <span class="hljs-comment">//没有找到页面</span><br>    &#125;<br>&#125;<br><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//不需要判断readyState了 走到4时再进来</span><br>    <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br>        ...<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> === <span class="hljs-number">404</span>)&#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>请求方式</p><ul><li><p>get 获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>,<span class="hljs-string">&quot;http://localhost:3000/users&quot;</span>)<br><span class="hljs-comment">//xhr.open(&quot;GET&quot;,&quot;http://localhost:3000/users?username=xing&quot;) 查询参数</span><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(xhr.<span class="hljs-property">status</span> === <span class="hljs-number">200</span>)&#123;<br>       <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>))<br>    &#125;<br>&#125;<br>xhr.<span class="hljs-title function_">send</span>()<br></code></pre></td></tr></table></figure></li><li><p>post 提交数据</p><ul><li><p>post username&#x3D;kai&amp;password&#x3D;123</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-string">`username=xing&amp;password=123`</span>)<br></code></pre></td></tr></table></figure></li><li><p>post {“username”:”kai”,”password”:”123”}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json&quot;</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xing&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;123&quot;</span><br>&#125;))<br></code></pre></td></tr></table></figure></li></ul></li><li><p>put 更新数据</p><p>put 会全部覆盖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;PUT&quot;</span>,<span class="hljs-string">&quot;http://localhost:3000/users/1&quot;</span>) <span class="hljs-comment">//, 1表示想修改谁</span><br>xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-regexp">/^2\d&#123;2&#125;$/</span>.<span class="hljs-title function_">test</span>(xhr.<span class="hljs-property">status</span>))&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>))<br>    &#125;<br>&#125;<br>xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json&quot;</span>)<br>xhr.<span class="hljs-title function_">send</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>    <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;xing&quot;</span>,<br>    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1234&quot;</span><br>&#125;))<br></code></pre></td></tr></table></figure><p>patch 部分修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;PATCH&quot;</span>,<span class="hljs-string">&quot;http://localhost:3000/users/1&quot;</span>) <span class="hljs-comment">//, 1表示想修改谁</span><br></code></pre></td></tr></table></figure></li><li><p>delete 删除信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;DELETE&quot;</span>,<span class="hljs-string">&quot;http://localhost:3000/users/1&quot;</span>) <span class="hljs-comment">//, 1表示想删除谁</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>封装ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">queryStringify</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> obj) str += <span class="hljs-string">`<span class="hljs-subst">$&#123;k&#125;</span>=<span class="hljs-subst">$&#123;obj[k]&#125;</span>&amp;`</span><br>    <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">1</span>)<br>&#125;<br><span class="hljs-comment">// 封装 ajax</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">ajax</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-keyword">let</span> defaultoptions = &#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">data</span>: &#123;&#125;,<br>        <span class="hljs-attr">headers</span>: &#123;&#125;,<br>        <span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        &#125;,<br>        <span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">err</span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> &#123;url, method, <span class="hljs-keyword">async</span>, data, headers, success, error&#125; = &#123;<br>        ...defaultoptions,<br>        ...options<br>    &#125;<br>    <span class="hljs-comment">// console.log(headers[&quot;Content-Type&quot;])</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> data === <span class="hljs-string">&#x27;object&#x27;</span> &amp;&amp; headers[<span class="hljs-string">&quot;Content-Type&quot;</span>]?.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;json&quot;</span>) &gt; -<span class="hljs-number">1</span>) &#123;<br>        data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data)<br>        <span class="hljs-comment">// console.log(1111,data)</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        data = <span class="hljs-title function_">queryStringify</span>(data)<br>        <span class="hljs-comment">// console.log(222,data)</span><br>    &#125;<br>    <span class="hljs-comment">// 如果是 get 请求, 并且有参数, 那么直接组装一下 url 信息</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^get$/i</span>.<span class="hljs-title function_">test</span>(method) &amp;&amp; data) url += <span class="hljs-string">&#x27;?&#x27;</span> + data<br>    <span class="hljs-comment">// 发送请求</span><br>    <span class="hljs-keyword">const</span> xhr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>()<br>    xhr.<span class="hljs-title function_">open</span>(method, url, <span class="hljs-keyword">async</span>)<br>                  <br>    xhr.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^2\d&#123;2&#125;$/</span>.<span class="hljs-title function_">test</span>(xhr.<span class="hljs-property">status</span>)) &#123;<br>            <span class="hljs-title function_">error</span>(<br>                <span class="hljs-string">&quot;错误状态码:&quot;</span> + xhr.<span class="hljs-property">status</span><br>            )<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        <span class="hljs-comment">// 执行解析</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">let</span> result = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xhr.<span class="hljs-property">responseText</span>)<br>            <span class="hljs-title function_">success</span>(result)<br>        &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>            <span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;解析失败 ! 因为后端返回的结果不是 json 格式字符串&#x27;</span>)<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 设置请求头内的信息</span><br>    <span class="hljs-comment">// console.log(headers)</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> k <span class="hljs-keyword">in</span> headers) xhr.<span class="hljs-title function_">setRequestHeader</span>(k, headers[k])<br>    <span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^get$/i</span>.<span class="hljs-title function_">test</span>(method)) &#123;<br>        xhr.<span class="hljs-title function_">send</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        xhr.<span class="hljs-title function_">send</span>(data)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">ajax</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://localhost:3000/users/2&quot;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;kai&quot;</span>,<br>        <span class="hljs-attr">password</span>:<span class="hljs-string">&quot;123&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;put&quot;</span>,<br>    <span class="hljs-attr">headers</span>:&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/json&quot;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="二-Promise"><a href="#二-Promise" class="headerlink" title="二. Promise"></a>二. Promise</h3><blockquote><ol><li><p>语法</p><p>promise是一个构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">resolve,reject</span>)&#123;<br>    <span class="hljs-comment">//成功兑现</span><br>    <span class="hljs-title function_">resolve</span>()<br>&#125;)<br>q.<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//兑现承诺 这个函数被执行</span><br>    ...<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-comment">//拒绝承诺 这个函数被执行</span><br>    ...<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>封装ajax</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">pajax</span>(<span class="hljs-params">options</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span> (<span class="hljs-function">(<span class="hljs-params">resolve,reject</span>) =&gt;</span> &#123;<br>       <span class="hljs-title function_">ajax</span>(&#123;<br>           ...options,<br>            <span class="hljs-title function_">success</span>(<span class="hljs-params">res</span>)&#123;<br>                <span class="hljs-title function_">resolve</span>(res)<br>            &#125;,<br>            <span class="hljs-title function_">error</span>(<span class="hljs-params">err</span>)&#123;<br>                <span class="hljs-title function_">reject</span>(err)<br>            &#125;<br>       &#125;)       <br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>相当于嵌套改链式的感觉</p></li><li><p>判断多个执行结束</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">q1  q1 两个promise对象<br><span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">all</span>([q1,q2]).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;两个都结束&quot;</span>)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="三-async-和-await"><a href="#三-async-和-await" class="headerlink" title="三. async 和 await"></a>三. async 和 await</h3><blockquote><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">//async只影响内部</span><br>    <span class="hljs-comment">// 同步代码 无意义或 promise对象</span><br>    <span class="hljs-comment">//await console.log(111)  //await 必须等它执行完再执行下一个</span><br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">pajax</span>(&#123;  <span class="hljs-comment">//本来因为promise异步在回调之前执行了222 </span><br>        ...<br>    &#125;)<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>作用 用同步写法来搞定异步 适合链式</p></li></ol></blockquote><h3 id="四-fetch"><a href="#四-fetch" class="headerlink" title="四. fetch"></a>四. fetch</h3><blockquote><ol><li><p>目的</p><p>XMLHttpRequest 粗糙 fetch给它换壳儿</p></li><li><p>使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;地址&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <span class="hljs-comment">//res包括状态码等</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>()<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br>                  <br><span class="hljs-comment">//传参</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">`...?username=<span class="hljs-subst">$&#123;username&#125;</span>`</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123; <br>    <span class="hljs-keyword">if</span>(re.<span class="hljs-property">OK</span>)<br>    <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>()<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//拒绝承诺</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(&#123;  <span class="hljs-comment">//接受error</span><br>            <span class="hljs-attr">status</span>:res.<span class="hljs-property">status</span>,<br>            <span class="hljs-attr">statusText</span>:res.<span class="hljs-property">statusText</span><br>        &#125;)<br>    &#125;        <br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br><span class="hljs-comment">//post</span><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;...&quot;</span>,&#123;<br>    <span class="hljs-attr">method</span>:<span class="hljs-string">&quot;POST&quot;</span>,<br>    <span class="hljs-attr">headers</span>:&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>:<span class="hljs-string">&quot;username=...&amp;...&quot;</span> <span class="hljs-comment">//格式要严格与上面headers对应</span><br>                  <br>    <span class="hljs-comment">//json格式</span><br>    <span class="hljs-attr">headers</span>:&#123;<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/json&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">body</span>:<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123;<br>      <span class="hljs-attr">username</span>:<span class="hljs-string">&quot;...&quot;</span>,<br>        ...<br>    &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="五-cookie"><a href="#五-cookie" class="headerlink" title="五.cookie"></a>五.cookie</h3><blockquote><ol><li><p>语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">savebtn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;username=kai&quot;</span> <span class="hljs-comment">//格式为键值对</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">&quot;...=...&quot;</span><span class="hljs-comment">//一条一条存</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>特点</p><p>内层的可以访问外层 外层不可访问内层</p><p>关闭浏览器就无了</p></li><li><p>调整过期时间</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>date.<span class="hljs-title function_">setMinutes</span>(date.<span class="hljs-title function_">getMinutes</span>()+<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = <span class="hljs-string">`username=kai;expires=<span class="hljs-subst">$&#123;date.toUTCString&#125;</span>`</span><span class="hljs-comment">//时区问题</span><br></code></pre></td></tr></table></figure></li><li><p>其他属性</p><ul><li>HttpOnly 设置该属性 前端将无法获取到该条cookie 后端可设置</li></ul></li><li><p>删除cookie</p><p>思路：重新设置过期时间</p></li></ol></blockquote><h3 id="六-jsonp-JSON-with-Padding"><a href="#六-jsonp-JSON-with-Padding" class="headerlink" title="六. jsonp(JSON with Padding)"></a>六. jsonp(JSON with Padding)</h3><blockquote><ol><li><p>简介</p><p>可以让网页从别的域名那获取资料 跨域读取数据</p><p>同源策略 ：同域名 同端口号 同协议</p><p>​不符合该策略的 浏览器为了安全 会组织请求</p><p>解决：</p><ol><li><p>cors 由后端设置 Access-Control-Allow-Origin:</p></li><li><p>jsonp 前后端协作</p><p>原理:</p><p>​动态创建script标签 src属性没有跨域限制</p><p>​指向一个接口 接口返回的格式一定是 **( ) 函数表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>&#125;<br>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> oscript = docunment.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;script&quot;</span>)<br>    oscript.<span class="hljs-property">src</span> = <span class="hljs-string">&quot;...&quot;</span><span class="hljs-comment">//未来地址</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(oscript)<br>&#125;<br>                              <br>未来地址里内容必须是函数形式 需要后端配合<br><span class="hljs-title function_">test</span>(...)   <br></code></pre></td></tr></table></figure></li></ol></li><li><p>缺点</p><p>多次添加标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">oscript.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)&#123;<br>    oscript.<span class="hljs-title function_">remove</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>只能get请求</p></li></ol></blockquote><h3 id="七-函数闭包"><a href="#七-函数闭包" class="headerlink" title="七. 函数闭包"></a>七. 函数闭包</h3><blockquote><ol><li><p>函数结果保留条件</p><p>函数有返回值</p><p>返回值必须是复杂类型</p><p>而且要赋值给外面的变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;11&quot;</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<br>        <span class="hljs-attr">b</span>:<span class="hljs-number">2</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj1 = <span class="hljs-title function_">a</span>()  <span class="hljs-comment">//函数执行完后name被回收 对象留下</span><br><span class="hljs-keyword">var</span> obj2 = <span class="hljs-title function_">a</span>()<br><span class="hljs-comment">//obj1与obj2 不相同</span><br><span class="hljs-comment">//如果想回收</span><br>obj1 = <span class="hljs-literal">null</span>   <span class="hljs-comment">//对象没人管了 也被回收</span><br></code></pre></td></tr></table></figure></li><li><p>闭包</p><p><strong>函数内部返回一个函数</strong></p><p>被外界引用</p><p>这个函数就不会被销毁</p><p>内部函数所用到的外部函数的变量也不会被销毁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">outer</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> name = <span class="hljs-string">&quot;11&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//函数内部返回一个函数</span><br>        <span class="hljs-keyword">return</span> name+<span class="hljs-string">&quot;11&quot;</span>  <span class="hljs-comment">//内部函数所用到的外部函数的变量也不会被销毁</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fun = <span class="hljs-title function_">outer</span>()    <span class="hljs-comment">//被外界引用</span><br></code></pre></td></tr></table></figure><p>优点 让临时变量永驻内存</p><p>缺点 内存泄漏 用完 fun &#x3D; null;</p><p>例: 函数柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FetchContainer</span>(<span class="hljs-params">url</span>)&#123; <span class="hljs-comment">//url永驻内存了</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url+path)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> fetcha = <span class="hljs-title class_">FetchContainer</span>(<span class="hljs-string">&quot;http://www.a.com&quot;</span>)<br><span class="hljs-title function_">fetcha</span>(<span class="hljs-string">&quot;/aaa&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res))<br><span class="hljs-title function_">fetcha</span>(<span class="hljs-string">&quot;/bbb&quot;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>res.<span class="hljs-title function_">json</span>()).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res))<br><span class="hljs-comment">//用完之后赋空</span><br>fetcha = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作DOM</title>
    <link href="/2022/11/21/%E6%93%8D%E4%BD%9CDOM/"/>
    <url>/2022/11/21/%E6%93%8D%E4%BD%9CDOM/</url>
    
    <content type="html"><![CDATA[<p>本文对DOM节点操作的介绍，希望对您有所帮助</p><span id="more"></span><h3 id="一-获取元素"><a href="#一-获取元素" class="headerlink" title="一. 获取元素"></a>一. 获取元素</h3><blockquote><ul><li><p>非常规 </p><ul><li><p>html  document.documentElement</p><p>设置根节点font-size时可能用到</p></li><li><p>head document.head</p></li><li><p>body document.body</p></li></ul></li><li><p>常规</p><ul><li><p>id   document.getElementById()</p></li><li><p>class document.getElementsByClassName()</p><p>伪数组 像数组但不具备数组函数 有length值</p><p>可以转化 var ans &#x3D; Array.from(…)</p></li><li><p>标签 document.getElementsByTagName()</p></li><li><p>name document.getElementsByName()</p></li><li><p>querySelector </p><p>document.querySelector() 参数为在css中使用选择的方法</p><p>只会返回遇到的第一个</p></li><li><p>querySelectorAll</p><p>可以选出所有</p></li></ul></li></ul></blockquote><h3 id="二-操作元素属性"><a href="#二-操作元素属性" class="headerlink" title="二.操作元素属性"></a>二.操作元素属性</h3><blockquote><ul><li><p>自定义属性</p><p>约定 data-**</p><p>.dataset 可以获取 也可以在这上面加</p><p>删除用delete * <em>.dataset.</em> *</p><ul><li><p>增 改</p><p>setAttribute()</p></li><li><p>删</p><p>removeAtrribute()</p></li><li><p>获取</p><p>getAttribute()</p></li></ul></li><li><p>操作元素内容</p><ul><li><p>innerHtml</p><p>会解析</p></li><li><p>innerText</p><p>不解析html   获取的只有文本</p></li><li><p>value</p></li></ul></li><li><p>操作样式</p><ul><li><p>获取</p><ul><li><p>行内 .style.###</p><p>例如 background-color —–&gt; </p><p>​用中括号括起来.style[ ] &#x2F;  驼峰规则 .style.backgroundColor</p></li><li><p>内部样式 外部样式</p><p>getComputedStyle(参数为对象(id &#x2F; get函数获取)) 获取不能赋值写样式</p></li></ul></li><li><p>批量操作</p><ul><li>.className 操作dom的类名 修改的话是覆盖原来的</li></ul><p>​                  可以使用 +&#x3D;   重复的也会直接加进去</p><ul><li>.classList <ul><li>增加 add  重复的不会加进去</li><li>删除 remove</li><li>切换 <strong>toggle</strong> 有就删掉 没有就加</li></ul></li></ul></li></ul></li></ul></blockquote><h3 id="三-DOM节点"><a href="#三-DOM节点" class="headerlink" title="三. DOM节点"></a>三. DOM节点</h3><blockquote><ul><li><p>元素节点 getElementBy..</p><p>childNodes 所有节点  children 所有元素</p><p>​nodeType 属性返回节点类型。</p><p>​如果节点是一个元素节点，nodeType 属性返回 1。</p><p>​如果节点是属性节点, nodeType 属性返回 2。</p><p>​如果节点是一个文本节点，nodeType 属性返回 3。</p><p>​如果节点是一个注释节点，nodeType 属性返回 8。</p><p>​nodeName </p><p>​nodeValue 属性节点的叫属性值 文本节点是文本内容 元素节点没有值</p><p>firstChild  firstElementChild</p><p>lastChild lastElementChild</p><p>previousSibling  previousElementSibling 找哥哥</p><p>nextSibling nextElementSibling 找弟弟</p><p>parentNode parentElement 差不多 </p></li><li><p>属性节点 getAttribute</p><p>id.attributes[1]</p></li><li><p>文本节点 innerText</p></li></ul></blockquote><h3 id="四-操作DOM节点"><a href="#四-操作DOM节点" class="headerlink" title="四. 操作DOM节点"></a>四. 操作DOM节点</h3><blockquote><ol><li><p>节点操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建节点</span><br><span class="hljs-keyword">var</span> odiv = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>)<br><span class="hljs-comment">//box 为父节点id</span><br><span class="hljs-comment">//插入节点</span><br>box.<span class="hljs-title function_">appendChild</span>(odiv)<br><span class="hljs-comment">// insertBefore(要插入的节点，谁的前面) 可以实现在任何地方插入</span><br>         <br><span class="hljs-comment">//删除节点</span><br><span class="hljs-comment">// removeChild(节点对象)</span><br>box.<span class="hljs-title function_">removeChild</span>()<br>box.<span class="hljs-title function_">remove</span>()  <span class="hljs-comment">// 自我销毁以及后代</span><br>         <br><span class="hljs-comment">//替换节点 replaceChild(新的节点，老的节点)</span><br>         <br><span class="hljs-comment">//克隆 </span><br><span class="hljs-comment">//cloneNode() 默认参数为false 不包括孩子 </span><br>         <br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="五-获取元素信息"><a href="#五-获取元素信息" class="headerlink" title="五. 获取元素信息"></a>五. 获取元素信息</h3><blockquote><p><strong>懒加载</strong></p><ul><li><p>获取元素的占地面积</p><p>offsetWidth&#x2F;offsetHeight  content+padding+border</p><p>注意：单位 数字类型 </p><p>​display:none  无法拿到值</p><p>clientWidth&#x2F;clientHeight content+padding 不包括border</p></li><li><p>获取元素偏移量</p><p>offsetLeft&#x2F;offsetTop </p><p>注意：偏移量是相对有定位的父级 </p><p>如果父级元素都没有定位，偏移量相对于body</p><p>clientLeft&#x2F;clientTop  了解即可</p><p>计算的是距离自己左上角(也就是边框宽)</p></li><li><p>获取可视窗口的尺寸</p><p>window.innerHeight   &#x2F;    innerWidth 获取的包含滚动条</p><p>document.documentElement.clientWidth  &#x2F;   clientHeight 不包含滚动条</p></li></ul></blockquote><h3 id="六-事件"><a href="#六-事件" class="headerlink" title="六. 事件"></a>六. 事件</h3><blockquote><ol><li><p>绑定事件</p><ul><li>.onclick &#x3D; …</li><li>.addElementListener(“click”,function(){…})</li></ul></li><li><p>解绑事件</p><ul><li>this.onclick &#x3D; none</li><li>.removeElementListener(“onclick”,….[函数名字])</li></ul></li><li><p>事件类型</p><ul><li><p>鼠标事件</p><ul><li><p>click</p></li><li><p>dbclick 双击</p></li><li><p>contextmenu 右键单击 常用于自定义右键菜单</p></li><li><p>mousedown 鼠标按下</p></li><li><p>mousemove 鼠标在身上移动</p></li><li><p>mouseup 鼠标抬起</p></li><li><p>移入移出</p><p>mouseover mouseout</p><p>在孩子上也会触发 </p><p>mouseenter mouseleave</p><p>只会在自己上触发</p></li></ul></li><li><p>键盘事件</p><ul><li>keydown 按下键盘 </li><li>keyup 抬起键盘</li></ul></li><li><p>表单事件</p><ul><li><p>获取焦点 focus</p></li><li><p>失去焦点 blur</p></li><li><p>change 获取焦点和失去焦点时内容不一样才会触发</p></li><li><p>input 适用于类似百度搜索 边输入边模糊查询</p></li><li><p>submit 提交  reset 重置 </p><p>必须要有form表单结构</p><p>两者都得给form绑</p></li></ul></li><li><p>触摸事件 针对移动端</p><ul><li>touchstart</li><li>touchmove</li><li>touchend</li></ul></li></ul></li><li><p>事件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">username.<span class="hljs-property">onkeyup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;<br>    <span class="hljs-comment">//事件对象也就是形参</span><br>&#125;<br></code></pre></td></tr></table></figure><p>鼠标事件</p><p>event.clientX &#x2F; clientY  距离可视窗口的值</p><p>event.pageX &#x2F; pageY 相对于文档的</p><p>event.offsetX &#x2F; offsetY 相对于自己盒子(触发元素)的左上角的距离</p><p>​做鼠标跟随时有可能会误触到别的盒子可以设置pointer-events &#x3D; none</p></li><li><p>阻止事件传播</p><p>stopPropagation()</p><p>阻止默认行为 例如 鼠标右键</p><p> dom0 return false</p><p> dom2 preventDefault()</p></li><li><p>事件委托</p><p>利用冒泡机制 </p><p>把子元素的事件委托给父元素来做</p></li></ol></blockquote><h3 id="七-正则表达式"><a href="#七-正则表达式" class="headerlink" title="七. 正则表达式"></a>七. 正则表达式</h3><blockquote><ol><li><p>格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字面量</span><br><span class="hljs-keyword">var</span> reg = <span class="hljs-regexp">/abc/</span>  <span class="hljs-comment">//包含abc 这个串</span><br><span class="hljs-comment">//内置构造函数</span><br><span class="hljs-keyword">var</span> reg2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&quot;abc&quot;</span>)<br></code></pre></td></tr></table></figure></li><li><p>元字符</p><ul><li><p>一位数字 &#x2F;\d&#x2F;</p></li><li><p>一位非数字 &#x2F;\D&#x2F;</p></li><li><p>一位空白(空格 缩进 换行) &#x2F;\s&#x2F;</p></li><li><p>一位非空白  &#x2F;\S&#x2F;</p></li><li><p>字母数字下划线 &#x2F;\w&#x2F;</p></li><li><p>一位非字母数字下划线 &#x2F;\W&#x2F;</p></li><li><p>&#x2F;.&#x2F; 任意符号 不包括换行</p></li><li><p>转义字符 .</p></li><li><p>边界符 </p><ul><li><p>^ 开始 </p><p>&#x2F;^\d&#x2F; 开头必须是数字</p></li><li><p>$ 结尾</p><p>&#x2F;\d$&#x2F; 结尾必须是数字</p></li></ul></li><li><p>限定符</p><p>只能修饰紧挨的一个</p><ul><li>*代表0-多次</li><li>+代表1-多次</li><li>？代表0-1</li><li>{n} 指定次数</li><li>{n,} 大于等于n</li></ul></li><li><p>特殊符号</p><ul><li>( ) 括起来表示一个整体</li><li>|  或者  管的是两边的两个整体</li><li>[ ]代表一个  例：[abcdf] 代表一个出现就行 </li><li>[^abc] 不包含abc范围内</li></ul></li></ul></li><li><p>捕获</p><p>全局标识符 g 全局 克服懒惰  i 不区分大小写</p><p>reg.exec(“”)</p></li><li><p>贪婪特性 加？克服</p><p>&#x2F;\d{1,4}&#x2F; 选择时会尽量多选 加？之后只选择最小值</p></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM节点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery</title>
    <link href="/2022/11/20/jQuery/"/>
    <url>/2022/11/20/jQuery/</url>
    
    <content type="html"><![CDATA[<p>本文对jQuery的一些简单用法进行介绍，希望对您有所帮助</p><span id="more"></span><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h3 id="一-介绍"><a href="#一-介绍" class="headerlink" title="一. 介绍"></a>一. 介绍</h3><blockquote><ol><li><p>前端库 方法库</p></li><li><p>优点：</p><p>优质的选择器</p><p>好用的隐式迭代</p><p>强大的链式编程</p></li></ol></blockquote><h3 id="二-选择器"><a href="#二-选择器" class="headerlink" title="二. 选择器"></a>二. 选择器</h3><blockquote><ol><li><p>基本选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(<span class="hljs-string">&quot;ul li&quot;</span>)) <span class="hljs-comment">//返回伪数组</span><br></code></pre></td></tr></table></figure></li><li><p>特殊选择器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li:first&quot;</span>)<br>$(<span class="hljs-string">&quot;ul li:fast&quot;</span>)<br>$(<span class="hljs-string">&quot;ul li:eq(1)&quot;</span>)<br>$(<span class="hljs-string">&quot;u li:odd&quot;</span>) <span class="hljs-comment">//奇数索引</span><br></code></pre></td></tr></table></figure></li><li><p>筛选方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">first</span>()<br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">3</span>)<br>...<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="三-操作"><a href="#三-操作" class="headerlink" title="三. 操作"></a>三. 操作</h3><blockquote><h4 id="3-1-操作样式"><a href="#3-1-操作样式" class="headerlink" title="3.1 操作样式"></a>3.1 操作样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;...&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;属性名&quot;</span>) <span class="hljs-comment">//可以获取行内和style标签中的</span><br>$(<span class="hljs-string">&quot;...&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;属性名&quot;</span>,<span class="hljs-string">&quot;属性值&quot;</span>)<br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;color&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>)<span class="hljs-comment">//隐式迭代</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">css</span>(&#123;<span class="hljs-attr">width</span>:100px,<span class="hljs-attr">height</span>:<span class="hljs-number">300</span>,<span class="hljs-attr">backgroundColor</span>:<span class="hljs-string">&quot;yellow&quot;</span>&#125;)<br><span class="hljs-comment">//都加到行内 </span><br></code></pre></td></tr></table></figure><h4 id="3-2-操作class"><a href="#3-2-操作class" class="headerlink" title="3.2 操作class"></a>3.2 操作class</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;active&quot;</span>)<br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;active&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-3-操作内容"><a href="#3-3-操作内容" class="headerlink" title="3.3 操作内容"></a>3.3 操作内容</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">html</span>()<span class="hljs-comment">//没参数是获取</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;bbb&quot;</span>,<span class="hljs-string">&quot;ccc&quot;</span>]<br><span class="hljs-keyword">var</span> str = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="hljs-string">`&lt;li&gt;<span class="hljs-subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)<br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">html</span>(str) <span class="hljs-comment">//有参数就是插入</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">text</span>()<br>$(<span class="hljs-string">&quot;input&quot;</span>).<span class="hljs-title function_">val</span>()<span class="hljs-comment">//获取input输入值 多个的会返回第一个的值</span><br></code></pre></td></tr></table></figure><h4 id="3-4-操作属性"><a href="#3-4-操作属性" class="headerlink" title="3.4 操作属性"></a>3.4 操作属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//只是约定</span><br><span class="hljs-comment">//attr() 操作自定义 和 原生</span><br><span class="hljs-comment">//prop() 只能操作原生属性</span><br><span class="hljs-comment">//removeProp 无法删除原生属性</span><br><span class="hljs-comment">//index() 第几个</span><br></code></pre></td></tr></table></figure><h4 id="3-5-操作偏移量"><a href="#3-5-操作偏移量" class="headerlink" title="3.5 操作偏移量"></a>3.5 操作偏移量</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//offset 相对于文档流 支持设置</span><br><span class="hljs-comment">//position 相对于有定位的父元素 没有就是0 不支持设置</span><br></code></pre></td></tr></table></figure><h4 id="3-6-操作尺寸"><a href="#3-6-操作尺寸" class="headerlink" title="3.6 操作尺寸"></a>3.6 操作尺寸</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//内容宽高</span><br>.<span class="hljs-title function_">width</span>()<br><span class="hljs-comment">//内容宽高 + padding</span><br>.<span class="hljs-title function_">innerWidth</span>()<br><span class="hljs-comment">//内容宽高 + padding + border</span><br>.<span class="hljs-title function_">outerWidth</span>()<br><span class="hljs-comment">//内容宽高 + padding + border + margin</span><br>.<span class="hljs-title function_">outerWidth</span>(<span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><h4 id="3-7-事件"><a href="#3-7-事件" class="headerlink" title="3.7 事件"></a>3.7 事件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//基本用法</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<br>&#125;)<br><span class="hljs-comment">//事件委托</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-string">&quot;button&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br><span class="hljs-comment">//button 表示从button冒上来</span><br>...<br>&#125;)<br><span class="hljs-comment">//on 传参数 必须是对象</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-string">&quot;button&quot;</span>,&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kai&quot;</span>&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>...<br>&#125;)<br><span class="hljs-comment">//一次性事件</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">one</span>(<span class="hljs-string">&quot;click&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">//点完之后再也不会触发</span><br>...<br>&#125;)<br><span class="hljs-comment">//常用的方法函数</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<br>&#125;).<span class="hljs-title function_">mouseover</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//链式写法</span><br>...<br>&#125;)<br><span class="hljs-comment">//解绑</span><br>$(<span class="hljs-string">&quot;ul li&quot;</span>).<span class="hljs-title function_">off</span>(<span class="hljs-string">&quot;click&quot;</span>)<span class="hljs-comment">//没参数的话全部事件都清掉</span><br><span class="hljs-comment">//触发事件</span><br><span class="hljs-title function_">trigger</span>(<span class="hljs-string">&quot;click&quot;</span>)<span class="hljs-comment">//自动触发事件 抢票</span><br></code></pre></td></tr></table></figure><h4 id="3-8-动画"><a href="#3-8-动画" class="headerlink" title="3.8 动画"></a>3.8 动画</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//基本动画</span><br><span class="hljs-number">1.</span>显示隐藏<br><span class="hljs-number">1.1</span> <span class="hljs-title function_">show</span>() <span class="hljs-title function_">hide</span>()<span class="hljs-comment">//改动宽度高度和透明度 从右下角到左上角</span><br><span class="hljs-title function_">show</span>(<span class="hljs-string">&quot;time&quot;</span>,<span class="hljs-string">&quot;动画效果[swing/linear]&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//回调函数</span><br>&#125;)<br><span class="hljs-title function_">toggle</span>() 切换效果<br><span class="hljs-number">1.2</span> <span class="hljs-title function_">slideDown</span>() <span class="hljs-title function_">slideUp</span>() <span class="hljs-title function_">slideToggle</span>() <span class="hljs-comment">//从下到上</span><br><span class="hljs-number">1.3</span> <span class="hljs-title function_">fadeIn</span>() <span class="hljs-title function_">fadeOut</span>() <span class="hljs-title function_">fadeToggle</span>()  <span class="hljs-title function_">fadeTo</span>(可以指定透明度) <span class="hljs-comment">//改变透明度 </span><br><span class="hljs-comment">//综合动画</span><br><span class="hljs-number">1.</span>没有过渡样式 不支持<br><span class="hljs-number">2.</span>颜色变化 不支持<br><span class="hljs-number">3.</span>transform 不支持<br><br>.<span class="hljs-title function_">animate</span>(&#123;<br><span class="hljs-attr">left</span>:<span class="hljs-string">&quot;100px&quot;</span>,<br>...<br>&#125;,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;linear&quot;</span>,<span class="hljs-function">()=&gt;</span>&#123;<br>...<br>&#125;)<br><span class="hljs-comment">//结束动画</span><br><span class="hljs-title function_">stop</span>() <span class="hljs-comment">//运动到哪儿停哪儿 其他动画函数之前使用</span><br><span class="hljs-title function_">finish</span>() <span class="hljs-comment">//立即到结束状态</span><br></code></pre></td></tr></table></figure><h4 id="3-9-操作节点"><a href="#3-9-操作节点" class="headerlink" title="3.9 操作节点"></a>3.9 操作节点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//创建 插入</span><br><span class="hljs-keyword">var</span> odiv = $(<span class="hljs-string">&quot;&lt;div&gt;hello&lt;/div&gt;&quot;</span>)<br><span class="hljs-comment">//子插</span><br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">append</span>(odiv)  后面追加<br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">prepend</span>(odiv) 前插<br><br>$(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;b&gt;first div&lt;/b&gt;&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;kai&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>).<span class="hljs-title function_">appendTo</span>($(<span class="hljs-string">&quot;选择&quot;</span>)) <br>$(<span class="hljs-string">&quot;&lt;div&gt;&quot;</span>).<span class="hljs-title function_">html</span>(<span class="hljs-string">&quot;&lt;b&gt;firstdiv&lt;/b&gt;&quot;</span>).<span class="hljs-title function_">addClass</span>(<span class="hljs-string">&quot;kai&quot;</span>).<span class="hljs-title function_">css</span>(<span class="hljs-string">&quot;background&quot;</span>,<span class="hljs-string">&quot;red&quot;</span>).<span class="hljs-title function_">prependTo</span>($(<span class="hljs-string">&quot;选择&quot;</span>)) <br><span class="hljs-comment">//兄弟插</span><br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">before</span>(odiv)  插在该选择元素的前面<br>odiv.<span class="hljs-title function_">insertBefore</span>($(<span class="hljs-string">&quot;选择&quot;</span>)) <br><br><span class="hljs-title function_">after</span>() <span class="hljs-title function_">insertAfter</span>()<br><br><span class="hljs-comment">//删除</span><br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">eq</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">remove</span>()  干掉自己<br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">empty</span>()         清空内部<br><br><span class="hljs-comment">//替换</span><br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">replaceWith</span>()   不止一个也会都替换<br>odiv.<span class="hljs-title function_">replaceAll</span>($(<span class="hljs-string">&quot;选择&quot;</span>)) <br><br><span class="hljs-comment">//克隆</span><br>$(<span class="hljs-string">&quot;选择&quot;</span>).<span class="hljs-title function_">clone</span>().<span class="hljs-title function_">prop</span>(<span class="hljs-string">&quot;id&quot;</span>,<span class="hljs-string">&quot;box2&quot;</span>).<span class="hljs-title function_">insertAfter</span>($(<span class="hljs-string">&quot;选择&quot;</span>))<br>clone的第一个参数 <span class="hljs-literal">true</span> 代表事件也克隆<br>clone的第二个参数 <span class="hljs-literal">true</span> 代表孩子传不传<br>flase ture 组合不可以<br></code></pre></td></tr></table></figure></blockquote><h3 id="四-ajax"><a href="#四-ajax" class="headerlink" title="四. ajax"></a>四. ajax</h3><blockquote><h4 id="1-综合发送ajax请求"><a href="#1-综合发送ajax请求" class="headerlink" title="1. 综合发送ajax请求"></a>1. 综合发送ajax请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><br>&#125;,<br><span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span>,       <br><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;,<br><span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br>&#125;)<br>promise风格<br>$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">data</span>:&#123;<br><br>&#125;,<br><span class="hljs-attr">method</span>:<span class="hljs-string">&quot;get&quot;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>...<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<br>...<br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="2-get-x2F-post"><a href="#2-get-x2F-post" class="headerlink" title="2. get&#x2F;post"></a>2. get&#x2F;post</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;url&quot;</span>,&#123;<br>参数<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="3-jsonp"><a href="#3-jsonp" class="headerlink" title="3. jsonp"></a>3. jsonp</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&quot;&quot;</span>,<br><span class="hljs-attr">dataType</span>:<span class="hljs-string">&quot;jsonp&quot;</span>,<br><span class="hljs-attr">jsonp</span>:<span class="hljs-string">&quot;jsoncallback&quot;</span>,<br><span class="hljs-attr">jsonCallback</span>:<span class="hljs-string">&quot;kaikai&quot;</span>, <span class="hljs-comment">//可以不用写 会自动创</span><br><span class="hljs-attr">success</span>:<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;<br>  ...<span class="hljs-comment">//不屑callback走success</span><br>&#125;<br>&#125;)<span class="hljs-comment">//或者使用.then调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">kaikai</span>(<span class="hljs-params">res</span>)&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-钩子函数"><a href="#4-钩子函数" class="headerlink" title="4. 钩子函数"></a>4. 钩子函数</h4><p>钓鱼 放钩子后等🐟咬</p><p><strong>人性化loading</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxStart</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//第一个ajax发送前执行</span><br>&#125;)<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxSend</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//每一个ajax发送前执行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loading&quot;</span>)<br>&#125;)<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxSuccess</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//每一个ajax成功触发后执行</span><br>&#125;)<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxError</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//每一个ajax失败触发后执行</span><br>&#125;)<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxComplete</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//每一个ajax成功或者失败触发后执行</span><br>&#125;)<br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ajaxStop</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//当前页面作用域 最后一个ajax结束执行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;loading 结束&quot;</span>)<br>&#125;)<br><br>$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//所有dom节点加载完</span><br>&#125;)<br>简写为<br>$(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>...<span class="hljs-comment">//所有dom节点加载完</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><h3 id="五-深浅拷贝"><a href="#五-深浅拷贝" class="headerlink" title="五. 深浅拷贝"></a>五. 深浅拷贝</h3><blockquote><ol><li><p>基本数据类型赋值</p><img src="/2022/11/20/jQuery/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" class="" title="基本数据类型"><p>复杂数据类型</p><img src="/2022/11/20/jQuery/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" class="" title="复杂数据类型"></li><li><p>区别</p></li></ol><p>浅拷贝<strong>只复制指向某个对象的指针</strong>，而不复制对象本身，新旧对象还是共享同一块内存。但深拷贝会另外创造一个一模一样的对象，<strong>新对象跟原对象不共享内存</strong>，修改新对象不会改到原对象。</p><img src="/2022/11/20/jQuery/copy.png" class="" title="copy"><ol start="3"><li><p>浅copy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myobj1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kai&quot;</span>&#125;<br><span class="hljs-keyword">var</span> myobj2 = &#123;&#125;<br><span class="hljs-comment">//1.for循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> myobj1)&#123;<br>    myobj2[i] = myobj1[i]<br>&#125;<br><span class="hljs-comment">//2.解构函数</span><br><span class="hljs-keyword">var</span> myobj3 = &#123;...myobj1&#125;<br><span class="hljs-comment">//但是如果对象是多层无法解决</span><br>myobj4 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kai&quot;</span>,<span class="hljs-attr">location</span>:&#123;<span class="hljs-attr">city</span>:<span class="hljs-string">&quot;beijing&quot;</span>&#125;&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> myobj1)&#123;<br>    myobj2[i] = myobj4[i]  <span class="hljs-comment">//此时修改myobj2的location会都改变</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>深copy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js">myobj1 = &#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kai&quot;</span>,<span class="hljs-attr">location</span>:&#123;<span class="hljs-attr">city</span>:<span class="hljs-string">&quot;beijing&quot;</span>&#125;,<span class="hljs-attr">c</span>:[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]&#125;<br><span class="hljs-keyword">var</span> myobj2 = &#123;&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">o2,o1</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> o1)&#123;<br>        <span class="hljs-comment">//toString</span><br>        <span class="hljs-keyword">if</span>(o1[i].<span class="hljs-title function_">toString</span>() === <span class="hljs-string">`[object Object]`</span>)&#123;<br>            o2[i] = &#123;&#125;<br>            <span class="hljs-title function_">deepCopy</span>(o2[i],o1[i])<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(o1[i]) === <span class="hljs-string">`[object Array]`</span>)&#123;<br>            o2[i] = []<br>            <span class="hljs-title function_">deepCopy</span>(o2[i],o1[i])<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            o2[i] = o1[i]<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_">deepCopy</span>(myobj2,myobj1)<br><span class="hljs-comment">//深拷贝 copy-json</span><br>myobj2 = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(myobj1))<span class="hljs-comment">//遇到undefined 会丢失</span><br></code></pre></td></tr></table></figure></li><li><p>jquery copy</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">浅拷贝<br>$.<span class="hljs-title function_">extend</span>(myobj2,myobj1)<span class="hljs-comment">//可以有多个参数 都给myobj2</span><br>深拷贝<br>$.<span class="hljs-title function_">extend</span>(<span class="hljs-literal">true</span>,myobj2,myobj1)<span class="hljs-comment">//可以有多个参数 都给myobj2</span><br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="六-jquery-其他用法"><a href="#六-jquery-其他用法" class="headerlink" title="六. jquery 其他用法"></a>六. jquery 其他用法</h3><blockquote><ol><li><p>多库并存</p><p>交出控制权 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> kai = $.<span class="hljs-title function_">noConflict</span>(<span class="hljs-literal">true</span>)<span class="hljs-comment">//交出$,jQuery权 并把jQuery给到kai</span><br></code></pre></td></tr></table></figure></li><li><p>插件扩展</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">extend</span>(&#123;<br>    <span class="hljs-title function_">deepCopy</span>(<span class="hljs-params">o2,o1</span>)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> o1)&#123;<br>            <span class="hljs-comment">//toString</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(o1[i]) === <span class="hljs-string">`[object Object]`</span>)&#123;<br>                o2[i] = &#123;&#125;<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">deepCopy</span>(o2[i],o1[i])<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>(o1[i]) === <span class="hljs-string">`[object Array]`</span>)&#123;<br>                o2[i] = []<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">deepCopy</span>(o2[i],o1[i])<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                o2[i] = o1[i]<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;)<br>$.fn.<span class="hljs-title function_">extend</span>(&#123;<br>    ...<br>    <span class="hljs-title function_">f</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span> <span class="hljs-comment">//这样子可以后面接着链式调用</span><br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>轮播库</p><img src="/2022/11/20/jQuery/4.png" class="" width="4"></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jQuery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作业调度</title>
    <link href="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/"/>
    <url>/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了OS作业调度的三种算法(FCFS SJF HRN)，希望对您有所帮助</p><span id="more"></span><h3 id="一-实验目的"><a href="#一-实验目的" class="headerlink" title="一. 实验目的"></a>一. 实验目的</h3><blockquote><ol><li>掌握作业调度的基本思想</li><li>熟练使用各种作业调度算法描述的过程</li><li>掌握各种算法的优缺点</li><li>提高理论和实践结合的能力</li></ol></blockquote><h3 id="二-实验内容"><a href="#二-实验内容" class="headerlink" title="二. 实验内容"></a>二. 实验内容</h3><blockquote><ol><li>FCFS 先来先服务</li><li>SJF 最短作业优先</li><li>HRN 最高响应比优先算法</li></ol></blockquote><h3 id="三-实验环境"><a href="#三-实验环境" class="headerlink" title="三. 实验环境"></a>三. 实验环境</h3><blockquote><ol><li>实践平台 windows</li><li>编写环境 java</li><li>编译器 idea</li></ol></blockquote><h3 id="四-实验设计原理"><a href="#四-实验设计原理" class="headerlink" title="四. 实验设计原理"></a>四. 实验设计原理</h3><blockquote><ol><li><p>FCFS：先来先服务</p><p>根据作业进入的先后顺序来进行调度，最先进的最先执行</p></li><li><p>SJF：最短作业优先</p><p>根据执行所需的时间来确定下一个执行的作业</p></li><li><p>HRN：最高相应比优先</p><p>根据作业的响应比选出最高的那个对应的作业执行</p></li></ol></blockquote><h3 id="五-实验详细实现过程和算法流程"><a href="#五-实验详细实现过程和算法流程" class="headerlink" title="五. 实验详细实现过程和算法流程"></a>五. 实验详细实现过程和算法流程</h3><blockquote><ol><li><p>FCFS 先来先服务</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/FCFS.png" class="" title="FCFS"></li><li><p>SJF 最短作业优先</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/SJF.png" class="" title="SJF"></li><li><p>HRN 最高相应比优先</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/HRN.png" class="" title="HRN"></li></ol></blockquote><h3 id="六-实验调试与结果分析"><a href="#六-实验调试与结果分析" class="headerlink" title="六. 实验调试与结果分析"></a>六. 实验调试与结果分析</h3><blockquote><ol><li><p>FCFS</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/FCFS-test.png" class="" title="FCFS-test"></li><li><p>SJF</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/SJF-test.png" class="" title="SJF-test"></li><li><p>HRN</p><img src="/2022/11/20/%E4%BD%9C%E4%B8%9A%E8%B0%83%E5%BA%A6/HRN-test.png" class="" title="HRN-test"></li></ol></blockquote><h3 id="七-源代码"><a href="#七-源代码" class="headerlink" title="七. 源代码"></a>七. 源代码</h3><blockquote><ol><li><p>job类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">job</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> index;<span class="hljs-comment">//job序列号</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> arriveTime;<span class="hljs-comment">//到达时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> serviceTime;<span class="hljs-comment">//执行总时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-comment">//开始执行时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">finishTime</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-comment">//结束时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">turnTime</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-comment">//周转时间</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-variable">powerTime</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;<span class="hljs-comment">//带权周转时间</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">job</span><span class="hljs-params">(<span class="hljs-type">int</span> index,<span class="hljs-type">int</span> arriveTime, <span class="hljs-type">int</span> serviceTime)</span>&#123;<br>        <span class="hljs-built_in">this</span>.index = index;<br>        <span class="hljs-built_in">this</span>.arriveTime = arriveTime;<br>        <span class="hljs-built_in">this</span>.serviceTime = serviceTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;  &quot;</span>+index+<span class="hljs-string">&quot;      &quot;</span>+arriveTime+<span class="hljs-string">&quot;       &quot;</span>+serviceTime+<span class="hljs-string">&quot;         &quot;</span>+startTime+<span class="hljs-string">&quot;       &quot;</span>+finishTime+<span class="hljs-string">&quot;     &quot;</span>+turnTime+<span class="hljs-string">&quot;      &quot;</span>+powerTime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">digitToTime</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<span class="hljs-comment">//计算时间求和换算</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> a/<span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> a%<span class="hljs-number">100</span>;<br>        h += (m+b)/<span class="hljs-number">60</span>;<br>        m = (m+b)%<span class="hljs-number">60</span>;<br>        ans = h*<span class="hljs-number">100</span> + m;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">subTime</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<span class="hljs-comment">//计算时间差值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> a/<span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> a%<span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">h2</span> <span class="hljs-operator">=</span> b/<span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> b%<span class="hljs-number">100</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> h1*<span class="hljs-number">60</span>+m1;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> h2*<span class="hljs-number">60</span>+m2;<br>        <span class="hljs-keyword">return</span> t1-t2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FCFS</span><span class="hljs-params">(job[] data)</span>&#123;<span class="hljs-comment">//先来先服务</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">preFinishTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 前一个作业的完成时间即为下一个作业的开始时间</span><br>        preFinishTime = data[<span class="hljs-number">0</span>].arriveTime;<span class="hljs-comment">//初始化前一个完成时间</span><br>         <br>        <span class="hljs-keyword">for</span> (job datum : data) &#123;<br>            <span class="hljs-comment">//开始时间等于上一个完成时间</span><br>            datum.startTime = preFinishTime;<br>            <span class="hljs-comment">// 作业的完成时间为上一个作业的完成时间加当前作业的服务时间</span><br>            datum.finishTime = digitToTime(preFinishTime,datum.serviceTime) ;<br>            preFinishTime = datum.finishTime;<br>            <span class="hljs-comment">// 周转时间 = 完成时间 - 到达时间</span><br>            datum.turnTime = subTime(datum.finishTime,datum.arriveTime);<br>            <span class="hljs-comment">// 带权周转时间 = 作业的周转时间 / 系统提供服务的时间</span><br>            datum.powerTime = (<span class="hljs-type">double</span>) datum.turnTime / datum.serviceTime;<br>        &#125;<br>        ansDisplay(data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SJF</span><span class="hljs-params">(job[] data)</span>&#123;<span class="hljs-comment">//短作业优先</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">preFinishTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 前一个作业的完成时间即为下一个作业的开始时间</span><br>        preFinishTime = data[<span class="hljs-number">0</span>].arriveTime;<span class="hljs-comment">//初始化前一个完成时间</span><br>        <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;data.length;i++)&#123;<span class="hljs-comment">//这一层for循环实际起的作用是作业次数</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">min_job</span> <span class="hljs-operator">=</span> <span class="hljs-number">999</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;data.length;j++)&#123;<span class="hljs-comment">//这一层循环判断所有作业中还未执行的最短作业</span><br>                <span class="hljs-comment">//判断条件</span><br>                <span class="hljs-comment">//还未执行</span><br>                <span class="hljs-comment">//比min_job还要小才可更换</span><br>                <span class="hljs-comment">//到达时间小于上一个完成时间</span><br>                <span class="hljs-keyword">if</span>(data[j].startTime==<span class="hljs-number">0</span> &amp;&amp; data[j].serviceTime&lt;min_job &amp;&amp; data[j].arriveTime&lt;=preFinishTime)&#123;<br>                    min_job = data[j].serviceTime;<br>                    index = j;<span class="hljs-comment">//循环结束后得到下一次作业的index</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-comment">//与上面的一致 根本区别就是循环选取的不是早到的那个 而是最短的那个</span><br>            data[index].startTime = preFinishTime;<br>            data[index].finishTime = digitToTime(preFinishTime,data[index].serviceTime);<br>            preFinishTime = data[index].finishTime;<br>            data[index].turnTime = subTime(data[index].finishTime,data[index].arriveTime);<br>            data[index].powerTime = (<span class="hljs-type">double</span>) data[index].turnTime / data[index].serviceTime;<br>        &#125;<br>        ansDisplay(data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">HRN</span><span class="hljs-params">(job[] data)</span>&#123;<span class="hljs-comment">//最高响应比优先</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">preFinishTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 前一个作业的完成时间即为下一个作业的开始时间</span><br>        preFinishTime = data[<span class="hljs-number">0</span>].arriveTime;<span class="hljs-comment">//初始化前一个完成时间</span><br>        <span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;data.length;i++)&#123;<span class="hljs-comment">//这一层for循环实际起的作用是作业次数</span><br>         <br>            <span class="hljs-type">double</span> <span class="hljs-variable">max_response</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;data.length;j++)&#123;<span class="hljs-comment">//这一层循环判断所有作业中还未执行的响应比最高的作业</span><br>                <span class="hljs-comment">//判断条件</span><br>                <span class="hljs-comment">//还未执行</span><br>                <span class="hljs-comment">//到达时间小于上一个完成时间</span><br>                <span class="hljs-keyword">if</span>(data[j].startTime==<span class="hljs-number">0</span> &amp;&amp; data[j].arriveTime&lt;=preFinishTime)&#123;<br>                    <span class="hljs-comment">//比max_response大才可更换</span><br>                    <span class="hljs-type">double</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> (digitToTime(preFinishTime,data[j].serviceTime)-data[j].arriveTime) / (<span class="hljs-type">double</span>)data[j].serviceTime;<br>                    <span class="hljs-keyword">if</span>(response&gt;max_response)&#123;<br>                        index = j;<span class="hljs-comment">//循环结束后得到下一次作业的index</span><br>                        max_response = response;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            data[index].startTime = preFinishTime;<br>            data[index].finishTime = digitToTime(preFinishTime,data[index].serviceTime);<br>            preFinishTime = data[index].finishTime;<br>            data[index].turnTime = subTime(data[index].finishTime,data[index].arriveTime);<br>            data[index].powerTime = (<span class="hljs-type">double</span>) data[index].turnTime / data[index].serviceTime;<br>        &#125;<br>        ansDisplay(data);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ansDisplay</span><span class="hljs-params">(job[] data)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">avgTurnTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">avgPowerTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        System.out.println(<span class="hljs-string">&quot;作业序号\t&quot;</span>+<span class="hljs-string">&quot;到达时间\t&quot;</span> + <span class="hljs-string">&quot;执行总时间\t&quot;</span> + <span class="hljs-string">&quot;开始执行时间\t&quot;</span> + <span class="hljs-string">&quot;结束时间\t&quot;</span> + <span class="hljs-string">&quot;周转时间\t&quot;</span> + <span class="hljs-string">&quot;带权周转时间\t&quot;</span>);<br>        <span class="hljs-keyword">for</span> (job datum : data) &#123;<br>            avgTurnTime += datum.turnTime;<br>            avgPowerTime += datum.powerTime;<br>            datum.display();<br>        &#125;<br>        avgTurnTime /= data.length;<br>        avgPowerTime /= data.length;<br>        System.out.println(<span class="hljs-string">&quot;平均周转时间&quot;</span>+avgTurnTime);<br>        System.out.println(<span class="hljs-string">&quot;平均带权周转时间&quot;</span>+avgPowerTime);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> way;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入调度方式(1.FCFS 2.SJF 3.HRN)&quot;</span>);<br>        way = stdin.nextInt();<br>        <span class="hljs-type">int</span> sum;<br>        System.out.println(<span class="hljs-string">&quot;请输入作业数&quot;</span>);<br>        sum = stdin.nextInt();<br>        job[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">job</span>[sum];<br>        System.out.println(<span class="hljs-string">&quot;请输入作业数据(1 800 50)&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>; i &lt;sum; i++)&#123;<br>            <span class="hljs-type">int</span> a,b,c;<br>            a = stdin.nextInt();<br>            b = stdin.nextInt();<br>            c = stdin.nextInt();<br>            data[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">job</span>(a,b,c);<br>        &#125;<br><span class="hljs-comment">//        测试读入代码</span><br><span class="hljs-comment">//        for(int i=0;i&lt;sum;i++)&#123;</span><br><span class="hljs-comment">//            data[i].display();</span><br><span class="hljs-comment">//        &#125;</span><br>        <span class="hljs-keyword">if</span>(way == <span class="hljs-number">1</span>)<br>            FCFS(data);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(way == <span class="hljs-number">2</span>)<br>            SJF(data);<br>        <span class="hljs-keyword">else</span> <br>            HRN(data);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>页面调度</title>
    <link href="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/"/>
    <url>/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了OS页面调度的两种算法(FIFO LRU)，希望对您有所帮助</p><span id="more"></span><h3 id="一-实验目的"><a href="#一-实验目的" class="headerlink" title="一. 实验目的"></a>一. 实验目的</h3><blockquote><ol><li>了解内存分页管理及调页策略</li><li>掌握FIFO LRU调度算法</li><li>实现FIFO LRU算法</li><li>区别两种不同的方法的优点和缺点</li></ol></blockquote><h3 id="二-实验内容"><a href="#二-实验内容" class="headerlink" title="二. 实验内容"></a>二. 实验内容</h3><blockquote><ol><li>FIFO 先进先出置换算法</li><li>LRU 最近最少使用置换算法</li></ol></blockquote><h3 id="三-实验环境"><a href="#三-实验环境" class="headerlink" title="三. 实验环境"></a>三. 实验环境</h3><blockquote><ol><li>实践平台 windows</li><li>编写环境 java</li><li>编译器 idea</li></ol></blockquote><h3 id="四-实验设计原理"><a href="#四-实验设计原理" class="headerlink" title="四. 实验设计原理"></a>四. 实验设计原理</h3><blockquote><ol><li><p>FIFO 先进先出置换算法</p><p>如果新页面进入时，内存中有空余块，则直接加入，已存在的块不动；如果进入时以及满，则需要找出已经在内存中呆的时间最长的块进行page替换。</p></li><li><p>LRU 最近最少使用置换算法</p><p>最近最少使用与FIFO的实现思路基本一致，区别在于page进入时如果已经在某个块中则重新开始前面的计时。</p></li></ol></blockquote><h3 id="五-实验详细实现过程和算法流程"><a href="#五-实验详细实现过程和算法流程" class="headerlink" title="五. 实验详细实现过程和算法流程"></a>五. 实验详细实现过程和算法流程</h3><blockquote><ol><li><p>FIFO 先进先出置换算法</p><img src="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/FIFO.png" class="" title="FIFO"></li><li><p>LRU 最近最少使用置换算法</p><img src="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/LRU.png" class="" title="LRU"></li></ol></blockquote><h3 id="六-实验调试与结果分析"><a href="#六-实验调试与结果分析" class="headerlink" title="六. 实验调试与结果分析"></a>六. 实验调试与结果分析</h3><blockquote><ol><li><p>测试FIFO</p><img src="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/FIFO_test.png" class="" title="FIFO_test"></li><li><p>测试LRU</p><img src="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/LRU_test.png" class="" title="LRU_test"></li><li><p>对比增加块后的结果 FIFO算法</p><img src="/2022/10/25/%E9%A1%B5%E9%9D%A2%E8%B0%83%E5%BA%A6/belady.png" class="" title="belady"><p>增加块儿数但是置换次数没有减少反而增加，即FIFO的问题Belady现象</p></li></ol></blockquote><h3 id="七-源代码"><a href="#七-源代码" class="headerlink" title="七. 源代码"></a>七. 源代码</h3><blockquote><ol><li><p>Page类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Page</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> index;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> num;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Page</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-built_in">this</span>.index = index;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">num_empty</span><span class="hljs-params">()</span>&#123;<br>        num = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>memory类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">memory</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Page&gt; mem;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> size;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">memory</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        mem = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Page&gt;();<br>        <span class="hljs-built_in">this</span>.size = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>            <span class="hljs-type">Page</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">0</span>);<br>            mem.add(p);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> Page <span class="hljs-title function_">getn</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-keyword">return</span> mem.get(n);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;mem.size();i++)&#123;<br>            System.out.print(mem.get(i).index+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">diaodu</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Page&gt; pages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Page&gt;(<span class="hljs-number">0</span>);<span class="hljs-comment">//页面数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; page_xulie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;(<span class="hljs-number">0</span>);<span class="hljs-comment">//页面序列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> zhihuan_num=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> memory[] mem_xulie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">memory</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入页面数&quot;</span>);<br>        <span class="hljs-type">int</span> page_num;<br>        page_num = scanner.nextInt();<br>        <span class="hljs-comment">//初始化页面计数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;page_num;i++)&#123;<br>            <span class="hljs-type">Page</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(i+<span class="hljs-number">1</span>);<br>            p.num = <span class="hljs-number">0</span>;<br>            pages.add(p);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;请输入页面序列号(以0结束)&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-keyword">while</span>(test!=<span class="hljs-number">0</span>)&#123;<br>            page_xulie.add(test);<br>            test = scanner.nextInt();<br>        &#125;<br>        <span class="hljs-type">int</span> syn;<br>        System.out.println(<span class="hljs-string">&quot;请选择算法(1.FIFO 2.LRU)&quot;</span>);<br>        syn = scanner.nextInt();<br>        <span class="hljs-comment">//初始化mem</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            mem_xulie[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">memory</span>(page_xulie.size());<br>            mem_xulie[i].init();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(syn==<span class="hljs-number">1</span>)&#123;<br>            FIFO();<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(syn==<span class="hljs-number">2</span>)&#123;<br>            LRU();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类-FIFO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FIFO</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;page_xulie.size();i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dangqian</span> <span class="hljs-operator">=</span> page_xulie.get(i);<br>        <span class="hljs-comment">//遍历序列</span><br>        Page[] lie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//取出上一列的数据</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>                lie[j] = mem_xulie[j].getn(i-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//如果刚开始没数据</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>                lie[j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_zai</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">zai_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">meiman_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_man</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Page</span> <span class="hljs-variable">max_page</span> <span class="hljs-operator">=</span> lie[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            <span class="hljs-comment">//先判断在不在</span><br>            <span class="hljs-keyword">if</span>(lie[j].index == dangqian)&#123;<br>                <span class="hljs-comment">//说明在</span><br>                is_zai = <span class="hljs-literal">true</span>;<br>                zai_weizhi = j;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//找出num最大值</span><br>            <span class="hljs-keyword">if</span>(max_page.num &lt; lie[j].num)&#123;<br>                max_weizhi  =j;<br>                max_page = lie[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(lie[j].index!=<span class="hljs-number">0</span>)&#123;<br>                is_man=<span class="hljs-literal">true</span>;<br>                meiman_weizhi++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                is_man = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        lie[<span class="hljs-number">0</span>].num++;<br>        lie[<span class="hljs-number">1</span>].num++;<br>        lie[<span class="hljs-number">2</span>].num++;<br>        <span class="hljs-keyword">if</span>(!is_zai)&#123;<br>            <span class="hljs-comment">//如果满了 替换掉最大的 顺便把最大的num置0</span><br>            <span class="hljs-type">Page</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(dangqian);<br>            p.num = <span class="hljs-number">1</span>;<br>            zhihuan_num++;<br>            <span class="hljs-keyword">if</span>(is_man)&#123;<br>                max_page.num = <span class="hljs-number">0</span>;<br><br>                lie[max_weizhi] = p;<br>            &#125;<br>            <span class="hljs-comment">//没满则直接放</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                lie[meiman_weizhi] = p;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//存入数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            mem_xulie[j].mem.set(i, lie[j]);<br>        &#125;<br>    &#125;<br>    output();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类-LRU</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">LRU</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;page_xulie.size();i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">dangqian</span> <span class="hljs-operator">=</span> page_xulie.get(i);<br>        <span class="hljs-comment">//遍历序列</span><br>        Page[] lie = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>[<span class="hljs-number">3</span>];<br>        <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//取出上一列的数据</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>                lie[j] = mem_xulie[j].getn(i-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">//如果刚开始没数据</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>                lie[j] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_zai</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">zai_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">meiman_weizhi</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_man</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Page</span> <span class="hljs-variable">max_page</span> <span class="hljs-operator">=</span> lie[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            <span class="hljs-comment">//先判断在不在</span><br>            <span class="hljs-keyword">if</span>(lie[j].index == dangqian)&#123;<br>                <span class="hljs-comment">//说明在</span><br>                is_zai = <span class="hljs-literal">true</span>;<br>                zai_weizhi = j;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-comment">//找出num最大值</span><br>            <span class="hljs-keyword">if</span>(max_page.num &lt; lie[j].num)&#123;<br>                max_weizhi  =j;<br>                max_page = lie[j];<br>            &#125;<br>            <span class="hljs-keyword">if</span>(lie[j].index!=<span class="hljs-number">0</span>)&#123;<br>                is_man=<span class="hljs-literal">true</span>;<br>                meiman_weizhi++;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                is_man = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        lie[<span class="hljs-number">0</span>].num++;<br>        lie[<span class="hljs-number">1</span>].num++;<br>        lie[<span class="hljs-number">2</span>].num++;<br>        <span class="hljs-keyword">if</span>(!is_zai)&#123;<br>            <span class="hljs-comment">//如果满了 替换掉最大的 顺便把最大的num置0</span><br>            <span class="hljs-type">Page</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>(dangqian);<br>            p.num = <span class="hljs-number">1</span>;<br>            zhihuan_num++;<br>            <span class="hljs-keyword">if</span>(is_man)&#123;<br>                max_page.num = <span class="hljs-number">0</span>;<br><br>                lie[max_weizhi] = p;<br>            &#125;<br>            <span class="hljs-comment">//没满则直接放</span><br>            <span class="hljs-keyword">else</span>&#123;<br>                lie[meiman_weizhi] = p;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            lie[zai_weizhi].num=<span class="hljs-number">1</span>; <span class="hljs-comment">//与FIFO唯一差距----</span><br>        &#125;<br>        <span class="hljs-comment">//存入数据</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>            mem_xulie[j].mem.set(i, lie[j]);<br>        &#125;<br>    &#125;<br>    output();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>output函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">output</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt; page_xulie.size();i++)&#123;<br>        System.out.print(page_xulie.get(i)+<span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>    System.out.println();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>        mem_xulie[i].display();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;置换次数 &quot;</span>+zhihuan_num);<br>    System.out.println(<span class="hljs-string">&quot;置换率 &quot;</span>+(<span class="hljs-type">double</span>)zhihuan_num/ page_xulie.size());<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="八-感悟"><a href="#八-感悟" class="headerlink" title="八. 感悟"></a>八. 感悟</h3><blockquote><p>在这次实验中不仅实现了FIFO和LRU算法，对他们的原理也更加清晰，还分析了OPT算法的思路，虽然不易拿代码实现，但是可以作为分析调度算法的优劣的重要参考。</p><p>OPT 算法可保证获得最低的缺页率，但是由于目前还无法准确预知一个进程在内存的若干的页面中，哪一个页面是未来最长时间内不被访问的，我们无法做到开天眼，因而该算法在实际应用中无法实现。FIFO 算法有时候比较差，因为它所依据的条件是各个界面调入内存的时间,而页面调入的先后顺序不能反映页面的使用情况。LRU 算法虽然是一种比较好的置换算法，但是在实际中需要用到寄存器和栈的硬件支持。同时对比不同内存块数下的程序运行结果能够看出，算法的缺页率与分配的内存块数有关系，虽然会出现Belady现象，但基本规律是分配的内存块数越多，缺页率越低。</p><p>总之，这次的实验让我回顾了很多知识点，相比于前两次实验，这次的代码实现思路流程更复杂一些，锻炼了思维还有debug的能力。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分区式存储管理算法</title>
    <link href="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/"/>
    <url>/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了OS分区式存储管理的三种算法(FF BF WF)，希望对您有所帮助</p><span id="more"></span> <h3 id="一-实验目的"><a href="#一-实验目的" class="headerlink" title="一. 实验目的"></a>一. 实验目的</h3><blockquote><ol><li>了解可变分区存储管理方式</li><li>掌握最佳适应，最坏适应，首次适应算法</li><li>实现三种算法</li><li>对比不同的方法的优点和缺点</li></ol></blockquote><h3 id="二-实验内容"><a href="#二-实验内容" class="headerlink" title="二. 实验内容"></a>二. 实验内容</h3><blockquote><ol><li>首次适应算法</li><li>最佳适应算法</li><li>最坏适应算法</li></ol></blockquote><h3 id="三-实验环境"><a href="#三-实验环境" class="headerlink" title="三. 实验环境"></a>三. 实验环境</h3><blockquote><ol><li>实践平台 windows</li><li>编写环境 java</li><li>编译器 idea</li></ol></blockquote><h3 id="四-实验设计原理"><a href="#四-实验设计原理" class="headerlink" title="四. 实验设计原理"></a>四. 实验设计原理</h3><blockquote><ol><li><p>首次适应算法</p><p>当接到内存申请时，遍历分区表，找到第一个满足长度的空闲区，将其分割并分配，此算法简单，可以快速分配决定，但空间利用率低。</p></li><li><p>最佳适应算法</p><p>当接到内存申请时，遍历分区表，找到第一个能满足长度的最小空闲区，将其分割，此算法节约空间，因为尽量不分割大的空闲区，缺点是形成很多很小的空闲区。</p></li><li><p>最坏适应算法</p><p>当接到内存申请时，遍历分区表，找到第一个能满足长度的最大空闲区，将其分割，该算法可以避免形成碎片，缺点是在分割了大的空闲区后，在遇到较大的申请内存时，无法满足分配。</p></li></ol></blockquote><h3 id="五-实验详细实现过程和算法流程"><a href="#五-实验详细实现过程和算法流程" class="headerlink" title="五. 实验详细实现过程和算法流程"></a>五. 实验详细实现过程和算法流程</h3><blockquote><ol><li><p>首先适应算法</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/FF.png" class="" title="FF"></li><li><p>最佳适应算法</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/BF.png" class="" title="BF"></li><li><p>最坏适应算法</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/WF.png" class="" title="WF"></li></ol></blockquote><h3 id="六-实验调试与结果分析"><a href="#六-实验调试与结果分析" class="headerlink" title="六. 实验调试与结果分析"></a>六. 实验调试与结果分析</h3><blockquote><ol><li><p>测试数据</p><p>空闲块：起始地址 大小</p><p>0 120  130 15  150 95  250 70  320 130  560 180</p><p>work：80 15 70 130 45</p></li><li><p>首先适应</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/FF-test.png" class="" title="FF-test"></li><li><p>最佳适应</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/BF-test.png" class="" title="BF-test"></li><li><p>最坏适应</p><img src="/2022/10/23/%E5%88%86%E5%8C%BA%E5%BC%8F%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86%E7%AE%97%E6%B3%95/WF-test.png" class="" title="WF-test"></li></ol></blockquote><h3 id="七-源代码"><a href="#七-源代码" class="headerlink" title="七. 源代码"></a>七. 源代码</h3><blockquote><ol><li><p>Table类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Table</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> address;<span class="hljs-comment">//起始地址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> size;<span class="hljs-comment">//大小</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> isFree=<span class="hljs-literal">false</span>;<span class="hljs-comment">//状态 是否为空闲区</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Table</span><span class="hljs-params">(<span class="hljs-type">int</span> address,<span class="hljs-type">int</span> size)</span>&#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>        <span class="hljs-built_in">this</span>.size = size;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Table</span><span class="hljs-params">(<span class="hljs-type">int</span> address,<span class="hljs-type">int</span> size,<span class="hljs-type">boolean</span> isFree)</span>&#123;<br>        <span class="hljs-built_in">this</span>.address = address;<br>        <span class="hljs-built_in">this</span>.size = size;<br>        <span class="hljs-built_in">this</span>.isFree = isFree;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outPut</span><span class="hljs-params">()</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;     &quot;</span>+<span class="hljs-built_in">this</span>.address+<span class="hljs-string">&quot;        &quot;</span>+<span class="hljs-built_in">this</span>.size+<span class="hljs-string">&quot;  &quot;</span>);<br>        <span class="hljs-keyword">if</span>(!isFree)&#123;<br>            System.out.println(<span class="hljs-string">&quot;free&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;busy&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>TableList类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableList</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Table&gt; TL;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TableList</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-built_in">this</span>.n = n;<span class="hljs-comment">//列表为n</span><br>        TL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Table&gt;();<br>    &#125;<br>    <span class="hljs-comment">//排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort1</span><span class="hljs-params">()</span> &#123;<br>        Collections.sort(TL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object lhs, Object rhs)</span> &#123;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> (Table) lhs;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> (Table) rhs;<br>                <span class="hljs-keyword">return</span> data1.address - data2.address;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort2</span><span class="hljs-params">()</span> &#123;<br>        Collections.sort(TL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object lhs, Object rhs)</span> &#123;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> (Table) lhs;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> (Table) rhs;<br>                <span class="hljs-keyword">return</span> data1.size - data2.size;<br>            &#125;<br>        &#125;);<br>    &#125;<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort3</span><span class="hljs-params">()</span> &#123;<br>        Collections.sort(TL, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object lhs, Object rhs)</span> &#123;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data1</span> <span class="hljs-operator">=</span> (Table) lhs;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">data2</span> <span class="hljs-operator">=</span> (Table) rhs;<br>                <span class="hljs-keyword">return</span> data2.size - data1.size;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-comment">//剔除 size 0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tichu</span><span class="hljs-params">()</span>&#123;<br>        List&lt;Table&gt; new_TL = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Table&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span> ;i&lt;TL.size();i++)&#123;<br>            <span class="hljs-keyword">if</span>(TL.get(i).size!=<span class="hljs-number">0</span>)&#123;<br>                new_TL.add(TL.get(i));<br>            &#125;<br>        &#125;<br>        TL = new_TL;<br>    &#125;<br>    <span class="hljs-comment">//输出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;index  &quot;</span>+<span class="hljs-string">&quot;address   &quot;</span>+<span class="hljs-string">&quot;size   &quot;</span>+<span class="hljs-string">&quot;status&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=TL.size();i++)&#123;<br>            System.out.print(<span class="hljs-string">&quot; &quot;</span>+i+<span class="hljs-string">&quot;  &quot;</span>);<br>            TL.get(i-<span class="hljs-number">1</span>).outPut();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    System.out.println(<span class="hljs-string">&quot;请输入空闲块个数&quot;</span>);<br>    <span class="hljs-type">int</span> free_tab;<br>    free_tab = scanner.nextInt();<br>    <span class="hljs-type">TableList</span> <span class="hljs-variable">tablist</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableList</span>(free_tab);<br>    System.out.println(<span class="hljs-string">&quot;请输入起始地址和大小&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;free_tab;i++)&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>        <span class="hljs-type">Table</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(a,b);<br>        tablist.TL.add(t);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;请输入work数&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">work_num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>    work = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[work_num];<br>    System.out.println(<span class="hljs-string">&quot;请输入每个work大小&quot;</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;work_num;i++)&#123;<br>        work[i] = scanner.nextInt();<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;请选择算法(1.首次适应算法 2.最佳适应算法 3.最差适应算法)&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">syn</span> <span class="hljs-operator">=</span> scanner.nextInt();<br>    <span class="hljs-keyword">if</span>(syn==<span class="hljs-number">1</span>)<br>        FF(tablist);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(syn==<span class="hljs-number">2</span>)<br>        BF(tablist);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(syn==<span class="hljs-number">3</span>)<br>        WF(tablist);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类-FF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">FF</span><span class="hljs-params">(TableList tablist)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : work) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_suc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        tablist.n=tablist.TL.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tablist.n; j++) &#123;<br>            <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tablist.TL.get(j);<br>            <span class="hljs-keyword">if</span> (!table.isFree &amp;&amp; table.size &gt;= k) &#123;<br>                is_suc = <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> table.address;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> k;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">jia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(a, b, <span class="hljs-literal">true</span>);<br>                tablist.TL.add(jia);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> table.address + k;<br>                table.address = c;<br>                table.size = table.size - k;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!is_suc) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分配失败&quot;</span>);<br>            tablist.tichu();<br>            tablist.sort1();<br>            tablist.display();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;分配成功&quot;</span>);<br>    tablist.tichu();<br>    tablist.sort1();<br>    tablist.display();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类-BF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">BF</span><span class="hljs-params">(TableList tablist)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : work) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_suc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        tablist.sort2();<br>        tablist.n=tablist.TL.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tablist.n; j++) &#123;<br>            <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tablist.TL.get(j);<br>            <span class="hljs-keyword">if</span> (!table.isFree &amp;&amp; table.size &gt;= k) &#123;<br>                is_suc = <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> table.address;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> k;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">jia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(a, b, <span class="hljs-literal">true</span>);<br>                tablist.TL.add(jia);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> table.address + k;<br>                table.address = c;<br>                table.size = table.size - k;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!is_suc) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分配失败&quot;</span>);<br>            tablist.tichu();<br>            tablist.sort1();<br>            tablist.display();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;分配成功&quot;</span>);<br>    tablist.tichu();<br>    tablist.sort1();<br>    tablist.display();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>主类-WF</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">WF</span><span class="hljs-params">(TableList tablist)</span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k : work) &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">is_suc</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        tablist.n=tablist.TL.size();<br>        tablist.sort3();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; tablist.n; j++) &#123;<br>            <span class="hljs-type">Table</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> tablist.TL.get(j);<br>            <span class="hljs-keyword">if</span> (!table.isFree &amp;&amp; table.size &gt;= k) &#123;<br>                is_suc = <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> table.address;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> k;<br>                <span class="hljs-type">Table</span> <span class="hljs-variable">jia</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Table</span>(a, b, <span class="hljs-literal">true</span>);<br>                tablist.TL.add(jia);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> table.address + k;<br>                table.address = c;<br>                table.size = table.size - k;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!is_suc) &#123;<br>            System.out.println(<span class="hljs-string">&quot;分配失败&quot;</span>);<br>            tablist.tichu();<br>            tablist.sort1();<br>            tablist.display();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;分配成功&quot;</span>);<br>    tablist.tichu();<br>    tablist.sort1();<br>    tablist.display();<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="八-感悟"><a href="#八-感悟" class="headerlink" title="八. 感悟"></a>八. 感悟</h3><blockquote><p>通过这次实验了解了可变分区的相关知识，可变分区是系统不预先划分固定分区，有很大的灵活性，然后是三种分配策略，首先是首先适应法，这种算法简单，遍历时碰到的第一个满足大小的即可分配，缺点是空间利用率低；最佳适应算法，每次分配时都将块按大小从小到大排序，使其分配时可以分配最佳满足的块，这样利用率最佳，但是会造成很多空闲区，也叫作碎片；最坏适应算法，与最佳的区别是排序方式是从大到小，这样就可以避免最佳适应算法的碎片问题，但是会造成较大块无法分配内存。但是实验还有不完善之处，该实验只是完成了申请内存的过程，没有实现边申请边释放的过程，还有待改进。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Servlet</title>
    <link href="/2022/10/02/Servlet/"/>
    <url>/2022/10/02/Servlet/</url>
    
    <content type="html"><![CDATA[<p>本文对Servlet的基础知识进行介绍，希望对您有所帮助</p><span id="more"></span><h3 id="一-HTTP协议"><a href="#一-HTTP协议" class="headerlink" title="一.HTTP协议"></a>一.HTTP协议</h3><h4 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h4><p>​超文本传输协议，客户端请求和相应的标准协议，这个协议详细规定了浏览器和万维网服务器之间的互相通信规则。</p><p>请求协议 和 响应协议</p><img src="/2022/10/02/Servlet/HTTP1.png" class="" title="HTTP协议"><h4 id="1-2-书写格式"><a href="#1-2-书写格式" class="headerlink" title="1.2 书写格式"></a>1.2 书写格式</h4><img src="/2022/10/02/Servlet/HTTP2%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F.png" class="" title="HTTP2书写格式"><h4 id="1-3-协议特点"><a href="#1-3-协议特点" class="headerlink" title="1.3 协议特点"></a>1.3 协议特点</h4><ul><li><p>支持客户&#x2F;服务器模式</p></li><li><p>简单快捷</p></li><li><p>灵活 允许传输任意类型的数据对象</p></li><li><p>无连接 每次连接只处理一个请求 收到应答后即断开连接 节省时间</p></li><li><p>无状态 没有记忆能力，如果后续处理需要前面的信息则它必须重新传</p></li></ul><h4 id="1-4-HTTP请求"><a href="#1-4-HTTP请求" class="headerlink" title="1.4 HTTP请求"></a>1.4 HTTP请求</h4><p>​请求行 第一行</p><p>​请求方式 get&#x2F;post</p><p>​请求地址 </p><p>​请求版本</p><p>​请求头  键值对</p><p>​Host 当前域名</p><p>​Connection：keep-alive  保持存活状态</p><p>​User-Agent  表明浏览器数据</p><p>​Accept 接受类型</p><p>​请求正文 get请求时并到地址栏上</p><p>​post请求时的Form Data</p><h4 id="1-5-HTTP响应"><a href="#1-5-HTTP响应" class="headerlink" title="1.5 HTTP响应"></a>1.5 HTTP响应</h4><p>​状态行</p><p>​协议版本 响应状态码  以及 其说明(OK)</p><p>​响应头</p><p>​响应正文</p><p>​浏览器中看到的</p><h4 id="1-6-消息头"><a href="#1-6-消息头" class="headerlink" title="1.6 消息头"></a>1.6 消息头</h4><p>​每一个报头域 名字+”:”+空格+值</p><p>​请求头</p><p>​       <strong>Referer</strong> 说明请求从哪来 从一个页面到另一个页面会显示</p><p>​           用处：百度设置广告 邀请用户链接 <strong>防盗链</strong></p><p>​响应头</p><p>​       <strong>Location</strong> 重定向[更换域名操作]</p><p>​       <strong>Refresh</strong> 自动跳转</p><pre><code class="hljs"> **案例：定时跳转案例 webstorm_code/servlet/定时跳转.html**</code></pre><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;3;url=http://www.google.com&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="二-Tomcat"><a href="#二-Tomcat" class="headerlink" title="二. Tomcat"></a>二. Tomcat</h3><h4 id="2-1-介绍"><a href="#2-1-介绍" class="headerlink" title="2.1 介绍"></a>2.1 介绍</h4><p>​免费开源的轻量级web服务器</p><p>​性能稳定 中小型系统使用多</p><h4 id="2-2-目录结构"><a href="#2-2-目录结构" class="headerlink" title="2.2 目录结构"></a>2.2 目录结构</h4><img src="/2022/10/02/Servlet/Tomcat%E7%9B%AE%E5%BD%95.png" class="" title="Tomcat目录"><h4 id="2-3-部署方式"><a href="#2-3-部署方式" class="headerlink" title="2.3 部署方式"></a>2.3 部署方式</h4><ul><li><p>直接将项目放在webapps里</p><img src="/2022/10/02/Servlet/%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E4%BA%8C.png" class="" title="部署方式二"></li><li><p>配置conf&#x2F;server.xml</p><img src="/2022/10/02/Servlet/%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E4%B8%80.png" class="" title="部署方式一"></li><li><p>在conf&#x2F;Catalina&#x2F;localhost创建任意名称的xml文件</p><img src="/2022/10/02/Servlet/%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F%E4%B8%89.png" class="" title="部署方式三"></li></ul><h3 id="三-servlet基础"><a href="#三-servlet基础" class="headerlink" title="三. servlet基础"></a>三. servlet基础</h3><h4 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h4><p>​servlet是server和applet的缩写 服务端小程序</p><p>​servlet本质上也是java类，但要遵循他自己的规范，没有main方法，他的创建和，使用，销毁都由Servlet容器进行管理(如：tomcat)</p><p>​提供了servlet功能的服务器叫做servlet容器(Tomcat，jetty，weblogic server，jboss等)</p><h4 id="3-2-规范"><a href="#3-2-规范" class="headerlink" title="3.2 规范"></a>3.2 规范</h4><p>三种实现方式 <strong>案例实现01 02 03</strong></p><ul><li>继承HttpServlet类</li><li>继承GenericServlet类</li><li>实现Servlet接口</li></ul><h4 id="3-3-重写service方法"><a href="#3-3-重写service方法" class="headerlink" title="3.3 重写service方法"></a>3.3 重写service方法</h4><p>​专门用来处理请求</p><p>​通过流输出数据到浏览器</p><p>​</p><h4 id="3-4-设置注解"><a href="#3-4-设置注解" class="headerlink" title="3.4 设置注解"></a>3.4 设置注解</h4><p>一次只用一种 切记路径中的<strong>斜杠</strong>记得写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/ser01&quot;)</span><br><span class="hljs-meta">@WebServlet(name = &quot;kai1&quot;,value = &quot;/ser01&quot;)</span><br><span class="hljs-meta">@WebServlet(name = &quot;kai1&quot;,value = &#123;&quot;/ser01&quot;,&quot;/ser02&quot;&#125;)</span><br></code></pre></td></tr></table></figure><h4 id="3-5-工作流程"><a href="#3-5-工作流程" class="headerlink" title="3.5 工作流程"></a>3.5 工作流程</h4><img src="/2022/10/02/Servlet/servlet%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png" class="" title="servlet工作流程"><h4 id="3-6-doGet和doPost"><a href="#3-6-doGet和doPost" class="headerlink" title="3.6 doGet和doPost"></a>3.6 doGet和doPost</h4><p>​<strong>案例实现04</strong></p><p>​实际上重写Service更方便，通过调用会自动根据请求方式处理</p><h4 id="3-7-生命周期"><a href="#3-7-生命周期" class="headerlink" title="3.7 生命周期"></a>3.7 生命周期</h4><p>​<strong>案例实现05</strong></p><p>​init：系统方法 当请求到达servlet容器时，servlet容器会判断该Servlet对象是否存在，不存在才会调用创建实例</p><p>​service：当有请求到达时调用 可以被多次调用</p><p>​destroy：当服务器关闭或应用程序停止时调用该方法，只调用一次</p><img src="/2022/10/02/Servlet/servlet%E6%97%B6%E5%BA%8F%E5%9B%BE.png" class="" title="servlet时序图"><ul><li>web客户端向servlet容器发出http请求</li><li>servlet容器接收web客户端的请求</li><li>servlet容器创建一个HttpServletRequest对象，将web客户端请求的信息封装到这个对象中</li><li>Servlet容器创建一个HttpServletResponse对象</li><li>Servlet容器调用HttpServlet对象Service方法，把Request与Response作为参数，传给HttpServlet</li><li>HttpServlet调用HttpServletRequest对象的有关方法，获取http请求信息</li><li>HttpServlet调用HttpServletResponse对象有关的方法，生成响应数据</li><li>Servlet容器把HttpServlet的响应结果传给web客户端</li></ul><h3 id="四-常见对象"><a href="#四-常见对象" class="headerlink" title="四. 常见对象"></a>四. 常见对象</h3><h4 id="4-1-HttpServletRequest对象"><a href="#4-1-HttpServletRequest对象" class="headerlink" title="4.1 HttpServletRequest对象"></a>4.1 HttpServletRequest对象</h4><p>​主要作用是接收客户端发送过来的请求信息，例如：请求的参数，发送的头信息等都属于是客户端发来的信息，service方法中的形参接受的是HttpServletRequest接口的实例化对象，表示该对象主要用在http协议上</p><h5 id="4-1-1-方法介绍"><a href="#4-1-1-方法介绍" class="headerlink" title="4.1.1 方法介绍"></a>4.1.1 方法介绍</h5><p><strong>案例实现06</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取请求完整路径 http开始 参数前结束</span><br><span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> req.getRequestURL()+<span class="hljs-string">&quot;&quot;</span>;<br>resp.getWriter().write(<span class="hljs-string">&quot;获取请求完整路径&quot;</span>+url);<br><span class="hljs-comment">//获取请求时部分路径 从项目的站点名开始 到 参数结束</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> req.getRequestURI();<br>resp.getWriter().write(<span class="hljs-string">&quot;\n获取请求时部分路径&quot;</span>+uri);<br><span class="hljs-comment">//获取请求时的参数字符串 从？开始到最后的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">queryString</span> <span class="hljs-operator">=</span> req.getQueryString();<br>resp.getWriter().write(<span class="hljs-string">&quot;\n获取请求时的参数字符串&quot;</span>+queryString);<br><span class="hljs-comment">//获取请求方式 get/post</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> req.getMethod();<br>resp.getWriter().write(<span class="hljs-string">&quot;\n获取请求方式&quot;</span>+method);<br><span class="hljs-comment">//获取协议版本 http/1.1</span><br><span class="hljs-type">String</span> <span class="hljs-variable">protocol</span> <span class="hljs-operator">=</span> req.getProtocol();<br>resp.getWriter().write(<span class="hljs-string">&quot;\n获取协议版本&quot;</span>+protocol);<br><span class="hljs-comment">//获取项目站点名 项目对外访问路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">webapp</span> <span class="hljs-operator">=</span> req.getContextPath();<br>resp.getWriter().write(<span class="hljs-string">&quot;\n获取项目站点名&quot;</span>+webapp);<br><span class="hljs-comment">//获取指定名称的参数值</span><br><span class="hljs-type">String</span> <span class="hljs-variable">uname</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">upwd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>resp.getWriter().write(<span class="hljs-string">&quot;\n用户名&quot;</span>+uname);<br>resp.getWriter().write(<span class="hljs-string">&quot;\n密码&quot;</span>+upwd);<br><span class="hljs-comment">//获取指定名称所有参数值 返回字符串数组</span><br>String[] hobbys = req.getParameterValues(<span class="hljs-string">&quot;hobby&quot;</span>);<br><span class="hljs-comment">//判断数组是否为空</span><br><span class="hljs-keyword">if</span>(hobbys!=<span class="hljs-literal">null</span>&amp;&amp;hobbys.length&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">for</span>(String hobby:hobbys)&#123;<br>        resp.getWriter().write(<span class="hljs-string">&quot;\n爱好&quot;</span>+hobby);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-1-2-乱码问题"><a href="#4-1-2-乱码问题" class="headerlink" title="4.1.2 乱码问题"></a>4.1.2 乱码问题</h5><p>get请求 8之后不会乱码</p><p>post请求 解决乱码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">req.serCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="4-1-3-请求转发"><a href="#4-1-3-请求转发" class="headerlink" title="4.1.3 请求转发"></a>4.1.3 请求转发</h5><p><strong>案例实现ser07+ser08</strong></p><img src="/2022/10/02/Servlet/ser0708.png" class="" title="ser0708"><p>​是一种服务器行为，当客户端请求到达后，服务器进行转发，此时会将请求对象进行保存，地址栏中的URL地址不会改变，得到响应后，服务器端再响应发送给客户端，从始至终只有一个请求发出</p><p>​服务端行为</p><p>​<strong>地址栏不发生改变</strong></p><p>​从始至终<strong>只有一个请求</strong></p><p>​数据可以<strong>共享</strong></p><p>还可以跳转到jsp或html 后台页面跳到前台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">req.getRequestDispatcher(<span class="hljs-string">&quot;index.jsp&quot;</span>).forward(req,resp);<br>req.getRequestDispatcher(<span class="hljs-string">&quot;index.html&quot;</span>).forward(req,resp);<br></code></pre></td></tr></table></figure><h5 id="4-1-4-作用域"><a href="#4-1-4-作用域" class="headerlink" title="4.1.4 作用域"></a>4.1.4 作用域</h5><p><strong>案例实现ser09+ser10</strong></p><p>也可以跳到jsp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">req.setAttribute(String name,String value);<br>req.getAttribute(String name);<br>req.removeAttribute(String name);<br></code></pre></td></tr></table></figure><h4 id="4-2-HttpServletResponse对象"><a href="#4-2-HttpServletResponse对象" class="headerlink" title="4.2 HttpServletResponse对象"></a>4.2 HttpServletResponse对象</h4><p>​主要功能是用于服务器端的请求进行响应，将Web服务器处理后的结果返回给客户端，service()方法中形参接受的是HttpServletResponse接口的实例化对象，这个对象封装了向客户端发送数据，发送响应头，发送响应状态码的方法</p><h5 id="4-2-1-响应数据"><a href="#4-2-1-响应数据" class="headerlink" title="4.2.1 响应数据"></a>4.2.1 响应数据</h5><p><strong>案例实现ser11</strong></p><p>字符流和字节流</p><p><strong>两者不能一起使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>writer.write(<span class="hljs-string">&quot;hello printwriter&quot;</span>);<br><span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> resp.getOutputStream();<br>out.write(<span class="hljs-string">&quot;hello outputstreeam&quot;</span>.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br></code></pre></td></tr></table></figure><h5 id="4-2-2-响应乱码"><a href="#4-2-2-响应乱码" class="headerlink" title="4.2.2 响应乱码"></a>4.2.2 响应乱码</h5><p>字节流乱码</p><p>字符流乱码</p><p>​       服务端客户端编码不一致 不支持中文</p><p>两种解决方法一致</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">```java<br><span class="hljs-regexp">//</span>设置编码格式<br>resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-regexp">//</span>设置客户端编码模式<br>resp.setHeader(<span class="hljs-string">&quot;content-type&quot;</span>,<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br><span class="hljs-regexp">//</span>同时设置两者<br>resp.setContentType(<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs clean">##### <span class="hljs-number">4.2</span><span class="hljs-number">.3</span> 重定向<br><br>**案例实现ser12+ser13**<br><br>服务端指导 客户端行为<br><br>存在两次请求<br><br>地址栏会改变<br><br>req对象不共享<br><br>```java<br>resp.sendRedirect(<span class="hljs-string">&quot;...&quot;</span>)<br></code></pre></td></tr></table></figure><h5 id="4-2-4-req和resp对比"><a href="#4-2-4-req和resp对比" class="headerlink" title="4.2.4 req和resp对比"></a>4.2.4 req和resp对比</h5><table><thead><tr><th align="center">请求转发</th><th align="center">重定向</th></tr></thead><tbody><tr><td align="center">地址栏不会改变</td><td align="center">地址栏会发生改变</td></tr><tr><td align="center">只有一次请求</td><td align="center">两次请求</td></tr><tr><td align="center">req对象可以共享</td><td align="center">不共享</td></tr><tr><td align="center">服务端行为</td><td align="center">客户端行为</td></tr><tr><td align="center">地址只能是当前站点下，不能跨域</td><td align="center">任何可以访问到的地址，可以跨域</td></tr></tbody></table><h4 id="4-3HttpSession对象"><a href="#4-3HttpSession对象" class="headerlink" title="4.3HttpSession对象"></a>4.3HttpSession对象</h4><h5 id="4-3-1-介绍"><a href="#4-3-1-介绍" class="headerlink" title="4.3.1 介绍"></a>4.3.1 介绍</h5><p>​HttpSession 对象是servlet.http.HttpSession的实例，该接口只是一个纯粹接口，这是因为session本身就是属于HTTP协议的范畴</p><p>​session的作用是标识了一次会话，或者说确认一个用户，并且一次会话(一个用户的多次请求)期间共享数据，我们可以通过req.getSession()方法，获取session对象.如果重新打开一个新的浏览器则无法获取之前设置的session</p><h5 id="4-3-2-标识符等数据"><a href="#4-3-2-标识符等数据" class="headerlink" title="4.3.2 标识符等数据"></a>4.3.2 标识符等数据</h5><p>标识符：唯一标识一次会话，每当请求到达服务器，如果开启了会话，服务器第一步会查看是否从客户端回传一个JSESSIONID的cookie，如果没有则创建一个新的session对象。</p><p>这里的JSESSIONID是一个特殊的cookie，添加到resp对象，响应给客户端，有效时间为关闭浏览器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> session.getID();<br><span class="hljs-type">String</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> session.getCreationTime(); 创建时间<br>session.getLastAccessedTime(); 最后一次访问时间<br>session.isNew();<br>...<br></code></pre></td></tr></table></figure><h5 id="4-3-3-域对象"><a href="#4-3-3-域对象" class="headerlink" title="4.3.3 域对象"></a>4.3.3 域对象</h5><p>​请求转发 一次请求 session和req都能拿到</p><p>​重定向 两次请求 session能拿到 req失效</p><h5 id="4-3-4-session销毁"><a href="#4-3-4-session销毁" class="headerlink" title="4.3.4 session销毁"></a>4.3.4 session销毁</h5><ul><li><p>默认到期时间</p><p>tomcat是30min 一旦有操作 session会重新计时</p><p>修改默认时间需要到tomcat conf web.xml中修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">session-config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">session-timeout</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">session-timeout</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">session-config</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>自己设定到期时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">session.setMaxInactiveInterval(...);<br>session.getMaxInactiveInterval(...);<br></code></pre></td></tr></table></figure></li><li><p>立即销毁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">session.invalidate();<br></code></pre></td></tr></table></figure></li><li><p>关闭浏览器失效</p><p>底层cookie 默认关闭失效</p></li><li><p>关闭服务器失效</p></li></ul><h4 id="4-4-ServletContext对象"><a href="#4-4-ServletContext对象" class="headerlink" title="4.4 ServletContext对象"></a>4.4 ServletContext对象</h4><h5 id="4-4-1-介绍"><a href="#4-4-1-介绍" class="headerlink" title="4.4.1 介绍"></a>4.4.1 介绍</h5><p>每一个web项目只有一个 又称application对象</p><p>作用</p><ul><li><p>作为域对象来共享数据</p></li><li><p>该对象保存了当前应用程序的相关信息</p><p>例如：getServerInfo()获取当前服务信息</p><p>​  getRealPath(String path)获取资源的真实路径</p></li></ul><h5 id="4-4-2-获取和常用方法"><a href="#4-4-2-获取和常用方法" class="headerlink" title="4.4.2 获取和常用方法"></a>4.4.2 获取和常用方法</h5><p><strong>案例实现con1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过req获取</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext1</span> <span class="hljs-operator">=</span>  req.getServletContext();<br><span class="hljs-comment">//通过session对象获取</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext2</span> <span class="hljs-operator">=</span> req.getSession().getServletContext();<br><span class="hljs-comment">//通过ServletConfig对象获取</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext3</span> <span class="hljs-operator">=</span> getServletConfig().getServletContext();<br><span class="hljs-comment">//直接获取</span><br><span class="hljs-type">ServletContext</span> <span class="hljs-variable">servletContext4</span> <span class="hljs-operator">=</span> getServletContext();<br><span class="hljs-comment">//常用方法</span><br><span class="hljs-comment">//1.获取版本信息</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serverInfo</span> <span class="hljs-operator">=</span> req.getServletContext().getServerInfo();<br><span class="hljs-comment">//2.获取项目真实路径</span><br><span class="hljs-type">String</span> <span class="hljs-variable">realPath</span> <span class="hljs-operator">=</span> req.getServletContext().getRealPath(<span class="hljs-string">&quot;/&quot;</span>);<br></code></pre></td></tr></table></figure><img src="/2022/10/02/Servlet/context%E5%AF%B9%E8%B1%A1%E8%8E%B7%E5%8F%96%E4%B8%8E%E4%BD%BF%E7%94%A8.png" class="" title="context对象获取与使用"><h5 id="4-4-3-域对象"><a href="#4-4-3-域对象" class="headerlink" title="4.4.3 域对象"></a>4.4.3 域对象</h5><p>三大域对象</p><ul><li><p>req域对象 用的最多</p><p>在一次请求中有效 请求转发有效</p></li><li><p>session域对象</p><p>一次会话有效 请求转发和重定向都有效</p></li><li><p>servletContext域对象</p><p>整个应用程序都有效 服务器关闭失效</p></li></ul><h3 id="五-文件上传和下载"><a href="#五-文件上传和下载" class="headerlink" title="五. 文件上传和下载"></a>五. 文件上传和下载</h3><h4 id="5-1-上传"><a href="#5-1-上传" class="headerlink" title="5.1 上传"></a>5.1 上传</h4><p><strong>案例实现wen1+shangchuan.html</strong></p><img src="/2022/10/02/Servlet/%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6.png" class="" title="上传文件"><h4 id="5-2-下载"><a href="#5-2-下载" class="headerlink" title="5.2 下载"></a>5.2 下载</h4><p>​使用超链接时，如果遇到浏览器能够识别的资源，则会显示内容，如果遇到浏览器不能识别的资源，则会进行下载</p><p><strong>案例实现shangchuan.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;download/1.txt&quot;</span>&gt;</span>起的是查看效果<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;download/1.txt&quot;</span> <span class="hljs-attr">download</span>=<span class="hljs-string">&quot;文档.txt&quot;</span>&gt;</span>起的是下载效果<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>download属性代表下载的名字</p><h4 id="5-3-后台代码下载"><a href="#5-3-后台代码下载" class="headerlink" title="5.3 后台代码下载"></a>5.3 后台代码下载</h4><p><strong>案例实现wen2+shangchuan.html</strong></p><h3 id="六-cookie"><a href="#六-cookie" class="headerlink" title="六.cookie"></a>六.cookie</h3><h4 id="6-1-介绍"><a href="#6-1-介绍" class="headerlink" title="6.1 介绍"></a>6.1 介绍</h4><p>​是浏览器提供的一种技术，通过服务器的程序能将一些只须保存在客户端，或者在客户端进行处理的数据，放在本地的计算机上，不需要通过网络传输，因而提高网页处理的效率，并且能够减少服务器的负载，但是由于cookie是服务器端保存在客户端的信息，所以安全性很差，例如保存密码</p><h4 id="6-2-创建发送"><a href="#6-2-创建发送" class="headerlink" title="6.2 创建发送"></a>6.2 创建发送</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//cookie 创建</span><br><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kai&quot;</span>);<br><span class="hljs-comment">//发送cookie对象</span><br>resp.addCookie(cookie);<br></code></pre></td></tr></table></figure><img src="/2022/10/02/Servlet/%E5%88%9B%E5%BB%BAcookie.png" class="" title="创建cookie"><h4 id="6-3-cookie获取"><a href="#6-3-cookie获取" class="headerlink" title="6.3 cookie获取"></a>6.3 cookie获取</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//cookie获取 返回的是数组 需要遍历</span><br>Cookie[] cookies = req.getCookies();<br><span class="hljs-keyword">if</span>(cookies!=<span class="hljs-literal">null</span> &amp;&amp; cookies.length&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">for</span>(Cookie cookie:cookies)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cookie.getName();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> cookie.getValue();<br>        System.out.println(<span class="hljs-string">&quot;名称：&quot;</span>+name+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;value:&quot;</span>+value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2022/10/02/Servlet/%E8%8E%B7%E5%8F%96cookie.png" class="" title="获取cookie"><h4 id="6-4-到期时间"><a href="#6-4-到期时间" class="headerlink" title="6.4 到期时间"></a>6.4 到期时间</h4><p>取值</p><ul><li>负数 默认-1 关闭浏览器失效</li><li>0 表示删除cookie</li><li>正整数 存储的秒数 就算重启客户端电脑也会存活 实际存在在硬盘上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cookie</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cookie</span>(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;kai&quot;</span>);<br>cookie.setMaxAge(-<span class="hljs-number">1</span>);<br>resp.addCookie(cookie);<br></code></pre></td></tr></table></figure><h4 id="6-5-注意点"><a href="#6-5-注意点" class="headerlink" title="6.5 注意点"></a>6.5 注意点</h4><ul><li><p>保持于当前浏览器中</p></li><li><p>存中文会产生问题 </p><p>需要将中文URLEncoder进行编码</p><p>获取时 URLDecoder进行解码</p></li><li><p>同名问题 会覆盖原有</p></li><li><p>存放数量问题 有上限</p></li></ul><h4 id="6-6-路径问题"><a href="#6-6-路径问题" class="headerlink" title="6.6 路径问题"></a>6.6 路径问题</h4><ul><li><p>当前服务器下任何项目的任意资源都可获取cookie对象</p><p>setPath(“&#x2F;“)</p></li><li><p>当前项目下的资源可获取Cookie对象</p><p>setPath(“&#x2F;s01”) 写当前项目或不写</p></li><li><p>指定项目下的资源可获取cookie对象</p><p>setPath(“&#x2F;s02”)</p></li><li><p>指定目录下的资源可获取Cookie对象</p><p>setPath(“&#x2F;s01&#x2F;coo01”)</p></li></ul><p>​当访问路径包含了cookie的路径时，则该请求将带上该cookie</p><p>​当路径设为s01，那么s01&#x2F;coo01 也可以访问到</p><h3 id="七-其他实例"><a href="#七-其他实例" class="headerlink" title="七. 其他实例"></a>七. 其他实例</h3><h4 id="7-1-处理日期"><a href="#7-1-处理日期" class="headerlink" title="7.1 处理日期"></a>7.1 处理日期</h4><p>使用SimpleDateFormat对象来格式化Date对象</p><p><strong>案例实现time1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span> (<span class="hljs-string">&quot;yyyy.MM.dd  hh:mm:ss E a &quot;</span>);<br><span class="hljs-type">Date</span> <span class="hljs-variable">dNow</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>ft.format(dNow);<br></code></pre></td></tr></table></figure><h4 id="7-2-点击计数"><a href="#7-2-点击计数" class="headerlink" title="7.2 点击计数"></a>7.2 点击计数</h4><ul><li>在 init() 方法中初始化一个全局变量。</li><li>每次调用 Service方法时，都++。</li><li>如果需要，可以使用一个数据库表来存储全局变量的值在 destroy() 中。在下次初始化 Servlet 时，该值可在 init() 方法内被读取</li><li>如果只想对一个 session 会话计数一次页面点击，使用 isNew() 方法来检查该 session 会话是否已点击过相同页面。</li><li>可以通过显示全局计数器的值，来在网站上展示页面的总点击量。</li></ul><p><strong>案例实现</strong></p><h4 id="7-3-连接数据库"><a href="#7-3-连接数据库" class="headerlink" title="7.3 连接数据库"></a>7.3 连接数据库</h4><p>导jar包问题 官网下载</p><p>个人认为</p><p>启动mysql  管理员方式运行cmd net start mysql</p><p>navicat</p><p>这里我们直接实现点击计数的数存放到数据库中</p><p>连接数据库一般方法</p><ul><li><p>注册JDBC驱动器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Class.forName(<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);<br></code></pre></td></tr></table></figure></li><li><p>打开连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DriverManager.getConnection(数据库路径,用户名,密码);<br></code></pre></td></tr></table></figure></li><li><p>执行sql语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;SELECT shu FROM jishu&quot;</span>;<br><span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">sta</span> <span class="hljs-operator">=</span> con.prepareStatement(sql);<br><span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> sta.executeQuery();<br></code></pre></td></tr></table></figure></li><li><p>获取处理数据</p></li><li><p>关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">rs.close();<br>sta.close();<br></code></pre></td></tr></table></figure></li></ul><h4 id="7-4-登录"><a href="#7-4-登录" class="headerlink" title="7.4 登录"></a>7.4 登录</h4><p><strong>建表 2.sql</strong> 点击访问</p><p>架构</p><p>​      dao层 </p><p>​              impl &gt; UserDaoImpl  </p><p>​      domain层 User类</p><p>​      util层 jdbcUtil类 连接数据库</p><p>​      servlet层 login register</p><p><strong>案例实现+注册</strong></p><p>思路：</p><ul><li><p>servlet层获取到提交的数据</p></li><li><p>执行查询数据库逻辑</p><p>dao层</p><ul><li>初始化数据库</li><li>执行sql语言</li><li>得到匹配的数据</li><li>返回User对象</li></ul></li><li><p>根据返回值判断是否登陆成功</p></li><li><p>请求转发到success.jsp页面或者error.jsp页面</p></li></ul><h4 id="7-5-注册"><a href="#7-5-注册" class="headerlink" title="7.5 注册"></a>7.5 注册</h4><p>​思路与登陆相似。。。</p>]]></content>
    
    
    <categories>
      
      <category>Servlet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Servlet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BM算法</title>
    <link href="/2022/06/11/BM%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/11/BM%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>本文是对BM算法的介绍与分析</p><span id="more"></span><h2 id="BM算法"><a href="#BM算法" class="headerlink" title="BM算法"></a>BM算法</h2><p>一. 案例分析</p><p>​        目标串：abcdbcbabcbabd</p><p>​模式串：bcbabc</p><p>​1&gt;基本思路：从后往前比</p><p>​abc**&#x3D;&#x3D;d&#x3D;&#x3D;**bcbabcbabd</p><p>​bcb**&#x3D;&#x3D;a&#x3D;&#x3D;**bc</p><p>​a与d不相等   </p><p>​在模式串中找与d相同的字符—-不存在—-模式串直接跳到d的后面</p><p>​好后缀为bc 找到它的前缀也为bc—-将bc与好后缀对齐</p><p>​两者移动长度一致</p><p>​2&gt;abcdbc**&#x3D;&#x3D;c&#x3D;&#x3D;**abcbabc</p><p>​             bc**&#x3D;&#x3D;b&#x3D;&#x3D;**abc</p><p>​ c与b不相等  在模式串中找与c相同的字符—-下标为1,5—-此时坏字符规则为负数</p><p>​ 好后缀为abc，找到前缀为其字串bc，将前缀bc与目标串bc对齐</p><p>​3&gt;abcdbccabcbabc</p><p>​                 bcbabc</p><p>​！！！匹配成功！！！</p><p>二. 代码分析</p><p>​1&gt;坏字符规则：</p><p>​如果目标串中的字符和模式串的字符不匹配，那么就将目标串中这个字符叫做坏字符。</p><p>​如果遇到坏字符，可直接判断该字符在模式串中是否存在，如果不存在，则证明前面的部分肯定不会匹配成功，可以直接跳过，相比于BF算法挨个移动效率有较大提升</p><p>​如果坏字符在模式串中是存在的，而且可能为多个，为了匹配的精确度，可以取移动少的，即更靠后的相同字符处。</p><img src="/2022/06/11/BM%E7%AE%97%E6%B3%95/%E5%9D%8F%E5%AD%97%E7%AC%A6.png" class="" title="坏字符"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//坏字符规则</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">badchar</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">if</span>(str==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">memset</span>(BC,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(BC));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_str;i++)&#123;<br>        BC[str[i]]=i;<br>    &#125;<br>&#125;<br>  <br></code></pre></td></tr></table></figure><p>​2&gt;好后缀规则：</p><p>​匹配时，遇到坏字符之前的串已经与目标串匹配完毕，叫做好后缀</p><p>​三种情形：</p><p>​&lt;1&gt;在模式串中没有找到相同的串，直接移动至好后缀之后</p><p>​&lt;2&gt;找到好后缀的子串，移动至和好后缀子串重合的地方</p><p>​&lt;3&gt;如果好后缀的子串在模式串存在(与之前不同的是它必须是前缀串)，移动至该子串与前缀串重合的地方</p><p>​<img src="/2022/06/11/BM%E7%AE%97%E6%B3%95/%E5%A5%BD%E5%90%8E%E7%BC%80.png" class="" title="好后缀"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//创建suff数组(数组下标为后缀子串长度，值为与后缀子串匹配的起始下标)</span><br><span class="hljs-comment">//创建prefix数组(下标同上，值为与之匹配的是否为前缀子串)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">suffix</span><span class="hljs-params">(<span class="hljs-type">char</span> str[],<span class="hljs-type">int</span> suff[],<span class="hljs-type">bool</span> prefix[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(str==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_str<span class="hljs-number">-1</span>;i++)&#123;<br><span class="hljs-type">int</span> j=i;<span class="hljs-comment">//记录从当前i开始往前推 </span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; <br><span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;str[j]==str[l_str-k<span class="hljs-number">-1</span>])&#123;<br>j--;<br>k++;<br>suff[k]=j+<span class="hljs-number">1</span>;<span class="hljs-comment">// cout&lt;&lt;suff[k]&lt;&lt;&quot; &quot;;</span><br>&#125;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>) prefix[k]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//存在前缀串与之重合 </span><br>&#125; <br>&#125; <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">案例：EXAMPLE</span><br><span class="hljs-comment"> 0 1</span><br><span class="hljs-comment">-1 0</span><br><span class="hljs-comment">-1 0</span><br><span class="hljs-comment">-1 0</span><br><span class="hljs-comment">-1 0</span><br><span class="hljs-comment">-1 0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//三种情形</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">moveGC</span><span class="hljs-params">(<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> suff[],<span class="hljs-type">bool</span> prefix[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=l_str-j<span class="hljs-number">-1</span>;<span class="hljs-comment">//好后缀长度 </span><br><span class="hljs-keyword">if</span>(suff[k]!=<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//存在与后缀串相同的串 的位置 </span><br><span class="hljs-keyword">return</span> j-suff[k]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=k<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//寻找与后缀子串相同的串 </span><br><span class="hljs-keyword">if</span>(prefix[i])&#123;<span class="hljs-comment">//与后缀子串相同的串的必须是前缀串</span><br><span class="hljs-keyword">return</span> l_str-i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> l_str;<span class="hljs-comment">//没找到直接整段移动 </span><br>&#125;<br></code></pre></td></tr></table></figure><p>​3&gt;根据两种不同的移动方案，希望取更大的移动值。</p><p>三.完整代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> BC[<span class="hljs-number">256</span>];<span class="hljs-comment">//坏字符集</span><br><span class="hljs-type">int</span> l_str,l_ss; <br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">badchar</span><span class="hljs-params">(<span class="hljs-type">char</span> str[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(str==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span>;<br><span class="hljs-built_in">memset</span>(BC,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(BC));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_str;i++)&#123;<br>BC[str[i]]=i;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">suffix</span><span class="hljs-params">(<span class="hljs-type">char</span> str[],<span class="hljs-type">int</span> suff[],<span class="hljs-type">bool</span> prefix[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(str==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> ;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l_str<span class="hljs-number">-1</span>;i++)&#123;<br><span class="hljs-type">int</span> j=i;<span class="hljs-comment">//记录从当前i开始往前推 </span><br><span class="hljs-type">int</span> k=<span class="hljs-number">0</span>; <br><span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;str[j]==str[l_str-k<span class="hljs-number">-1</span>])&#123;<br>j--;<br>k++;<br>suff[k]=j+<span class="hljs-number">1</span>;<span class="hljs-comment">// cout&lt;&lt;suff[k]&lt;&lt;&quot; &quot;;</span><br>&#125;<br><span class="hljs-keyword">if</span>(j==<span class="hljs-number">-1</span>) prefix[k]=<span class="hljs-literal">true</span>;<span class="hljs-comment">//存在前缀串与之重合 </span><br>&#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">moveGC</span><span class="hljs-params">(<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> suff[],<span class="hljs-type">bool</span> prefix[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> k=l_str-j<span class="hljs-number">-1</span>;<span class="hljs-comment">//好后缀长度 </span><br><span class="hljs-keyword">if</span>(suff[k]!=<span class="hljs-number">-1</span>)&#123;<span class="hljs-comment">//存在与后缀串相同的串 的位置 </span><br><span class="hljs-keyword">return</span> j-suff[k]+<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=k<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<span class="hljs-comment">//寻找与后缀子串相同的串 </span><br><span class="hljs-keyword">if</span>(prefix[i])&#123;<br><span class="hljs-keyword">return</span> l_str-i;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> l_str;<span class="hljs-comment">//没找到直接整段移动 </span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BM</span><span class="hljs-params">(<span class="hljs-type">char</span> ss[],<span class="hljs-type">char</span> str[])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(ss==<span class="hljs-literal">NULL</span>||str==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>l_ss=<span class="hljs-built_in">strlen</span>(ss);<br>l_str=<span class="hljs-built_in">strlen</span>(str);<br><span class="hljs-type">int</span> suff[l_str];<span class="hljs-comment">//找到模式串的后缀匹配的字串的起始位置 </span><br><span class="hljs-type">bool</span> prefix[l_str];<span class="hljs-comment">//判断匹配的字串是否为前缀串 </span><br><span class="hljs-built_in">memset</span>(suff,<span class="hljs-number">-1</span>,<span class="hljs-built_in">sizeof</span>(suff));<br><span class="hljs-built_in">memset</span>(prefix,<span class="hljs-literal">false</span>,<span class="hljs-built_in">sizeof</span>(prefix));<br><span class="hljs-built_in">suffix</span>(str,suff,prefix);<br><span class="hljs-built_in">badchar</span>(str); <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;l_str;i++)&#123;<span class="hljs-comment">//测试suffix </span><br>cout&lt;&lt;suff[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;prefix[i]&lt;&lt;endl;<br>&#125;<br><span class="hljs-type">int</span> i=l_str<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(i&lt;=l_ss<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-type">int</span> j=l_str<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(j&gt;=<span class="hljs-number">0</span>&amp;&amp;ss[i]==str[j])&#123;<br>i--;<br><span class="hljs-keyword">if</span>((--j)==<span class="hljs-number">-1</span>)&#123;<br><span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span>;<span class="hljs-comment">//找到字串 </span><br>&#125;<br>&#125;<br><span class="hljs-type">int</span> moveBC=j-BC[ss[i]];<span class="hljs-comment">//坏字符移动位数</span><br><span class="hljs-type">int</span> moveGS=<span class="hljs-number">-10000</span>; <br><span class="hljs-keyword">if</span>(j&lt;l_str<span class="hljs-number">-1</span>) moveGS=<span class="hljs-built_in">moveGC</span>(j,suff,prefix);<br>i+=<span class="hljs-built_in">max</span>(moveBC,moveGS);<span class="hljs-comment">//cout&lt;&lt;i&lt;&lt;endl;</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> ss[]=<span class="hljs-string">&quot;THIS IS A SIMPLE EXAMPLE&quot;</span>;<br><span class="hljs-type">char</span> str[]=<span class="hljs-string">&quot;EXAMPLE&quot;</span>;<br>cout&lt;&lt;<span class="hljs-built_in">BM</span>(ss,str);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="(https://segmentfault.com/a/1190000022490177)">参考网站</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>假币问题</title>
    <link href="/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍假币问题，分为八币和n币</p><span id="more"></span><h1 id="假币问题"><a href="#假币问题" class="headerlink" title="假币问题"></a>假币问题</h1><ul><li><p><strong>一.实验题目</strong></p><p>在八枚外观相同的硬币中，有一枚是假币，并且已知假币与真币重量不同，但不知道假币与真币相比较是轻还是重，可以通过一架天平来任意比较两组硬币，设计一个高效的算法来检测出这枚硬币</p></li><li><p><strong>二.实验目的</strong></p><ul><li>深刻理解并掌握减治法的设计思想</li><li>提高应用减治法设计算法的技能</li><li>理解这样一个观点：建立正确的模型对于问题的求解是非常重要的</li></ul></li><li><p><strong>三.实验要求</strong></p><ul><li>设计减治法实现八币问题</li><li>设计实验程序，考察用减治技术是否高效</li><li>扩展算法，使之能处理n枚硬币中一枚假币的问题</li></ul></li><li><p><strong>四.算法实现分析及结果</strong></p><ul><li><p>八币问题</p><ul><li><pre><code class="c++">//确定x1和x2哪个为假币，并且判断重量(n币问题中的cmp也是该函数)void cmp(int x1,int x2,int k)&#123;    int ans=max(bi[x1],bi[x2]);    if(bi[x1]==bi[k])&#123;        if(ans==bi[x2])            cout&lt;&lt;&quot;假币为第&quot;&lt;&lt;x2&lt;&lt;&quot;个，且较重&quot;&lt;&lt;endl;        else            cout&lt;&lt;&quot;假币为第&quot;&lt;&lt;x2&lt;&lt;&quot;个，且较轻&quot;&lt;&lt;endl;    &#125;     else&#123;        if(ans==bi[x1])            cout&lt;&lt;&quot;假币为第&quot;&lt;&lt;x1&lt;&lt;&quot;个，且较重&quot;&lt;&lt;endl;        else            cout&lt;&lt;&quot;假币为第&quot;&lt;&lt;x1&lt;&lt;&quot;个，且较轻&quot;&lt;&lt;endl;    &#125;&#125;<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><br>+ ```c++<br>  void chaxun()<br>  &#123;<br>  int a=bi<span class="hljs-comment">[1]</span>+bi<span class="hljs-comment">[2]</span>+bi<span class="hljs-comment">[3]</span>;<br>  int b=bi<span class="hljs-comment">[4]</span>+bi<span class="hljs-comment">[5]</span>+bi<span class="hljs-comment">[6]</span>;<br>  int flag;<br>  if(a==b)&#123;<br>  //表明假币一定存在于另外两枚上<br>  cmp(7,8,1); <br>  &#125;<br>  else&#123;<br>  if((bi<span class="hljs-comment">[1]</span>+bi<span class="hljs-comment">[4]</span>)==(bi<span class="hljs-comment">[2]</span>+bi<span class="hljs-comment">[5]</span>))&#123;<br>  cmp(3,6,1);return ;<br>  &#125;<br>  if(a&gt;b) flag=1;<br>  else flag=2;<br>  if((bi<span class="hljs-comment">[1]</span>+bi<span class="hljs-comment">[4]</span>)&gt;(bi<span class="hljs-comment">[2]</span>+bi<span class="hljs-comment">[5]</span>))&#123;<br>  if(flag==1)<br>  cmp(1,5,2);<br>  else<br>  cmp(2,4,1);<br>  &#125;<br>  else&#123;<br>  if(flag==1)<br>  cmp(2,4,1);<br>  else<br>  cmp(1,5,2);<br>  &#125;<br>  &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>算法分析</p><img src="/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/%E5%85%AB%E5%B8%81%E9%97%AE%E9%A2%98%E6%80%9D%E8%B7%AF.png" class="" title="八币问题思路"></li><li><p>时间复杂度分析</p><p>比较次数：这里第二次的交换可以减少比较次数，一次比较即可确定六枚硬币中哪个是假币，前提是得记录第一次比较的情况</p></li><li><p>运行结果</p><img src="/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/%E5%85%AB%E5%B8%81%E9%97%AE%E9%A2%98%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="八币问题运行结果"></li></ul></li><li><p>n币问题</p><ul><li><pre><code class="c++">//计算这一部分的总重量int getsum(int begin,int last)&#123;    int sum=0;    for(int i=begin;i&lt;=last;i++)&#123;        sum+=bi[i];    &#125;    return sum;&#125;<figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>+ ```c++<br>  //分三段<br>  void chaxun(int <span class="hljs-built_in">first</span>,int <span class="hljs-built_in">last</span>)<br>  &#123;<br>  int n=<span class="hljs-built_in">last</span>-<span class="hljs-built_in">first</span>+<span class="hljs-number">1</span>;<br>  //分为三部分<br>  int nn=n/<span class="hljs-number">3</span>+n%<span class="hljs-number">3</span>/<span class="hljs-number">2</span>;<br>  int sum1=getsum(<span class="hljs-built_in">first</span>,<span class="hljs-built_in">first</span>+nn-<span class="hljs-number">1</span>);<br>  int sum2=getsum(<span class="hljs-built_in">first</span>+nn,<span class="hljs-built_in">first</span>+<span class="hljs-number">2</span>*nn-<span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span>(sum1!=sum2)&#123;<br>  //假币在当前比较的两部分当中<br>  <span class="hljs-keyword">if</span>(<span class="hljs-built_in">first</span>+<span class="hljs-number">2</span>*nn-<span class="hljs-number">1</span>-<span class="hljs-built_in">first</span>==<span class="hljs-number">1</span>)&#123;<br>  cmp(<span class="hljs-built_in">first</span>,<span class="hljs-built_in">first</span>+<span class="hljs-number">2</span>*nn-<span class="hljs-number">1</span>,<span class="hljs-built_in">last</span>+<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">last</span>=<span class="hljs-built_in">first</span>+<span class="hljs-number">2</span>*nn-<span class="hljs-number">1</span>;<br>  chaxun(<span class="hljs-built_in">first</span>,<span class="hljs-built_in">last</span>);<br>  &#125; <br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br>  //假币在第三堆里<br>  <span class="hljs-keyword">if</span>(n-<span class="hljs-built_in">first</span>-<span class="hljs-number">2</span>*nn+<span class="hljs-number">1</span>==<span class="hljs-number">1</span>)&#123;<br>  cmp(<span class="hljs-built_in">last</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n-<span class="hljs-built_in">first</span>-<span class="hljs-number">2</span>*nn+<span class="hljs-number">1</span>==<span class="hljs-number">2</span>)&#123;<br>  cmp(<span class="hljs-built_in">last</span>,<span class="hljs-built_in">last</span>-<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>  &#125; <br>  <span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-built_in">first</span>=<span class="hljs-built_in">first</span>+<span class="hljs-number">2</span>*nn;<br>  chaxun(<span class="hljs-built_in">first</span>,<span class="hljs-built_in">last</span>);<br>  &#125;<br>  &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>算法分析</p><img src="/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/n%E5%B8%81%E9%97%AE%E9%A2%98.png" class="" title="n币问题"></li><li><p>时间复杂度分析</p><p>T(3)&#x3D;1  n&#x3D;&#x3D;3</p><p>T(n)&#x3D;T(n&#x2F;3)+1   n&gt;3</p><p>O(n)&#x3D;$log_3n$</p></li><li><p>运行结果</p><img src="/2022/06/10/%E5%81%87%E5%B8%81%E9%97%AE%E9%A2%98/n%E5%B8%81%E9%97%AE%E9%A2%98%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="n币问题运行结果"></li></ul></li></ul></li><li><p><strong>五.实验体会</strong></p><p>八币问题的核心思想其实是减治，将其划分为三份，每次比较都可以确定一份有假币或者一份无假币，可以优化这一算法的是再第二次比较中除了拿出一组硬币，再交换一组硬币，这样一来可以比较一次确定假币在哪一组，然后拓展到n币问题，也是每次将硬币划分为三组，两组比较，逐步缩减范围，最后得到结果。</p><p>减治法和分治法类似，同样是把一个大问题划分为若干子问题，不同的是减治不需要每个子问题都求解，而是选取一组进行求解，可以说是退化版的分治法</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>减治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最近对问题</title>
    <link href="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/"/>
    <url>/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了最近对问题的两种算法，比较时间性能</p><span id="more"></span><h1 id="最近对问题"><a href="#最近对问题" class="headerlink" title="最近对问题"></a>最近对问题</h1><ul><li><p><strong>一.实验题目</strong></p><p>设<em>p</em>1&#x3D;(<em>x</em>1, <em>y</em>1), <em>p</em>2&#x3D;(<em>x</em>2, <em>y</em>2), …, <em>pn</em>&#x3D;(<em>xn</em>, <em>yn</em>)是平面上<em>n</em>个点构成的集合<em>S</em>，设计算法找出集合<em>S</em>中距离最近的点对</p></li><li><p><strong>二.实验目的</strong></p><ul><li>进一步掌握递归算法的设计思想以及递归程序的调试技术</li><li>理解这样一个观点：分治与递归经常同时应用在算法设计之中</li></ul></li><li><p><strong>三.实验要求</strong></p><ul><li>分别用蛮力法和分治法求解最近对问题</li><li>分析算法的时间性能，设计实验程序验证分析结论</li></ul></li><li><p><strong>四.算法实现分析及结果</strong></p><ul><li><p><strong>蛮力法</strong></p><ul><li><pre><code class="c++">//与分治法的公共部分struct point&#123;    int x,y;    point(int _x,int _y)&#123;        x=_x;y=_y;    &#125;&#125;;double Distance(point a,point b)&#123;    return sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));&#125; <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-operator"></span><br><span class="hljs-operator">* </span>```c++<br>  <span class="hljs-comment">//主要部分：双循环挨个遍历计算，取最小值</span><br>  <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;N;i++)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>;j&lt;N;j++)&#123;<br>  <span class="hljs-keyword">if</span>(ans&gt;<span class="hljs-constructor">Distance(<span class="hljs-params">p</span>[<span class="hljs-params">i</span>],<span class="hljs-params">p</span>[<span class="hljs-params">j</span>])</span>)&#123;<br>  ans=<span class="hljs-constructor">Distance(<span class="hljs-params">p</span>[<span class="hljs-params">i</span>],<span class="hljs-params">p</span>[<span class="hljs-params">j</span>])</span>;<br>  &#125;<br>  &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>算法分析</p><ul><li><p>算法思想</p><p>将每个点与其他点通过遍历求解距离，求出最小值</p></li><li><p>时间复杂度分析</p><p>时间消耗在每个点与其他所有点比较，(n-1)+(n-2)+…+(1)–&gt;$\frac{(n-1)*n}{2}$–&gt;O(${n^2}$)</p></li></ul></li><li><p>实验结果分析</p><img src="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/%E6%9C%80%E8%BF%91%E5%AF%B9%E6%9A%B4%E5%8A%9B%E8%BF%87%E7%A8%8B.png" class="" title="最近对暴力过程"></li><li><p>运行结果</p><img src="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/%E6%9C%80%E8%BF%91%E5%AF%B9%E6%9A%B4%E5%8A%9B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="最近对暴力运行结果"></li></ul></li><li><p><strong>分治法</strong></p><ul><li><pre><code class="c++">bool cmp(point a,point b)//按照纵坐标排序&#123;    return a.y&lt;b.y;&#125;<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br>* ```c++<br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp1</span><span class="hljs-params">(point a,point b)</span><span class="hljs-comment">//按照横坐标排序</span></span><br><span class="hljs-function">  </span>&#123;<br>  <span class="hljs-keyword">return</span> a.x&lt;b.x;<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="c++">double Closest(point S[],int low,int high)//参数S[]是已经按横坐标排好序的&#123;    double d1,d2,d3,d;    int mid,i,j,index;    point P[8];    if(high-low==1) //只有两个点的情况可以直接计算返回        return Distance(S[low],S[high]);    if(high-low==2)&#123;//只有三个点也可直接计算返回结果        return min(Distance(S[low],S[low+1]),min(Distance(S[low+1],S[high]),Distance(S[low],S[high])));    &#125;    mid=(low+high)/2;    d1=Closest(S,low,mid);//计算左面部分    d2=Closest(S,mid+1,high);//计算右面部分    d=min(d1,d2);    //cout&lt;&lt;d1&lt;&lt;&quot; &quot;&lt;&lt;d2&lt;&lt;&quot; &quot;&lt;&lt;d&lt;&lt;endl;    index=0;    //计算在划分部分左右部分的距离是否比两边的距离小    for(i=mid;i&gt;=low&amp;&amp;(S[mid].x-S[i].x&lt;d);i--) P[index++]=S[i];    for(i=mid+1;i&lt;=high&amp;&amp;(S[i].x-S[mid].x&lt;d);i++) P[index++]=S[i];    sort(P,P+index,cmp);//按纵坐标进行排序    for(i=0;i&lt;index;i++)&#123;        for(j=i+1;j&lt;index;j++)&#123;            if(P[j].y-P[i].y&gt;=d) break;            else&#123;                d3=Distance(P[i],P[j]);                d=min(d,d3);            &#125;        &#125;    &#125;    return d;&#125;</code></pre></li><li><p>算法分析</p><ul><li><p>算法思想</p><p>分治法，划分成两部分，分别计算各部分中的最近对，然后合并子问题，求解分别属于两部分中的点的距离是否会比两部分各自的最近对小</p><img src="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/%E6%9C%80%E8%BF%91%E5%AF%B9%E5%88%86%E6%B2%BB%E6%B3%95%E8%BF%87%E7%A8%8B.png" class="" title="最近对分治法过程"></li><li><p>时间复杂度</p><p>n&#x3D;2,3时–&gt;O(1)</p><p>n&gt;3时–&gt;T(n)&#x3D;2T(n&#x2F;2)+n–&gt;O(n*$log_2n$)</p></li></ul></li><li><p>运行结果</p><img src="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/%E5%88%86%E6%B2%BB%E6%B3%95%E6%9C%80%E8%BF%91%E5%AF%B9%E6%95%B0%E6%8D%AE.png" class="" title="分治法最近对数据"><img src="/2022/06/10/%E6%9C%80%E8%BF%91%E5%AF%B9%E9%97%AE%E9%A2%98/%E6%9C%80%E8%BF%91%E5%AF%B9%E5%88%86%E6%B2%BB%E6%B3%95%E8%BF%90%E8%A1%8C%E6%88%AA%E5%9B%BE.png" class="" title="最近对分治法运行截图"></li></ul></li></ul></li><li><p><strong>五.实验体会</strong></p><p>​通过利用分治法求解最近对问题，熟悉了分治法的三个阶段，划分，求解子问题，合并子问题，划分是将初始问题划分成规模比原来小的同类型问题，求解子问题通常利用递归的方式，再把各个子问题合并起来，算法的效率在很大程度上依赖于合并这一部分。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最大子段和</title>
    <link href="/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/"/>
    <url>/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了最大子段和的三种算法，比较时间性能</p><span id="more"></span><h1 id="最大子段和"><a href="#最大子段和" class="headerlink" title="最大子段和"></a>最大子段和</h1><ul><li><p><strong>一.实验题目</strong></p><p>给定由<em>n</em>个整数组成的序列(<em>a</em>1, <em>a</em>2, …, <em>an</em>)，求该序列形如   的子段和的最大值，当所有整数均为负整数时，其最大子段和为0</p></li><li><p><strong>二.实验目的</strong></p><ul><li>深刻掌握动态规划法的设计思想并能熟练运用</li><li>理解这样一个观点：同样的问题可以用不同的方法解决，一个好的算法是反复努力和重新修正的结果</li></ul></li><li><p><strong>三.实验要求</strong></p><ul><li>分别用蛮力法、分治法和动态规划法设计最大子段和问题的算法</li><li>比较不同算法的时间性能</li><li>给出测试数据，写出程序文档</li></ul></li><li><p><strong>四.算法实现分析及结果</strong></p><ul><li><p>蛮力法</p><ul><li><pre><code class="c++">#include&lt;bits/stdc++.h&gt;using namespace std;int ans,m;void sum(vector&lt;int&gt; v)&#123;    for(int i=0;i&lt;v.size();i++)&#123;        if(v[i]&lt;0) continue;        else&#123;            ans=0;            for(int j=i;j&lt;v.size();j++)&#123;                ans+=v[j];                if(m&lt;ans) m=ans;            &#125;        &#125;    &#125;&#125;int main()&#123;    vector&lt;int&gt; v;    int N;    cin&gt;&gt;N;    for(int i=0;i&lt;N;i++)&#123;        int a;        cin&gt;&gt;a;        v.push_back(a);    &#125;    sum(v);    cout&lt;&lt;m;    return 0;&#125;<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs excel"><br>  + 算法分析<br><br>    + 算法思想<br><br>      遍历，从每一个非<span class="hljs-number">0</span>的位置开始，将后面的数累加，如果累加和小于之前所计算的最大值，则ans记录为该值，直到循环结束<br><br>    + 时间复杂度分析<br><br>      最大时间复杂度为循环<span class="hljs-built_in">n</span>次，每次循环中再循环<span class="hljs-built_in">n</span>-i次----&gt;O(<span class="hljs-built_in">n</span>)=<span class="hljs-built_in">n</span>*(<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>----&gt;O($<span class="hljs-built_in">n</span>^<span class="hljs-number">2</span>$)<br><br>  + 实验结果分析<br><br>    &#123;% asset_img 最大子段和暴力.png 最大子段和暴力%&#125;<br><br>  + 运行结果<br><br>    &#123;% asset_img 最大字段和暴力运行结果.png 最大字段和暴力运行结果%&#125;<br><br>+ 分治法<br><br>  + ```c++<br>    <span class="hljs-built_in">int</span> MaxSum(<span class="hljs-built_in">int</span> a[],<span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>,<span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>)<br>    &#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>,midSum=<span class="hljs-number">0</span>,leftsum=<span class="hljs-number">0</span>,rightsum=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> center,<span class="hljs-symbol">s1</span>,<span class="hljs-symbol">s2</span>,lefts,rights;<br>    <span class="hljs-built_in">if</span>(<span class="hljs-built_in">left</span>==<span class="hljs-built_in">right</span>) <span class="hljs-built_in">sum</span>=a[<span class="hljs-built_in">left</span>];<br>    else&#123;<br>    center=(<span class="hljs-built_in">left</span>+<span class="hljs-built_in">right</span>)/<span class="hljs-number">2</span>;<br>    leftsum=MaxSum(a,<span class="hljs-built_in">left</span>,center);<br>    rightsum=MaxSum(a,center+<span class="hljs-number">1</span>,<span class="hljs-built_in">right</span>);<br>    <br>    <span class="hljs-symbol">s1</span>=<span class="hljs-number">0</span>;lefts=<span class="hljs-number">0</span>;<br>    for(<span class="hljs-built_in">int</span> i=center;i&gt;=<span class="hljs-built_in">left</span>;i--)&#123;<br>    lefts+=a[i];<br>    <span class="hljs-symbol">s1</span>=<span class="hljs-built_in">max</span>(<span class="hljs-symbol">s1</span>,lefts);<br>    &#125;<br>    <br>    <span class="hljs-symbol">s2</span>=<span class="hljs-number">0</span>;rights=<span class="hljs-number">0</span>;<br>    for(<span class="hljs-built_in">int</span> j=center+<span class="hljs-number">1</span>;j&lt;=<span class="hljs-built_in">right</span>;j++)&#123;<br>    rights+=a[j];<br>    <span class="hljs-symbol">s2</span>=<span class="hljs-built_in">max</span>(<span class="hljs-symbol">s2</span>,rights);<br>    &#125;<br>    <br>    midSum=<span class="hljs-symbol">s1</span>+<span class="hljs-symbol">s2</span>;<br>    <span class="hljs-built_in">sum</span>=<span class="hljs-built_in">max</span>(midSum,<span class="hljs-built_in">max</span>(leftsum,rightsum));<br>    &#125;<br>    return <span class="hljs-built_in">sum</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><p>算法分析</p><ul><li><p>算法思想</p><p>将序列划分为两份，递归求解左右两部分，然后计算一部分再左面，另一部分在右面的情况，最后选取三者最小即为ans</p></li><li><p>时间复杂度分析</p><p>当n&#x3D;&#x3D;1时 T(n)&#x3D;1</p><p>当n&gt;1时   T(n)&#x3D;2*T(n&#x2F;2)+1—-&gt;O(n $log_2n$)</p></li></ul></li><li><p>实验结果分析</p><img src="/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90.png" class="" title="最大子段和分治算法分析"></li><li><p>运行结果</p><img src="/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C%E5%88%86%E6%B2%BB%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="最大子段和分治运行结果"></li></ul></li><li><p>动态规划法</p><ul><li><pre><code class="c++">//只要前面的数的和不小于零加上下一个一定比下一个大int MaxSum(int a[],int n)&#123;    int pre=0;    int sum=0;    for(int i=0;i&lt;n;i++)&#123;        if(pre&lt;=0) pre=a[i];        else pre+=a[i];        sum=max(sum,pre);    &#125;    return sum;&#125; </code></pre></li><li><p>算法分析</p><ul><li><p>算法思想</p><p>满足最优性原理，设a 1,a 2,a 3,–,an是最长字段是起始位置到n的最长字段和，如果b 1,    b 2,b 3,–,b n是起始位置到n-1的最大字段和，则b 1到an的和要大于a 1到a n，从而导致矛盾，所以满足最优性原理</p><p>状态方程：$b[j]&#x3D;max(\sum_{k&#x3D;i}^{j}a[k])   0&lt;&#x3D;i&lt;j$</p><p>——&gt;&gt;&gt;当b[j-1]&gt;0时,b[j]&#x3D;b[j-1]+a[j],else b[j]&#x3D;a[j]   选取其中的最值</p><p>只与前一项有关，用pre记录b[j-1]</p></li><li><p>时间复杂度</p><p>只需一层循环遍历一次—-&gt;O(n)</p></li></ul></li><li><p>实验结果分析</p><img src="/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E5%8A%A8%E8%A7%84%E6%80%9D%E8%B7%AF.png" class="" title="最大字段和动规思路"></li><li><p>运行结果</p><img src="/2022/06/09/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%AE%B5%E5%92%8C/%E6%9C%80%E5%A4%A7%E5%AD%97%E6%AE%B5%E5%92%8C%E6%9A%B4%E5%8A%9B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="最大字段和暴力运行结果"></li></ul></li></ul></li><li><p><strong>五.实验体会</strong></p><p>计算最大子段和，首先利用了暴力法求解，两层循环结束，思路清晰，时间复杂度为平方级，然后用分治法，递归求解两部分，在两部分和公共部分三段中取最大值，即为结果时间复杂度为n*log级，最后是动态规划法，重点在于找到合适的状态转移方程，递推下去求出结果。动态规划型题首先得证明最优性原理，说明可以先求解子问题，该子问题解确定一个阶段，下一阶段解可以利用这一结果，避免了大量的重复计算.</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>分治</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习资料</title>
    <link href="/2022/04/03/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <url>/2022/04/03/%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="064364bd4d626d19185534d1408a20042226ed1187b73f1db51395aa7d963e38">71a123257dee39599aa24fc97447e3992fb8626eced1d83c8e7891cb2cc432d68eccfa7b2a41ed59cab0a4480a4b3e606166e5e578cd5540754ead8779310dca31d06dcad30564ddf8d2cd5aac15ee67ad9f4f4ce381e97c2d140dbbd282887f7a6d6b2dccb22e685e0f49322e7a4ccb7ff7cfb4b34f3de7f1c90f2b715a26cbd545cc9f66781e40bd4c5d548f3e08a2c3530fe22cdcee58480bf06c031017e117b849ecc645f316b3cf8979fa947afd8503cfb0c5c5d1c5f7547b546266d15dc4157bdfdc47b500336ad0677987c82d54e6ea060a2c0032ee89afa25207db7db139e249229dc35a4c2f397b85bf21e040e5bf41f01b5cd631077a0224913a31c05795fe6725187a69033deed2859f05b5dbecc73738cdf75c530928ece4dd03619d0a250fdbead15e0576f8355cf9dc3d0f81d7b9903d10ebb85c3af0c2192226f166a30e813895ed86373244b4e86100b96216c6356d2a5bee433ab0c53e4ddb7bbb4217a8881ab6742f6c6d81f018246323e01e22e11a480d63d9d1f344240df56d3eb1a50a8aae5541b953858b223506cc110c53aadde90c435e095220c72da2a36b6b3f17eddb2309cbbb1337611581e595040fa51d4c9547a385c9f61a5f6da1421cbeda5199d28dc36904f2b06ac91781c5d1b05deaed33234b900c1a35e629d7913d7684019d7f1bd5e57f6b394a49d2df3ca6351147ef3ad8c2adf07d84ebae5c81ea8e277bdb15eb5f0e632123467bd3840c900cc53489359f6f431636c1a5e0c4e62d2ec8c37be15feee441393aa361e8c38181fb1f2966dcd99afff670f211ee1e1df43c73dc25f3d8570932bfd826afd4769f48ee53bf719f4e8e470f7ab91a6fc88784a73ea35d3d222ec14b98d99caf114e79ce132ccc5bbd400b0606754cacb92bc81247ba37c8f39245c177a976a1e23daf3cde314f4a1d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码查看</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>学习资料</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习资料</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS</title>
    <link href="/2022/03/24/CSS/"/>
    <url>/2022/03/24/CSS/</url>
    
    <content type="html"><![CDATA[<p>本文对CSS的一些简单用法进行介绍，希望对您有所帮助</p><span id="more"></span><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="一-CSS定义及引用"><a href="#一-CSS定义及引用" class="headerlink" title="一. CSS定义及引用"></a>一. CSS定义及引用</h2><blockquote><ul><li><p>层叠样式表</p></li><li><p>代码结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">选择器&#123;<br>属性名:属性值<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>css引用</p><ul><li><p>行内样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;css属性名:css属性值;&quot;</span>&gt;</span><br>   kaikai <br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>内嵌样式</p><p>使用style标签置于head标签对中</p></li><li><p>外链样式</p><p>使用link标签放置于head中</p><p>通过href获取css文件的相对路径 rel属性设为stylesheet</p></li><li><p>导入式</p><p>在style标签中通过 <strong>@import</strong> 导入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-keyword">@import</span> url (<span class="hljs-string">&quot;style.css&quot;</span>);</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p>导入式与外链式的区别</p><ul><li><p>加载效率不如外链</p></li><li><p>导入式会在最后去渲染样式会让用户先看到无样式的界面</p><p>外链式会首先加载link标签并渲染样式</p></li></ul><p>所以基本上采用外链式</p></li><li><p>css引用优先级</p><p>行内样式 &gt; 内嵌样式 &gt; 外链样式 &gt; 导入样式 </p></li><li><p>link引用css文件的优点</p><ul><li>实现内容与表现分离 有利于维护</li><li>减少css代码的编写量</li><li>link与js文件以及body内的东西多线程加载，效率更高</li><li>有利于修改，单文件修改，全网站生效</li><li>浏览器会对css进行缓存，进一步减少加载时间</li><li>对搜索引擎友好，有利于SEO</li></ul></li></ul></blockquote><h2 id="二-CSS选择器"><a href="#二-CSS选择器" class="headerlink" title="二. CSS选择器"></a>二. CSS选择器</h2><blockquote><ul><li><p>2.1css基础选择器</p><ul><li><p>标签选择器 — weighting 权重：1</p><p>会对页面<strong>所有</strong>该类型标签进行选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>   <span class="hljs-attribute">width</span>:<span class="hljs-number">1px</span>;<br>   <span class="hljs-attribute">height</span>:<span class="hljs-number">1px</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类选择器 — weighting 权重：10</p><p>尽量代表<strong>实际功能</strong></p><p>比如：一张图片 –&gt; show_img; 一个字号16px的 —&gt; fz_16</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.show_img</span> &#123;<br>   <span class="hljs-attribute">width</span>:<span class="hljs-number">1px</span>;<br>   <span class="hljs-attribute">height</span>:<span class="hljs-number">1px</span>;<br>&#125;<br><span class="hljs-comment">/* 也可以并列写 但中间不可有空格 */</span><br><span class="hljs-selector-class">.show_img</span><span class="hljs-selector-class">.fz_16</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>ID选择器 — weighting 权重：100</p><p>在页面中是<strong>唯一</strong>的，不是迫不得已不使用，防止后期维护困难</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#first</span>&#123;<br>    ...<br>&#125;<br><span class="hljs-selector-id">#second</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通用选择器 — weighting 权重：0</p><p>存在<strong>性能问题</strong> 一般高质量网页不使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>2.2后代选择器</p><p>通过<strong>空格</strong>分隔</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> <span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">span</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.3子选择器</p><p>与后代选择器的区别在于子选择器<strong>不能跨级</strong> 只能选取当前级别的往内一层</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&gt;<span class="hljs-selector-tag">p</span>&gt;<span class="hljs-selector-tag">span</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>2.4伪类选择器</p><p>通过一定的触发事件来实现效果</p><ul><li><p>:hover 鼠标<strong>悬浮</strong>于该元素上设置的样式</p></li><li><p>:active 鼠标<strong>悬点击</strong>时元素上设置的样式</p></li><li><p>:visited 不建议使用 <strong>悬点击后</strong>元素上设置的样式</p></li><li><p>:focus 元素<strong>获得焦点后</strong>设置的样式</p></li><li><p>:target 唯一的页面元素其ID与当前的URL片段对应</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#p1&quot;</span>&gt;</span>to p1<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#p2&quot;</span>&gt;</span>to p2<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p1&quot;</span>&gt;</span><br>    楷楷1<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;p2&quot;</span>&gt;</span><br>    楷楷2<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>------------------------------<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">   <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:target</span>&#123;</span><br><span class="language-css"><span class="hljs-attribute">background-color</span>:gold;</span><br><span class="language-css">   &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><img src="/2022/03/24/CSS/1.png" class="" width="1"><img src="/2022/03/24/CSS/2.png" class="" width="2"></li><li><p>2.5群组选择器</p><p>适用于多个选择器使用同种样式，每个逗号间权重分开计算</p><p><strong>可以多使用</strong>，有效分类管理，提升维护性，节省代码量，减小传输体积使页面加载速度快</p></li><li><p>2.6同级元素选择器</p><p>选定指定元素同级的下一个或后面的全部</p><p><strong>+</strong> &#x2F;  <strong>~</strong></p></li><li><p>2.7属性选择器</p><p>将一个标签的属性作为选择器使用</p><ul><li><p>将一个属性作为选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[src]</span>&#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>将一个属性值对作为选择器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[class = <span class="hljs-string">&quot;first&quot;</span>]</span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>正则</p><ul><li><pre><code class="css">//匹配以什么为开始[class ^= &quot;first&quot;]&#123;    ...&#125;<figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br>+ ```css<br>  <span class="hljs-comment">//匹配以什么结束</span><br>  [<span class="hljs-class"><span class="hljs-keyword">class</span> </span>$= <span class="hljs-string">&quot;second&quot;</span>]&#123;<br>  ...<br>  &#125;<br></code></pre></td></tr></table></figure></code></pre></li><li><pre><code class="css">//匹配子表达式出现任意位置[class *= &quot;third&quot;]&#123;    ...&#125;<figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>+ ```css<br>  [class ~= <span class="hljs-string">&quot;www&quot;</span>]&#123;<br>  ...<br>  &#125;<br></code></pre></td></tr></table></figure>只有在class等于www或者www后有一个或多个空格时选择</code></pre></li><li><p>&#96;&#96;&#96;css<br>[class |&#x3D; “fourth”]{<br>…<br>}</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs nim"><br>      只有在class等于fourth或者fourth-时选择<br><br>+ <span class="hljs-number">2</span>.<span class="hljs-number">8</span>权重<br><br>  |    选择器    | 权重值 |       示例        |<br>  | :----------: | :----: | :---------------: |<br>  |  通用选择器  |   <span class="hljs-number">0</span>    |       *****       |<br>  |  标签选择器  |   <span class="hljs-number">1</span>    |      **<span class="hljs-keyword">div</span>**      |<br>  | 伪元素选择器 |   <span class="hljs-number">1</span>    | **p:first-child** |<br>  |   类选择器   |   <span class="hljs-number">10</span>   |    **.ew_16**     |<br>  |  属性选择器  |   <span class="hljs-number">10</span>   | **[class=<span class="hljs-string">&quot;..&quot;</span>]**  |<br>  |  伪类选择器  |   <span class="hljs-number">10</span>   |    **a:hover**    |<br>  |   <span class="hljs-type">ID</span>选择器   |  <span class="hljs-number">100</span>   |     **<span class="hljs-comment">#user**     |</span><br><br>  类似于子选择器 后代 同级 群组采用叠加<br><br>  例：<br><br>  ```css<br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>=<span class="hljs-number">4</span>*/<br>  table tbody tr td<span class="hljs-meta">&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">10</span>=<span class="hljs-number">11</span>*/<br>  form[name=<span class="hljs-string">&quot;user-form&quot;</span>]<span class="hljs-meta">&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">10</span>+<span class="hljs-number">10</span>=<span class="hljs-number">21</span>*/<br>  form[name=<span class="hljs-string">&quot;user-form&quot;</span>].data-form<span class="hljs-meta">&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">10</span>=<span class="hljs-number">13</span>*/<br>  form&gt;<span class="hljs-keyword">div</span>&gt;label[<span class="hljs-keyword">for</span>]<span class="hljs-meta">&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">10</span>+<span class="hljs-number">1</span>+<span class="hljs-number">100</span>=<span class="hljs-number">112</span>*/<br>  picture.photo&gt;img<span class="hljs-comment">#photo-1&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">10</span>+<span class="hljs-number">10</span>=<span class="hljs-number">24</span>*/<br>  form <span class="hljs-keyword">div</span>&gt;label + input[<span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;radio&quot;</span>][name=<span class="hljs-string">&quot;gender&quot;</span>]<span class="hljs-meta">&#123;...&#125;</span><br>  /*<span class="hljs-number">1</span>+<span class="hljs-number">1</span>+<span class="hljs-number">100</span>+<span class="hljs-number">1</span>+<span class="hljs-number">10</span>+<span class="hljs-number">1</span>+<span class="hljs-number">10</span>=<span class="hljs-number">124</span>*/<br>  header&gt;nav<span class="hljs-comment">#main-nav&gt;ul.nav-list a:hover&#123;...&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><p><em><strong>尽量采用低权重原则</strong></em></p></li><li><p>2.9多重样式的优先级</p><p><a href="https://www.eveningwater.com/static/other/CSS/cssStyleLevel.html">css样式优先级</a></p></li></ul></blockquote><h2 id="三-CSS字体样式"><a href="#三-CSS字体样式" class="headerlink" title="三.CSS字体样式"></a>三.CSS字体样式</h2><blockquote><h4 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h4><p>​文字的基本属性为<strong>font</strong></p><h4 id="3-2-字体风格-font-style"><a href="#3-2-字体风格-font-style" class="headerlink" title="3.2 字体风格 font-style"></a>3.2 字体风格 font-style</h4><p>​主要功能是将字体设置为<strong>斜体</strong>，效果和i和em标签一致</p><ul><li>normal 默认</li><li>italic 斜体</li><li>oblique 斜体再斜</li></ul><h4 id="3-3-字体粗细-font-weight"><a href="#3-3-字体粗细-font-weight" class="headerlink" title="3.3 字体粗细 font-weight"></a>3.3 字体粗细 font-weight</h4><p>​设置字体粗细<strong>程度</strong></p><ul><li>normal 默认</li><li>bold 粗体</li><li>bolder 更粗的字体</li><li>lighter 更细的字体</li><li>100 - 900 ：400为normal 700为bold 步长为100</li></ul><h4 id="3-4-字体大小-font-size"><a href="#3-4-字体大小-font-size" class="headerlink" title="3.4 字体大小 font-size"></a>3.4 字体大小 font-size</h4><p>​设置字体大小 必须加单位 主流字号是16px</p><h4 id="3-5-字体系列-font-family"><a href="#3-5-字体系列-font-family" class="headerlink" title="3.5 字体系列 font-family"></a>3.5 字体系列 font-family</h4><p>​通常有 宋体 黑体 楷体 ，<strong>微软雅黑</strong>为最常用的设计字体</p><p>​后面可跟多个值 浏览器会自动往后找 找不到则用默认</p><h4 id="3-6-CSS字体组合写法"><a href="#3-6-CSS字体组合写法" class="headerlink" title="3.6 CSS字体组合写法"></a>3.6 CSS字体组合写法</h4><p>​在font  后面直接跟</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class1</span>&#123;<br>    <span class="hljs-comment">/*字体风格(font-style) 字体粗细(font-weight) 字体大小(font-size) 字体系列(font-family)*/</span><br>    <span class="hljs-attribute">font</span>: normal bold <span class="hljs-number">26px</span> <span class="hljs-string">&quot;微软雅黑&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-7-创建引用特殊字体-font-face"><a href="#3-7-创建引用特殊字体-font-face" class="headerlink" title="3.7 创建引用特殊字体 @font-face"></a>3.7 创建引用特殊字体 @font-face</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@font-face</span>&#123;<br>    <span class="hljs-comment">/*该名称是自己定义的*/</span><br>    <span class="hljs-attribute">font-family</span>:kaikai;<br>    <span class="hljs-attribute">src</span>:<span class="hljs-built_in">url</span>(<span class="hljs-string">&quot;...&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-8-CSS字体颜色"><a href="#3-8-CSS字体颜色" class="headerlink" title="3.8 CSS字体颜色"></a>3.8 CSS字体颜色</h4><p>​color属性</p></blockquote><h2 id="四-CSS文本样式"><a href="#四-CSS文本样式" class="headerlink" title="四.CSS文本样式"></a>四.CSS文本样式</h2><blockquote><h4 id="4-1-文本水平对齐-text-align"><a href="#4-1-文本水平对齐-text-align" class="headerlink" title="4.1 文本水平对齐 text-align"></a>4.1 文本水平对齐 text-align</h4><p>​包括 left center right justify(两端对齐)</p><p>​当 text-align 设置为justify时 还有一个新的属性text-align-last ，作用是设置文本中最后一行的对齐方式</p><p>​可以等于的值同上</p><h4 id="4-2-文本垂直对齐-vertical-align"><a href="#4-2-文本垂直对齐-vertical-align" class="headerlink" title="4.2 文本垂直对齐 vertical-align"></a>4.2 文本垂直对齐 vertical-align</h4><ul><li><p>baseline 默认</p></li><li><p>top 把文本元素的顶端与行中最高的文本元素顶端对齐</p></li><li><p>middle 以文本元素中心点为参照与行内其他文本元素的中心进行对齐</p></li><li><p>bottom 把文本元素的底端与行中最低的文本元素顶端对齐</p></li><li><p>sub 以文本元素的下标为参照与其他文本元素进行对齐</p></li><li><p>super 以文本元素的上标为参照与其他文本元素进行对齐</p></li><li><p>text-top 把文本元素的顶端与行中最高的字体顶端对齐</p></li><li><p>text-bottom 把文本元素的底端与行中最低的字体顶端对齐</p></li><li><p>百分数 使用line-height 属性的百分比值来排列元素，允许使用负值</p><p>不能对单个元素生效 至少需要2个在同一行内的行内元素或行内块元素才能生效</p></li></ul><h4 id="4-3-段落首行缩进-text-indent"><a href="#4-3-段落首行缩进-text-indent" class="headerlink" title="4.3 段落首行缩进 text-indent"></a>4.3 段落首行缩进 text-indent</h4><p>​中文布局一般使用 <strong>2em</strong></p><p>​实际项目中，统一控制首行缩进 如果某一段不需要缩进，则设置高一级的选择器使text-indent&#x3D;0;</p><h4 id="4-4-文本装饰线-text-decoration"><a href="#4-4-文本装饰线-text-decoration" class="headerlink" title="4.4 文本装饰线 text-decoration"></a>4.4 文本装饰线 text-decoration</h4><p>​a标签默认带一装饰线(下划线) 原因是将该属性设置为 underline</p><ul><li>none 默认 不显示 或者 消除已有的装饰线(需要更高的权重)</li><li>underline 下划线 作用与u标签相同</li><li>overline 上划线</li><li>line-through 中划线 作用同 s 和 del 标签</li></ul><p>text-decoration-line属性 值与上面一致</p><p>text-decoration-style属性</p><ul><li>solid 实线</li><li>double 双实线</li><li>dotted 点线</li><li>dashed 虚线</li><li>wavy 波浪线</li></ul><p>text-decoration-color 设置颜色</p><p>也可以缩写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">       <span class="hljs-comment">/*位置 类型                  颜色*/</span><br><span class="hljs-attribute">text-decoration</span>:(text-decoration-line) (text-decoration-style) (text-decoration-color);<br><span class="hljs-comment">/*使用text-decoration 值如果没有被赋值 则会是initial*/</span><br></code></pre></td></tr></table></figure><h4 id="4-5-英文字母大小写转换-text-transform"><a href="#4-5-英文字母大小写转换-text-transform" class="headerlink" title="4.5 英文字母大小写转换 text-transform"></a>4.5 英文字母大小写转换 text-transform</h4><ul><li>none 默认</li><li>capitalize 首字母大写</li><li>uppercase 所有字母大写</li><li>lowercase 所有字母小写</li></ul><h4 id="4-6-文本的阴影-text-shadow"><a href="#4-6-文本的阴影-text-shadow" class="headerlink" title="4.6 文本的阴影 text-shadow"></a>4.6 文本的阴影 text-shadow</h4><ul><li>水平方向阴影 hoff-shadow 正数表示向右偏移 负数向左 单位为px</li><li>垂直方向偏移 voff-shadow 正数向下 负数向上</li><li>阴影模糊距离 blur  正数表示阴影模糊单位距离 距离越大模糊程度越高</li><li>阴影的颜色 color</li></ul><h4 id="4-7-段落文本行高-line-height"><a href="#4-7-段落文本行高-line-height" class="headerlink" title="4.7 段落文本行高 line-height"></a>4.7 段落文本行高 line-height</h4><p>设置行内元素中文本字符在一行中所占据的高度</p><p>小妙用：当文本元素只有一行时，可以将line-height&#x3D;height达到垂直居中的效果</p><h4 id="4-8-单词的间距-word-spacing"><a href="#4-8-单词的间距-word-spacing" class="headerlink" title="4.8 单词的间距 word-spacing"></a>4.8 单词的间距 word-spacing</h4><p>设置英文单词间距 也就是调整空格字符的距离 可以为负数</p><h4 id="4-9-字符的间距-letter-spacing"><a href="#4-9-字符的间距-letter-spacing" class="headerlink" title="4.9 字符的间距 letter-spacing"></a>4.9 字符的间距 letter-spacing</h4><p>调整每个字符的距离</p><h4 id="4-10-单词自动换行-word-break"><a href="#4-10-单词自动换行-word-break" class="headerlink" title="4.10 单词自动换行 word-break"></a>4.10 单词自动换行 word-break</h4><p>浏览器对于长单词，如果没有空格则不会换行</p><ul><li>normal 默认换行规则</li><li>break-all 允许单词内换行</li><li>keep-all 只能在空格符 中文标点符 或连字符处换行</li></ul><p>与之类似的有 word-wrap属性只有一个可用值 break-word</p><p>效果类似break-all ，区别在于</p><img src="/2022/03/24/CSS/3.png" class="" width="3"><h4 id="4-11-空格换行-white-space"><a href="#4-11-空格换行-white-space" class="headerlink" title="4.11 空格换行 white-space"></a>4.11 空格换行 white-space</h4><ul><li>pre 段落内所有的换行符和空格被保留</li><li>nowrap 不会换行 已换行的被强制不换行</li><li>pre-wrap 基本等价于pre</li><li>pre-line 多空格合并 但换行符被保留</li></ul><h4 id="4-12-设置文本方向-direction"><a href="#4-12-设置文本方向-direction" class="headerlink" title="4.12 设置文本方向 direction"></a>4.12 设置文本方向 direction</h4><p>从左往右 或 从右往左</p><ul><li>ltr (left to right) 从左到右</li><li>rtl (right to left) 从右往左</li></ul><h4 id="4-13-设置书写模式-writing-mode"><a href="#4-13-设置书写模式-writing-mode" class="headerlink" title="4.13 设置书写模式 writing-mode"></a>4.13 设置书写模式 writing-mode</h4><ul><li><p>horizontal-tb 常规书写</p></li><li><p>vertical-rl tb tb-rl 从上而下 自右而左</p></li><li><p>vertical-lr 从上而下 从左到右</p></li><li><p>sideways-lr(火狐支持) 从下到上 从左到右换行</p></li><li><p>sideways-rl(火狐支持) 从上到下 从右到左换行</p></li></ul><h4 id="4-14-单行文本裁切-text-overflow"><a href="#4-14-单行文本裁切-text-overflow" class="headerlink" title="4.14 单行文本裁切 text-overflow"></a>4.14 单行文本裁切 text-overflow</h4><p>当文本溢出时处理</p><p>配合white-space 和 overflow 使用</p><ul><li>ellipisis 显示省略号来代表被裁减的文本</li><li>clip 裁剪文本</li></ul><h4 id="4-15-多行文本裁切"><a href="#4-15-多行文本裁切" class="headerlink" title="4.15 多行文本裁切"></a>4.15 多行文本裁切</h4><p>生效的必要属性：</p><ul><li>-webkit-line -clamp:[number] 表示保留number行后开始进行文本裁剪</li><li>overflow:hidden 隐藏溢出部分</li><li>text-overflow:ellipisis 更好看到效果</li><li>display:-webkit-box  使用webkit内核特殊的盒子</li><li>-webkit-box-orient:vertical 表示盒子伸展方向为纵向</li></ul></blockquote><h2 id="五-盒子模型"><a href="#五-盒子模型" class="headerlink" title="五.盒子模型"></a>五.盒子模型</h2><blockquote><h4 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h4><img src="/2022/03/24/CSS/4.png" class="" width="4"><ul><li>margin 外间距</li><li>border 盒子壁</li><li>padding 內间距</li></ul><p>标准盒子模型weight 和 height只包含content的宽和高的值</p><h4 id="5-2-元素宽度-width"><a href="#5-2-元素宽度-width" class="headerlink" title="5.2 元素宽度 width"></a>5.2 元素宽度 width</h4><p>IE盒子包含content padding border</p><p>标准盒子只包含content</p><p>像素设置和百分比设置</p><h4 id="5-3-元素高度-height"><a href="#5-3-元素高度-height" class="headerlink" title="5.3 元素高度 height"></a>5.3 元素高度 height</h4><p>类似width</p><p>不同的是要给各级上级元素设置height都设置一个值</p><h4 id="5-4-外间距-margin"><a href="#5-4-外间距-margin" class="headerlink" title="5.4 外间距 margin"></a>5.4 外间距 margin</h4><p>组合写法 顺时针 上右下左</p><p>​两个值时 第一个代表上下 第二个代表左右</p><p>​三个值时 上 左右 下</p><p>margin:0 auto 可以实现居中</p><p>特性问题</p><p>外边距合并问题 </p><ol><li><p>兄弟关系</p><p>垂直方向 取最大值</p><p>水平方向 各自占各自 </p></li><li><p>父子关系</p><p>子元素设置外边距 显示效果为父元素外边距</p><p>解决方法：</p><ol><li>给父盒子设置边框</li><li>加浮动</li><li>overflow:hidden</li></ol></li></ol><h4 id="5-5-內间距-padding"><a href="#5-5-內间距-padding" class="headerlink" title="5.5 內间距 padding"></a>5.5 內间距 padding</h4><p>类似margin</p><p>padding对行内元素和块级元素的处理上存在差异</p><h4 id="5-6-元素边框-border"><a href="#5-6-元素边框-border" class="headerlink" title="5.6 元素边框 border"></a>5.6 元素边框 border</h4><ul><li><p>border-width 设置边界宽度 搭配border-style使用</p></li><li><p>border-style </p><ul><li>none 无边框 默认值</li><li>solid 实线</li><li>dotted 点线</li><li>dashed 虚线</li><li>double 双线边框 需要width大于3px才能看出来</li><li>groove 3D凹槽边框 大于5px</li><li>ridge 3D凸槽边框 大于3px</li><li>inset 内浮雕边框 大于1px</li><li>outset 外浮雕边框 大于1px</li></ul><img src="/2022/03/24/CSS/5.png" class="" width="5"></li><li><p>border-color</p></li><li><p>组合写法 </p><p>border:border-width border-style border-color</p></li></ul><p>小三角设计</p><img src="/2022/03/24/CSS/6.png" class="" width="6"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">section</span> &gt; <span class="hljs-selector-tag">div</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">border-style</span>: solid;<br>    <span class="hljs-attribute">border-color</span>: <span class="hljs-number">#504e4e</span> transparent transparent  transparent;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: -.<span class="hljs-number">2em</span>;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(-<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-7-图片边框-border-image"><a href="#5-7-图片边框-border-image" class="headerlink" title="5.7 图片边框 border-image"></a>5.7 图片边框 border-image</h4><ul><li><p>border-image-sourse 图片地址</p></li><li><p>border-image-slice </p><ul><li><p>一个值 四个方向的内偏移量</p></li><li><p>两个值 一个水平 一个垂直</p><p>​         如果出现fill 则数值部分表示一个值时的作用 fill表示可以替代background-image</p></li></ul></li><li><p>border-image-width</p></li><li><p>border-image-outset 边框图像超出边框的量</p></li><li><p>border-image-repeat </p><ul><li>stretch 拉伸图像来填充</li><li>repeat 平铺来填充</li><li>round 类似repeat 无法完整平铺 则进行缩放</li><li>space 类似repeat 无法完整平铺 则扩展空间会分布在图像周围</li></ul></li></ul><h4 id="5-8-圆角的盒子-border-radius"><a href="#5-8-圆角的盒子-border-radius" class="headerlink" title="5.8 圆角的盒子 border-radius"></a>5.8 圆角的盒子 border-radius</h4><p>最大为50% 超过将不会在有变化</p><h4 id="5-9-元素的轮廓-outline"><a href="#5-9-元素的轮廓-outline" class="headerlink" title="5.9 元素的轮廓 outline"></a>5.9 元素的轮廓 outline</h4><ul><li>outline-width 轮廓线宽度</li><li>outline-style 样式</li><li>outline-color 颜色</li><li>outline-offset 轮廓线相对元素边界的距离</li></ul><h4 id="5-10-可调整元素大小的-resize"><a href="#5-10-可调整元素大小的-resize" class="headerlink" title="5.10 可调整元素大小的 resize"></a>5.10 可调整元素大小的 resize</h4><p>和 overflow搭配使用</p><ul><li>none 无法拖动</li><li>both 可以任意方向调整</li><li>horizontal 可以调整宽度</li><li>vertical 可以调整高度</li></ul><h4 id="5-11-元素的阴影-box-shadow"><a href="#5-11-元素的阴影-box-shadow" class="headerlink" title="5.11 元素的阴影 box-shadow"></a>5.11 元素的阴影 box-shadow</h4><ul><li>h-skewing 阴影在水平方向的偏移 负数向左</li><li>v-skewing 垂直方向偏移 负数向上</li><li>blur 模糊距离 模糊程度</li><li>spread 扩展范围</li><li>color </li><li>inset 默认的向外改为向内</li></ul><p>也可以多个组合属性 利用逗号隔开，形成多彩的效果</p><h4 id="5-12-内容溢出属性-overflow"><a href="#5-12-内容溢出属性-overflow" class="headerlink" title="5.12 内容溢出属性 overflow"></a>5.12 内容溢出属性 overflow</h4><ul><li>visible 超出不被处理 会超出边界</li><li>hidden 溢出内容被隐藏</li><li>scroll 始终滚动条显示 </li><li>auto 只有在溢出时会出现滚动条</li></ul></blockquote><h2 id="六-块级-行内块-行内"><a href="#六-块级-行内块-行内" class="headerlink" title="六.块级 行内块 行内"></a>六.块级 行内块 行内</h2><blockquote><h4 id="6-1-块级"><a href="#6-1-块级" class="headerlink" title="6.1 块级"></a>6.1 块级</h4><ul><li>display:block</li><li>display:list-item</li></ul><p>p标签中不可以再放块级元素</p><h4 id="6-2-行内"><a href="#6-2-行内" class="headerlink" title="6.2 行内"></a>6.2 行内</h4><p>不能设置宽高</p><p>边距对水平生效 垂直不生效</p><h4 id="6-3-行内块"><a href="#6-3-行内块" class="headerlink" title="6.3 行内块"></a>6.3 行内块</h4><p> img input</p><p>不独占一行 但可以设置宽高</p></blockquote><h2 id="七-定位"><a href="#七-定位" class="headerlink" title="七.定位"></a>七.定位</h2><blockquote><h4 id="7-1-绝对定位-absolute"><a href="#7-1-绝对定位-absolute" class="headerlink" title="7.1 绝对定位 absolute"></a>7.1 绝对定位 absolute</h4><p>如果父元素设置定位为relative</p><p>孩子元素设置为absolute 则是相对于父元素</p><p>如果父元素不设置 则是相对于界面</p><p><strong>子绝父相</strong></p><h4 id="7-2-相对定位-relative"><a href="#7-2-相对定位-relative" class="headerlink" title="7.2 相对定位 relative"></a>7.2 相对定位 relative</h4><p>会保留之前的位置 </p><h4 id="7-3-固定定位-fixed"><a href="#7-3-固定定位-fixed" class="headerlink" title="7.3 固定定位 fixed"></a>7.3 固定定位 fixed</h4><p>脱离文档流 偏移位置为浏览器当前窗口</p><h4 id="7-4-粘性定位-sticky"><a href="#7-4-粘性定位-sticky" class="headerlink" title="7.4 粘性定位 sticky"></a>7.4 粘性定位 sticky</h4><p>可以做吸顶效果</p></blockquote><h2 id="八-浮动元素自适应-清除浮动"><a href="#八-浮动元素自适应-清除浮动" class="headerlink" title="八.浮动元素自适应(清除浮动)"></a>八.浮动元素自适应(清除浮动)</h2><blockquote><ul><li><p>为父盒子设置高度</p><p>缺点 如果浮动元素个数多造成换行会出现问题</p></li><li><p>浮动元素后面加个空div标签 样式设置为clear:both</p><p>缺点 增加了空标签 不利于代码可读性</p></li><li><p>溢出隐藏 overflow:hidden</p><p>缺点 会隐藏溢出的元素</p></li><li><p>最优方案</p><p>伪元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.class</span><span class="hljs-selector-pseudo">::after</span>&#123;<br>    <span class="hljs-attribute">content</span>:<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-attribute">clear</span>:both;<br>    <span class="hljs-attribute">display</span>:block;<br>        <br>    <span class="hljs-comment">/*隐藏方法*/</span><br>    <span class="hljs-attribute">display</span>:none; <span class="hljs-comment">/*不会占位*/</span><br>    <span class="hljs-attribute">visibility</span>:hidden;<span class="hljs-comment">/*占位隐藏*/</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>语法分析</title>
    <link href="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <url>/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了编译原理中的语法分析，希望对您有所帮助</p><span id="more"></span><h3 id="一-完成的功能"><a href="#一-完成的功能" class="headerlink" title="一. 完成的功能"></a>一. 完成的功能</h3><blockquote><p>输入：所给文法的源程序字符串</p><p>输出：success or error</p><p>例：测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">begin <br>x:=<span class="hljs-number">9</span>;<br>x:=<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>/<span class="hljs-number">3</span><br>end #<br></code></pre></td></tr></table></figure><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="运行结果"></blockquote><h3 id="二-主体框架"><a href="#二-主体框架" class="headerlink" title="二. 主体框架"></a>二. 主体框架</h3><blockquote><ol><li><p>主函数</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E4%B8%BB%E5%87%BD%E6%95%B0.png" class="" title="主函数"></li><li><p>递归下降分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D.png" class="" title="递归下降"></li><li><p>语句串分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/%E8%AF%AD%E5%8F%A5%E4%B8%B2.png" class="" title="语句串"></li><li><p>statement语句分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/statement.png" class="" title="statement"></li><li><p>expression表达式分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/expression.png" class="" title="expression"></li><li><p>term分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/term.png" class="" title="term"></li><li><p>factor分析</p><img src="/2021/05/02/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90/factor.png" class="" title="factor"></li></ol></blockquote><h3 id="三-重难点"><a href="#三-重难点" class="headerlink" title="三. 重难点"></a>三. 重难点</h3><blockquote><ol><li><p>了解递归下降程序的一般形式</p><ul><li><p>当遇到终结符时 if(..&#x3D;&#x3D;..) scaner();</p></li><li><p>当遇到非终结符时 调用该非终结符的函数</p></li><li><p>当遇到推 ε 时</p><p>​if(当前符号不属于对应的follow集) error()</p></li></ul></li><li><p>列出BNF表示法式子</p><p>（1）&lt;程序&gt;：：&#x3D;begin&lt;语句串&gt; end</p><p>（2）&lt;语句串&gt;：：&#x3D;&lt;语句&gt;{；&lt;语句&gt;}</p><p>（3）&lt;语句&gt;：：&#x3D;&lt;赋值语句&gt;</p><p>（4）&lt;赋值语句&gt;：：&#x3D;ID：&#x3D;&lt;表达式&gt;</p><p>（5）&lt;表达式&gt;：：&#x3D;&lt;项&gt;{+&lt;项&gt;|-&lt;项&gt;}</p><p>（6）&lt;项&gt;：：&#x3D;&lt;因子&gt;{*&lt;因子&gt;|&#x2F;&lt;因子&gt;}</p><p>（7）&lt;因子&gt;：：&#x3D;ID | NUM | {&lt;表达式&gt;}</p></li><li><p>如果分析的语法过于复杂则BNF表示的式子也会过多 导致编写困难</p></li></ol></blockquote><h3 id="四-收获"><a href="#四-收获" class="headerlink" title="四. 收获"></a>四. 收获</h3><blockquote><p>​首先更加清晰的理解了语法分析的主要任务，它是在词法分析的基础上将单词组合起来,组成一些语句，其次是理解了递归下降分析法，它是一种自顶向下的分析，根据文法来构造递归函数，代码简单直观，易于编写，但是对文法要求必须是LL(1)文法，由于递归调用次数会较多，影响分析的效率。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>词法分析</title>
    <link href="/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/"/>
    <url>/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>本文主要介绍了编译原理中的词法分析，希望对您有所帮助</p><span id="more"></span><h3 id="一-完成的功能"><a href="#一-完成的功能" class="headerlink" title="一. 完成的功能"></a>一. 完成的功能</h3><blockquote><p>输入：所给文法的源程序字符串</p><p>输出：二元组 ( syn , token或sum)</p><p>syn为单词种别码 token为依次读入的字符串 sum为整数</p><p>例：测试案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">begin  <br>x:=<span class="hljs-number">9</span>;  <span class="hljs-comment">//注释部分</span><br><span class="hljs-keyword">if</span> x&gt;<span class="hljs-number">0</span> then x:=<span class="hljs-number">2</span>*x+<span class="hljs-number">1</span>/<span class="hljs-number">3</span>;<br>end #<br></code></pre></td></tr></table></figure><img src="/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class="" title="运行结果"></blockquote><h3 id="二-主体框架"><a href="#二-主体框架" class="headerlink" title="二. 主体框架"></a>二. 主体框架</h3><blockquote><ol><li><p>主函数</p><img src="/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/main.png" class="" title="main"></li><li><p>analyzer函数</p><img src="/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/analyzer.png" class="" title="analyzer"></li></ol></blockquote><h3 id="三-重难点"><a href="#三-重难点" class="headerlink" title="三. 重难点"></a>三. 重难点</h3><blockquote><ol><li><p>读入多行字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferedReader</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br><span class="hljs-keyword">do</span>&#123;<br>    input=stdin.readLine();<br>    last_input+=input;<br>    ch=input.charAt(input.length()-<span class="hljs-number">1</span>);  <span class="hljs-comment">//得到一行中最后一个字符</span><br>&#125;<span class="hljs-keyword">while</span>(ch!=<span class="hljs-string">&#x27;#&#x27;</span>);        <span class="hljs-comment">//输入以#字符结尾</span><br></code></pre></td></tr></table></figure><p>InputStreamReader类与其他输入流一起工作。它也被称为字节流和字符流之间的桥梁。这是因为InputStreamReader从输入流中读取作为字符的字节。</p><p>例如，某些字符需要2个字节才能存储在存储器中。要读取此类数据，我们可以使用输入流读取器，该读取器一起读取2个字节并将其转换为相应的字符。</p><p>考虑到字符串中有可能有中文 所以采用缓冲流</p><img src="/2021/05/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90/%E7%BC%93%E5%86%B2%E6%B5%81.png" class="" title="缓冲流"></li><li><p>analyzer</p><p>关键点在怎么做到分割串的效果</p><p>挨个读入字符 根据第一个字符的情况分开讨论 思路详见流程图</p><p>特别注意 当判断不符合时记得即使回退指针(index)</p></li></ol></blockquote><h3 id="四-收获"><a href="#四-收获" class="headerlink" title="四. 收获"></a>四. 收获</h3><blockquote><p>​因为是第一次实验词法分析，实验思路整体简单，主要收收获吧还是在这个过程中复习了下java的语法，特别是读入多行字符串的处理，还有记得设初值为空，这个问题还花了我小半个小时愣是没发现，不过这半小时下来对代码倒是熟悉了不少。还有些不足就是没有实现可视化窗口，这个还没有学会，争取在语法分析写完之后可以将两者合起来可视化。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ES6</title>
    <link href="/2021/03/10/ES6/"/>
    <url>/2021/03/10/ES6/</url>
    
    <content type="html"><![CDATA[<p>本文对ES6的一些简单用法进行介绍，希望对您有所帮助</p><span id="more"></span><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h3 id="一-定义变量"><a href="#一-定义变量" class="headerlink" title="一. 定义变量"></a>一. 定义变量</h3><blockquote><ol><li><p>let 与var 的区别 </p><p>let必须先定义再使用</p><p>变量重名 let 的会报错  var不会</p><p>块级作用域 </p><p>​let 会被括号{ }限制</p><p>​var 只会被function限制</p></li><li><p>const 常量 必须赋初值 后面不可再被赋值</p></li></ol></blockquote><h3 id="二-箭头函数"><a href="#二-箭头函数" class="headerlink" title="二. 箭头函数"></a>二. 箭头函数</h3><blockquote><ol><li><p>格式 </p><p>var test &#x3D; () &#x3D;&gt; {</p><p>​..</p><p>}</p></li><li><p>小括号可以省略</p><p>条件 形参只有一个 </p><p>var test &#x3D; a&#x3D;&gt;{</p><p>}</p></li><li><p>大括号可以省略</p><p>只有一句代码时 </p><p>只有一个return 时 return也可以省</p></li><li><p>没有arguments  </p><p>arguments 是用来获取形参 的一个伪数组</p></li><li><p>this问题</p><p>箭头函数this  是父级作用域的</p></li></ol></blockquote><h3 id="三-解构赋值"><a href="#三-解构赋值" class="headerlink" title="三. 解构赋值"></a>三. 解构赋值</h3><blockquote><ol><li><p>按照结构快速从数组中取值</p><p>交换 a b值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span> <br><span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span><br><span class="hljs-keyword">var</span> [b,a] = [a,b]<br></code></pre></td></tr></table></figure><p>多维数组取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,[<span class="hljs-number">5</span>]]]<br><span class="hljs-comment">//取5</span><br><span class="hljs-keyword">var</span> [a,b,[c,d,[e]]] = arr<br><span class="hljs-comment">// e 即为值</span><br></code></pre></td></tr></table></figure></li><li><p>快速取对象中的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&quot;kai&quot;</span>,<br>    <span class="hljs-attr">age</span>:<span class="hljs-number">100</span>,<br>    <span class="hljs-attr">location</span>:<span class="hljs-number">111</span><br>&#125;<br><span class="hljs-keyword">let</span> &#123;name,age,location&#125; = obj<br><span class="hljs-comment">//   要对应 对号入座</span><br><span class="hljs-comment">// 有时候会重名 解决方法：location:mylocation \ 或者用var \ 用.获取</span><br></code></pre></td></tr></table></figure></li></ol></blockquote><h3 id="四-对象简写"><a href="#四-对象简写" class="headerlink" title="四. 对象简写"></a>四. 对象简写</h3><blockquote><ol><li>当key 和 变量 一致时可以省略一个</li><li>值为函数时可以省掉 ：function</li></ol></blockquote><h3 id="五-展开运算符"><a href="#五-展开运算符" class="headerlink" title="五. 展开运算符"></a>五. 展开运算符</h3><blockquote><ol><li><p>三个点 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">var</span> b = [<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-keyword">var</span> d = [a,b] <span class="hljs-comment">// [[1,2,3],[4,5,6]]</span><br><span class="hljs-keyword">var</span> c = [...a,...b] <span class="hljs-comment">// 1 2 3 4 5 6</span><br></code></pre></td></tr></table></figure></li><li><p>不确定数形参 </p></li><li><p>实参 也会对号入座</p></li><li><p>伪数组转化</p><p>var arr &#x3D; […arguments]</p></li><li><p>合并对象</p><p>var obj &#x3D; {</p><p>​      …obj1,</p><p>​      …obj2</p><p>}</p></li></ol></blockquote><h3 id="六-模块化语法"><a href="#六-模块化语法" class="headerlink" title="六. 模块化语法"></a>六. 模块化语法</h3><blockquote><ol><li><p>使用方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> &#123;函数名<span class="hljs-number">1</span>,函数名<span class="hljs-number">2</span>,...&#125;<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;module&quot;</span>&gt;<br>    <span class="hljs-keyword">import</span> &#123;函数名<span class="hljs-number">1</span>,函数名<span class="hljs-number">2</span>,...&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./文件包名/文件名.js&#x27;</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>解决问题</p></li></ol><ul><li><p>私密不漏 不能调js文件中的私密函数</p></li><li><p>重名问题 导入多个时如果有重名会提示报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123;函数名<span class="hljs-number">1</span>,函数名<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> 新函数名<span class="hljs-number">2</span>,...&#125;<br></code></pre></td></tr></table></figure></li><li><p>依赖不乱 导入顺序不对会出问题</p><p>可以在需要调用别的js文件的文件中import导入</p></li></ul></blockquote><h3 id="七-面向对象"><a href="#七-面向对象" class="headerlink" title="七. 面向对象"></a>七. 面向对象</h3><blockquote><ol><li><p>创建对象</p><p>字面量 </p><p>new 方法</p><p>工厂函数</p><p><strong>自定义构造函数</strong></p><p>注意：</p><p>​首字母大写 推荐</p><p>​构造函数无return 无意义</p><p>​</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CreateObj</span>(<span class="hljs-params">name</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">a</span> = <span class="hljs-number">1</span><br>&#125;<br><span class="hljs-keyword">var</span> obj1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateObj</span>(<span class="hljs-number">111</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>原型</strong></p><p>共用内存</p><p>构造函数.prototype.共享函数 &#x3D; 。。。</p><p><em><strong>对象.__ proto__ &#x3D;&#x3D;&#x3D; 构造函数.prototype</strong></em></p><p>扩展 原型链</p><p>​对象调用方法时 先找自己有没有 再找构造函数的prototype 没有再找上一级的 </p><p>​顶点为Object</p></li><li><p>ES6 的class</p><p>语法糖 单纯的换了个形式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Create</span>&#123;<br>    constructor&#123;<br>        <span class="hljs-comment">//构造函数</span><br>    &#125;<br>。。。<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>继承</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//构造函数继承 -- 属性继承</span><br><span class="hljs-comment">//无法继承方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">person</span>(<span class="hljs-params">name,age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br>&#125;<br>person.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">student</span>(<span class="hljs-params">name,age,grade</span>)&#123;<br>    person.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,name,age) <span class="hljs-comment">//call 改变了this指向 由window指向student构造函数</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">grade</span> = grade<br>&#125;<br><span class="hljs-comment">//原型继承</span><br>student.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = person.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> <span class="hljs-comment">//不可取 会相互改变影响</span><br>student.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_">person</span>() <span class="hljs-comment">//不相互影响 但会多废料 但不会影响</span><br>student.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">print</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125; <span class="hljs-comment">//增加方法</span><br>student.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;...&#125; <span class="hljs-comment">//覆盖方法</span><br>student.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say2</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;   <span class="hljs-comment">//增强方法 重起个名字</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">say</span>()<br>    ... <br>&#125;<br><span class="hljs-comment">//组合继承 -- 两者结合</span><br></code></pre></td></tr></table></figure></li><li><p>ES6 继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//extends 原型继承 </span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">person</span>&#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name,age</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(name,age)   <span class="hljs-comment">//person.call(this,name,age)</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">grader</span> = grade<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java scripts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2020/09/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2020/09/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2020/09/01/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/xiaoniao.jpg" class="" title="图片引用方法一">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/09/01/hello-world/"/>
    <url>/2020/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
